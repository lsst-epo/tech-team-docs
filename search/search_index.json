{"config":{"indexing":"full","lang":["en","es"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Rubin EPO Web Development: A How To Introduction So, you're developing apps/websites for Rubin's Education and Public Outreach team (EPO) . Yeay! This guide will touch on a number of subjects pertaining to developing new/existing products for EPO, as well as share some opinions and resources applicable to web development in general. If you are rip-roaring to start building/working on something immediately, and you are a web developer equal parts awesome, confident, and curious, feel free to jump right into any repo in EPO's Github Organization . Each repo should contain a readme to get you going, but the readme may be making some base assumptions about what global dependencies are installed on your machine. Checkout the links below. Enjoy learning all about web development on the EPO team. Quick Links Important Cloud Services External services we rely on for most projects. Useful Apps Apps we use everyday for everyday development things. Global Dependencies Web development tools we use on the EPO team. The globally installed dependencies can be considered the recommended prerequisites before running any EPO project repo locally. Project Dependencies Tools you'll come across in most EPO projects that are installed and/or configured at the project level (i.e. not global dependencies). You will often also find these tools called out in project readme. Github A couple of global Github settings and conventions. CMS Backend + React Frontend Stack Our platonic Stack: Headless Craft 3 CMS + Next.js Investigations How is this repo structured, what's goin on here, and what are any unique dependencies. Skyviewer How is this repo structured, what's goin on here, and what are any unique dependencies.","title":"Rubin EPO Web Development: A How To"},{"location":"#rubin-epo-web-development-a-how-to","text":"","title":"Rubin EPO Web Development: A How To"},{"location":"#introduction","text":"So, you're developing apps/websites for Rubin's Education and Public Outreach team (EPO) . Yeay! This guide will touch on a number of subjects pertaining to developing new/existing products for EPO, as well as share some opinions and resources applicable to web development in general. If you are rip-roaring to start building/working on something immediately, and you are a web developer equal parts awesome, confident, and curious, feel free to jump right into any repo in EPO's Github Organization . Each repo should contain a readme to get you going, but the readme may be making some base assumptions about what global dependencies are installed on your machine. Checkout the links below. Enjoy learning all about web development on the EPO team.","title":"Introduction"},{"location":"#quick-links","text":"","title":"Quick Links"},{"location":"#important-cloud-services","text":"External services we rely on for most projects.","title":"Important Cloud Services"},{"location":"#useful-apps","text":"Apps we use everyday for everyday development things.","title":"Useful Apps"},{"location":"#global-dependencies","text":"Web development tools we use on the EPO team. The globally installed dependencies can be considered the recommended prerequisites before running any EPO project repo locally.","title":"Global Dependencies"},{"location":"#project-dependencies","text":"Tools you'll come across in most EPO projects that are installed and/or configured at the project level (i.e. not global dependencies). You will often also find these tools called out in project readme.","title":"Project Dependencies"},{"location":"#github","text":"A couple of global Github settings and conventions.","title":"Github"},{"location":"#cms-backend-react-frontend-stack","text":"Our platonic Stack: Headless Craft 3 CMS + Next.js","title":"CMS Backend + React Frontend Stack"},{"location":"#investigations","text":"How is this repo structured, what's goin on here, and what are any unique dependencies.","title":"Investigations"},{"location":"#skyviewer","text":"How is this repo structured, what's goin on here, and what are any unique dependencies.","title":"Skyviewer"},{"location":"markdown-cheat-sheet/","text":"Markdown Cheat Sheet Thanks for visiting The Markdown Guide ! This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can\u2019t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax . Basic Syntax These are the elements outlined in John Gruber\u2019s original design document. All Markdown applications support these elements. Heading H1 H2 H3 Bold bold text Italic italicized text Blockquote blockquote Ordered List First item Second item Third item Unordered List First item Second item Third item Code code Horizontal Rule Link Markdown Guide Image Extended Syntax These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements. Table Syntax Description Header Title Paragraph Text Fenced Code Block { \"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25 } Footnote Here's a sentence with a footnote. [^1] [^1]: This is the footnote. Heading ID My Great Heading {#custom-id} Definition List term : definition Strikethrough ~~The world is flat.~~ Task List [x] Write the press release [ ] Update the website [ ] Contact the media Emoji That is so funny! :joy: (See also Copying and Pasting Emoji ) Highlight I need to highlight these ==very important words==. Subscript H~2~O Superscript X^2^","title":"Markdown Cheat Sheet"},{"location":"markdown-cheat-sheet/#markdown-cheat-sheet","text":"Thanks for visiting The Markdown Guide ! This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can\u2019t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax .","title":"Markdown Cheat Sheet"},{"location":"markdown-cheat-sheet/#basic-syntax","text":"These are the elements outlined in John Gruber\u2019s original design document. All Markdown applications support these elements.","title":"Basic Syntax"},{"location":"markdown-cheat-sheet/#heading","text":"","title":"Heading"},{"location":"markdown-cheat-sheet/#h1","text":"","title":"H1"},{"location":"markdown-cheat-sheet/#h2","text":"","title":"H2"},{"location":"markdown-cheat-sheet/#h3","text":"","title":"H3"},{"location":"markdown-cheat-sheet/#bold","text":"bold text","title":"Bold"},{"location":"markdown-cheat-sheet/#italic","text":"italicized text","title":"Italic"},{"location":"markdown-cheat-sheet/#blockquote","text":"blockquote","title":"Blockquote"},{"location":"markdown-cheat-sheet/#ordered-list","text":"First item Second item Third item","title":"Ordered List"},{"location":"markdown-cheat-sheet/#unordered-list","text":"First item Second item Third item","title":"Unordered List"},{"location":"markdown-cheat-sheet/#code","text":"code","title":"Code"},{"location":"markdown-cheat-sheet/#horizontal-rule","text":"","title":"Horizontal Rule"},{"location":"markdown-cheat-sheet/#link","text":"Markdown Guide","title":"Link"},{"location":"markdown-cheat-sheet/#image","text":"","title":"Image"},{"location":"markdown-cheat-sheet/#extended-syntax","text":"These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements.","title":"Extended Syntax"},{"location":"markdown-cheat-sheet/#table","text":"Syntax Description Header Title Paragraph Text","title":"Table"},{"location":"markdown-cheat-sheet/#fenced-code-block","text":"{ \"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25 }","title":"Fenced Code Block"},{"location":"markdown-cheat-sheet/#footnote","text":"Here's a sentence with a footnote. [^1] [^1]: This is the footnote.","title":"Footnote"},{"location":"markdown-cheat-sheet/#heading-id","text":"","title":"Heading ID"},{"location":"markdown-cheat-sheet/#my-great-heading-custom-id","text":"","title":"My Great Heading {#custom-id}"},{"location":"markdown-cheat-sheet/#definition-list","text":"term : definition","title":"Definition List"},{"location":"markdown-cheat-sheet/#strikethrough","text":"~~The world is flat.~~","title":"Strikethrough"},{"location":"markdown-cheat-sheet/#task-list","text":"[x] Write the press release [ ] Update the website [ ] Contact the media","title":"Task List"},{"location":"markdown-cheat-sheet/#emoji","text":"That is so funny! :joy: (See also Copying and Pasting Emoji )","title":"Emoji"},{"location":"markdown-cheat-sheet/#highlight","text":"I need to highlight these ==very important words==.","title":"Highlight"},{"location":"markdown-cheat-sheet/#subscript","text":"H~2~O","title":"Subscript"},{"location":"markdown-cheat-sheet/#superscript","text":"X^2^","title":"Superscript"},{"location":"active-projects/main-site/","text":"Main Site Rubin Observatory Operations Site (the Main Site) This project has two associated repos, rubin-obs-api and rubin-obs-client , where the former is a headless Craft 3 CMS instance running in a Docker container, and the latter is a next.js app with a mix of static and dynamic pages. What follows is not a comprehensive description of those technologies (that's covered in [[CMS Backend + React Frontend Stack | The Stack]]) or information about how to get the project up and running on your local (that's covered in the readmes for the api and client and repos), but instead a summary of the repo structure, and any a note on Craft Localization quirks. Client architecture /lib \u2014 backend API fetching methods and GraphQL queries /pages \u2014 a single component that uses getStaticProps and getStaticPaths to dynamically generate static pages for all routes. /components \u2014 all React components for generating portions of static pages. These are further organized by type: \"content-blocks\", \"dynamic\", \"factories\", \"global\", \"layout\", \"primitives\", and \"templates\". /components/content-blocks \u2014 content blocks are the building /components/dynamic \u2014 components that make run-time API requests and are rendered client-side. /theme \u2014 SCSS partials defining the frontend theme. Component styles are defined in the same directory as their components but are imported at /theme/styles/components/_index.scss so that they are compiled in a single global stylesheet. /shapes \u2014 reusuable prop-type shapes for recurring data structures like pages, images, locales, etc. /public \u2014 static assets like favicons that are passed directly to the output directory without hashing. Module aliases are defined in /jsconfig.json . Localization There are some nuances to be aware of when dealing with localization data from Craft in Next.js: Entries must be fetched separately for each locale ( site param in the GraphQL API). If you want to generate pages for all routes, each set of entries must be concatenated into one array first. Similarly, an API request for a single entry must include the locale ( site param) even if the uri includes the subdirectory for the locale (e.g. /es/gallery ). There isn't a site property that exists on an entry but there is a language property. There is also a localized property which will return an array of instances of that entry in all other locales. The LanguageSelect component makes use of these properties to handle client-side routing between localized instances of a page. This approach avoids having to test for the presence of a localized subdirectory in the current route.","title":"Main Site"},{"location":"active-projects/main-site/#main-site","text":"","title":"Main Site"},{"location":"active-projects/main-site/#rubin-observatory-operations-site-the-main-site","text":"This project has two associated repos, rubin-obs-api and rubin-obs-client , where the former is a headless Craft 3 CMS instance running in a Docker container, and the latter is a next.js app with a mix of static and dynamic pages. What follows is not a comprehensive description of those technologies (that's covered in [[CMS Backend + React Frontend Stack | The Stack]]) or information about how to get the project up and running on your local (that's covered in the readmes for the api and client and repos), but instead a summary of the repo structure, and any a note on Craft Localization quirks.","title":"Rubin Observatory Operations Site (the Main Site)"},{"location":"active-projects/main-site/#client-architecture","text":"/lib \u2014 backend API fetching methods and GraphQL queries /pages \u2014 a single component that uses getStaticProps and getStaticPaths to dynamically generate static pages for all routes. /components \u2014 all React components for generating portions of static pages. These are further organized by type: \"content-blocks\", \"dynamic\", \"factories\", \"global\", \"layout\", \"primitives\", and \"templates\". /components/content-blocks \u2014 content blocks are the building /components/dynamic \u2014 components that make run-time API requests and are rendered client-side. /theme \u2014 SCSS partials defining the frontend theme. Component styles are defined in the same directory as their components but are imported at /theme/styles/components/_index.scss so that they are compiled in a single global stylesheet. /shapes \u2014 reusuable prop-type shapes for recurring data structures like pages, images, locales, etc. /public \u2014 static assets like favicons that are passed directly to the output directory without hashing. Module aliases are defined in /jsconfig.json .","title":"Client architecture"},{"location":"active-projects/main-site/#localization","text":"There are some nuances to be aware of when dealing with localization data from Craft in Next.js: Entries must be fetched separately for each locale ( site param in the GraphQL API). If you want to generate pages for all routes, each set of entries must be concatenated into one array first. Similarly, an API request for a single entry must include the locale ( site param) even if the uri includes the subdirectory for the locale (e.g. /es/gallery ). There isn't a site property that exists on an entry but there is a language property. There is also a localized property which will return an array of instances of that entry in all other locales. The LanguageSelect component makes use of these properties to handle client-side routing between localized instances of a page. This approach avoids having to test for the presence of a localized subdirectory in the current route.","title":"Localization"},{"location":"active-projects/investigations/","text":"Formal Education Investigations Introduction The investigations explore Astronomy 101 topics through an interactive question-answer format using LSST data. The investigations are currently being built as static-sites that rely on locally loaded precursor data (NOT LSST data). This section describes the current investigation work flow and stack. Work Flow Developers collaborate with designers and members of the Education Team to design, build, and test the investigations. Educational materials (Teacher's guides, notebooks, and links to supplemental documentation) can be found in the GOAT Google Doc. Developers and designers work from these materials (and directly with other team members) to create the investigation web apps. Currently the apps are: Consuming precursor data as JSON Designed in Sketch Coded in ES6 Javascript, React , SCSS, and HTML Built using Webpack 4 Deployed as a static site to Github Pages (for production) and Netlify (for staging) The Stack Data The investigation app consumes JSON for precursor astronomical data: Example data format Example local http request using Axios ES6 Javascript Modern JS is transcompiled to vanilla javascript using babel. Important ES6 functionality includes: import NodeModuleName from 'NodeModuleName' Imports . The glue that points every piece of your web app and every other piece or external dependency. Also helps webpack to make good choices during its builds. class Classes . A more concise, legible, and fancier alternative to the vanilla prototypical inheritance . => The fat arrow . When writing a class fat arrows can help in managing what this is. [..1, 2, 3] The spread operator . Particularly helpful when [[managing React state|react-state-management]] Destructuring objects . Particularly useful in React when taking apart props for use in a Component function, or in the render method. @decoratorName Decorators . A pattern popular in some React libraries. beginnging-string${variableName}end-string String Interpolation","title":"Formal Education Investigations"},{"location":"active-projects/investigations/#formal-education-investigations","text":"","title":"Formal Education Investigations"},{"location":"active-projects/investigations/#introduction","text":"The investigations explore Astronomy 101 topics through an interactive question-answer format using LSST data. The investigations are currently being built as static-sites that rely on locally loaded precursor data (NOT LSST data). This section describes the current investigation work flow and stack.","title":"Introduction"},{"location":"active-projects/investigations/#work-flow","text":"Developers collaborate with designers and members of the Education Team to design, build, and test the investigations. Educational materials (Teacher's guides, notebooks, and links to supplemental documentation) can be found in the GOAT Google Doc. Developers and designers work from these materials (and directly with other team members) to create the investigation web apps. Currently the apps are: Consuming precursor data as JSON Designed in Sketch Coded in ES6 Javascript, React , SCSS, and HTML Built using Webpack 4 Deployed as a static site to Github Pages (for production) and Netlify (for staging)","title":"Work Flow"},{"location":"active-projects/investigations/#the-stack","text":"","title":"The Stack"},{"location":"active-projects/investigations/#data","text":"The investigation app consumes JSON for precursor astronomical data: Example data format Example local http request using Axios","title":"Data"},{"location":"active-projects/investigations/#es6-javascript","text":"Modern JS is transcompiled to vanilla javascript using babel. Important ES6 functionality includes: import NodeModuleName from 'NodeModuleName' Imports . The glue that points every piece of your web app and every other piece or external dependency. Also helps webpack to make good choices during its builds. class Classes . A more concise, legible, and fancier alternative to the vanilla prototypical inheritance . => The fat arrow . When writing a class fat arrows can help in managing what this is. [..1, 2, 3] The spread operator . Particularly helpful when [[managing React state|react-state-management]] Destructuring objects . Particularly useful in React when taking apart props for use in a Component function, or in the render method. @decoratorName Decorators . A pattern popular in some React libraries. beginnging-string${variableName}end-string String Interpolation","title":"ES6 Javascript"},{"location":"active-projects/investigations/axios-request-example/","text":"Helper function creates reusable axios instance with baseUrl set based on node environmental variable: import axios from 'axios'; const getBaseUrl = function(env) { const envs = { development: '/', staging: '/', production: 'https://lsst-epo.github.io/a-window-to-the-stars/', }; return envs[env] || '/'; }; export default axios.create({ baseURL: getBaseUrl(process.env.NODE_ENV), }); In the componentDidMount() lifeycle method of a React Component: import API from 'PATH/TO/API'; ... API.get('static-data/EXAMPLE-DATA.json') .then(res => { console.log(res.data) this.setState(prevState => { ...prevState, data: res.data }); ...","title":"Axios request example"},{"location":"active-projects/investigations/stellar-data-example/","text":"{ \"stars\": [{ \"is_member\": false, \"radius\": X.X, \"RA\": X.XXXXXXX, \"lifetime\": 0.0, \"source_id\": XXXXXXXXXXXXXX, \"luminosity\": X.XXXXXXX, \"Dec\": XX.XXXXXXXXXXXX, \"parent_cluster\": \"NGC_188\", \"mass\": X.X, \"temperature\": XXXX.XXXXXXXXXX }, ...] }","title":"Stellar data example"},{"location":"active-projects/skyviewer/","text":"Skyviewer TBD","title":"Skyviewer"},{"location":"active-projects/skyviewer/#skyviewer","text":"TBD","title":"Skyviewer"},{"location":"cloud-services/","text":"Cloud Services Google Cloud Platform Google Cloud Platform (GCP) is Google's one-stop-shop-clearing-house-AWS-look-alike-do-it-all service. And it is just that. We use GCP to host our web products, and all of the homegrown services, infrastructure, and databases that make those web products go. Every project in GCP: has three instances: prod , integration , and dev . [[Deployment workflows for those environments|Deployment Workflows]] infrastructure defined in terraform has docker containers to be used on build/deploy Netlify Netlify is a static site hosting platform with next.js and gatsby projects in mind. It offers a bunch of wonderful tools for managing and deploying projects, as well as config files to assert even greater control over builds and such. It has a very generous free tier and, before we set up GCP for similar types of development, it was absolutely indispensable. This is close to a legacy service as we now have the capability to host these kinds of client apps in GCP app engine. However, this is still where all of the current iterations of the Formal Education Investigations live and most of them will likely stay here throughout the rest of the pilot testing cycles of FY21 - FY23 and beyond. Starting in FY22 we may begin the process of porting Investigations from the Gatsby to next.js. As this work unfolds we will tackle hosting on GCP in tandem. Canto Canto is a Digital Assets Management system (DAM) that our team uses to house an archive of all of the assets (photos, videos, 3D renderings, etc.) the Rubin project produces, and also as a distribution source for all of the media assets we include in our web products. It has miriad tools for managing, editing, transforming, and sharing assets in the browser. It features a number of integrations as well as a robust API and all of the assets are served over a cdn. User Analytics TBD Legacy These are services we still rely upon but are in the process of shifting away from, or in the process of deprecating those web products that rely upon them. DigitalOcean We use DigitalOcean to host traditional sorts of projects that require a web server and database and the like. We intend to migrate all of the products hosted on DigitalOcean to the Google Cloud Platform by the end of FY22. AWS We used AWS ) for website hosting prior to adopting DigitalOcean. We still use an AWS bucket as an interim media server assets storage solution. We intend to migrate all of the media assets hosted on AWS to Canto by the end of FY22. Namecheap Namecheap handles domain purchases, DNS records, and some name servers stuff. Mostly we've already shifted away from this service. The only site in production that still relies upon it is Data2Dome. We intend to migrate any remaining domains to GCP by the end of 2021.","title":"Cloud Services"},{"location":"cloud-services/#cloud-services","text":"","title":"Cloud Services"},{"location":"cloud-services/#google-cloud-platform","text":"Google Cloud Platform (GCP) is Google's one-stop-shop-clearing-house-AWS-look-alike-do-it-all service. And it is just that. We use GCP to host our web products, and all of the homegrown services, infrastructure, and databases that make those web products go. Every project in GCP: has three instances: prod , integration , and dev . [[Deployment workflows for those environments|Deployment Workflows]] infrastructure defined in terraform has docker containers to be used on build/deploy","title":"Google Cloud Platform"},{"location":"cloud-services/#netlify","text":"Netlify is a static site hosting platform with next.js and gatsby projects in mind. It offers a bunch of wonderful tools for managing and deploying projects, as well as config files to assert even greater control over builds and such. It has a very generous free tier and, before we set up GCP for similar types of development, it was absolutely indispensable. This is close to a legacy service as we now have the capability to host these kinds of client apps in GCP app engine. However, this is still where all of the current iterations of the Formal Education Investigations live and most of them will likely stay here throughout the rest of the pilot testing cycles of FY21 - FY23 and beyond. Starting in FY22 we may begin the process of porting Investigations from the Gatsby to next.js. As this work unfolds we will tackle hosting on GCP in tandem.","title":"Netlify"},{"location":"cloud-services/#canto","text":"Canto is a Digital Assets Management system (DAM) that our team uses to house an archive of all of the assets (photos, videos, 3D renderings, etc.) the Rubin project produces, and also as a distribution source for all of the media assets we include in our web products. It has miriad tools for managing, editing, transforming, and sharing assets in the browser. It features a number of integrations as well as a robust API and all of the assets are served over a cdn.","title":"Canto"},{"location":"cloud-services/#user-analytics","text":"TBD","title":"User Analytics"},{"location":"cloud-services/#legacy","text":"These are services we still rely upon but are in the process of shifting away from, or in the process of deprecating those web products that rely upon them.","title":"Legacy"},{"location":"cloud-services/#digitalocean","text":"We use DigitalOcean to host traditional sorts of projects that require a web server and database and the like. We intend to migrate all of the products hosted on DigitalOcean to the Google Cloud Platform by the end of FY22.","title":"DigitalOcean"},{"location":"cloud-services/#aws","text":"We used AWS ) for website hosting prior to adopting DigitalOcean. We still use an AWS bucket as an interim media server assets storage solution. We intend to migrate all of the media assets hosted on AWS to Canto by the end of FY22.","title":"AWS"},{"location":"cloud-services/#namecheap","text":"Namecheap handles domain purchases, DNS records, and some name servers stuff. Mostly we've already shifted away from this service. The only site in production that still relies upon it is Data2Dome. We intend to migrate any remaining domains to GCP by the end of 2021.","title":"Namecheap"},{"location":"github/","text":"Github Github Teams Core is for EPO team members Contractors is for any external contributors Pull Requests Github repos are configured to only allow PRS to \"Rebase and merge\". Open Source Repositories Open Source repositories should have both Issues and Discussion enabled. Other Special Repositories Certain repositories act as either template repos or base Docker images. It is crucial that these are not removed unless the idea is to altogether remove the template or Docker base image. The repos will have \"template\" or \"base-image\" in the name. The base images in particular should not be altered unless you are knowledgeable of all the Dockerfiles that make use of the base image as there may be unintended bugs that arise if so.","title":"Github"},{"location":"github/#github","text":"","title":"Github"},{"location":"github/#github-teams","text":"Core is for EPO team members Contractors is for any external contributors","title":"Github Teams"},{"location":"github/#pull-requests","text":"Github repos are configured to only allow PRS to \"Rebase and merge\".","title":"Pull Requests"},{"location":"github/#open-source-repositories","text":"Open Source repositories should have both Issues and Discussion enabled.","title":"Open Source Repositories"},{"location":"github/#other-special-repositories","text":"Certain repositories act as either template repos or base Docker images. It is crucial that these are not removed unless the idea is to altogether remove the template or Docker base image. The repos will have \"template\" or \"base-image\" in the name. The base images in particular should not be altered unless you are knowledgeable of all the Dockerfiles that make use of the base image as there may be unintended bugs that arise if so.","title":"Other Special Repositories"},{"location":"global-dependencies/","text":"Global Dependencies Currently, the EPO team exclusively uses Macs. Therefore all of the tools and processes described are going to be Mac specific, but many tools have direct analogs on Windows or Linux, and alternative commands, software, etc. should be readily available (we're not discussing anything too crazy here). In 2020 Apple released a new chip architecture. This new architecture necessitates a few important and particular workflows. When commands or technologies are specific to one architecture or the other, Intel will designate the legacy architecture and M1 will designate the new architecture. Zsh As of Big Sur Apple machines ship with Zsh (as oppose to bash) as the official terminal. This change brings a couple minor differences like editing .zprofile and .zshrc files instead of .bashprofile and .bashrc files, but otherwise is very similar. A couple suggested conveniences to include in your .zprofile : Exports export EDITOR=<your fave text editor> export VISUAL=\"$EDITOR\" Aliases alias ls='ls -GFh' alias gs='git status' alias gf='git fetch --all' alias gr='git log' alias gre='git log --pretty=full' alias arm=\"arch -arm64 zsh --login\" alias intel=\"arch -x86_64 zsh --login\" That first alias gussies up the standard ls output to be a bit more verbose and a bit more human readable. The git aliases are all just shortcuts to typing less. And the last 2 are only applicable if you are on a M1 mac. These commands are useful for quickly switching your whole shell between mac architectures (switching between native M1 architecture and Intel architecture emulated with Rosetta 2) Oh My Zsh One neato thing that zsh supports much better than bash is theming and plugins. Oh My Zsh is a popular framework for managing your Zsh configurations. How to Install: sh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" Aliases: Oh My Zsh aliases a whole bunch of helpful git shortcuts for ya. Theming: There are a whole bunch of themes to choose from , and writing your own, or extending existing themes is fairly straight-forward. For instance, Agnoster is theme attuned to working with git. It will give you some helpful colors and iconography in your prompt that indicate what branch you are on, what kind of commands you may be performing, etc. Homebrew Homebrew is one of those where have you been all my life products. In their own words, it's \"The missing package manager for macOS.\" If you've done much web development without Homebrew you have probably run into many moments where packages or shared dependencies collide, or you hunt all over your file system to delete one version of something just to confidently upgrade to another, or some things are in one user directory, or some weird bin directory, or you're always having to sudo install all manner of things everywhere, and on and on. Well, for the most part Homebrew gets you around all that by being your one source of truth for everything you install on your Mac that isn't downloaded from the App Store. They have some pretty fantastic documentation and there are lots of installation tutorials out there, so we'll breeze through how to install Homebrew, callout a few commands, and then move on to some critical packages that are installed with Homebrew. Note: Homebrew now prompts you to allow the Xcode Command Line Tools to be installed along with the initial Homebrew install. We recommend you allow the Xcode Command Line Tools to be installed in this way. However, if you don't allow, you can always install separately. How to Install: /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" How to Update Homebrew: brew update How to Get a Package: brew install PACKAGE-NAME How to Update a Package: brew upgrade PACKAGE-NAME How to List Packages Installed with Homebrew: brew list What's wrong with Homebrew?: brew doctor Git Git makes the world go 'round. No really. If you are building software (for the web or otherwise) you are going to use Git. Even if you're not committing your work to Github, you're still using Git. So get used to it. It's great. We're not going to spend anytime here going through the basics, instead we'll callout a couple best practices we aspire to on the EPO team. How to Install: brew install git Github Authentication: We use Github to manage all of our repos. We highly recommend using two-factor authentication and connecting with SSH How to Configure Git: git config You can find the Git Config at ~/.gitconfig and you can configure a lot of things Configure a git message template . This is our commit message template . Along with the template you'll find a description of how we think it aides in writing stronger commit messages. Configure a PR message template . This is our PR message template . Along with the template you'll find a description of how we think it aides in writing stronger PR messages. Pick your editor of choice (used for messages, rebases, etc.). If your editor is already aliased: git config --global core.editor \"EDITOR-ALIAS\" . Otherwise enter the absolute path to the editor: git config --global core.editor \"PATH/TO/EDITOR\" How to Branch: We juggle 3 important branches: prod , main , and develop . These branches align with the 3 development environments with Continuous Deployment: prod deploys to Production main deploys to Integration develop deploys to Development . In older projects main is still master . Because the Production and Integration environments are potentially \"live\" to the public or stakeholders you are restricted from pushing work directly to prod and main ; work must be merged from a PR (more on this in Deployment Workflows ). For feature branches include the JIRA ticket key (like EPO-1111 ) in your branch name to associate your pull request with that JIRA ticket. If you know multiple people are going to be committing work to a single JIRA ticket, but on separate branches, differentiate your branch from theirs (like YOUR-NAME/EPO-1111 ) How to Commit: git commit Keep it short, sweet, and to the point. This is our commit message template (see above for guidance on implementation). Each commit should deliver a feature , chore , or bug fix and a reference to the type of commit should be included at the start of the commit log line as [F] , [C] , or [B] respectively. E.g. [F] Brand new cool thing , [C] Trivial maintenance task , [B] Broken thing works better now . Many commits may refer to the same JIRA ticket; no commit should refer to more than one JIRA ticket. To associate commit to a Jira ticket include a reference to the Jira ticket key in the commit message. We typically include this reference as a new line at the end of the commit like: [F] Brand new cool thing Summary of the coolness [EPO-1111] It's the end of the day and you're not ready to push a full on commit? Commit and push your work to a branch for safe keeping anyway, but use a placeholder message git commit -m \"[WIP]\" . Later, when you finish your work, amend your work and change the message git commit --amend . Note: because you already have a message you won't see your commit message template when you amend. Observing this practice ensures that even if your computer explodes during the night, at least the next morning you won't have to readdress that pesky problem from the day before. RIP your exploded computer. How to Pull Requests: You can submit and merge pull requests from the command line , but we generally work in Github to create and approve. You can also use pull request templates. This is our Pull Request Template . Include the JIRA ticket key (like EPO-1111 ) in your branch name to associate your pull request with that JIRA ticket. How to Rebase: git rebase <branch> Rebasing is such an awesome thing. git merge is for squares. It creates kinda superfluous merge messages in the log and tends to lead to more merge conflicts, and conflicts between collaborators' branches. To avoid all this, always rebase your work on top of develop before submitting or merging a pull request: while on your working branch git rebase origin/develop If your project has multiple contributors, rebase your work onto develop after every commit to avoid any merge conflicts down the line. Do a set of commits in your pull request feel too granular? Do they all add up to a single feature, chore, or bug fix? Do the commit messages in your pull request feel all wrong? Start an interactive rebase : git rebase -i HEAD~<NUMBER-OF-COMMITS-BACK> . Once in an interactive rebase you can combine, rewrite, or even skip commits. How to Cherry Pick: git cherry-pick <commit-id> Cherry picking commits off one branch and plopping them onto another has saved many a merge/rebase troubles headache. cherry-pick is what's happening under the hood when rebasing (i.e. a rebase is just a collection of cherry-picks applied in sequence) and it's a good technique to keep in mind when git stuff goes awry. nodenv nodenv is a Node version manager. While EPO is in a position to dictate the Node version space across all of our products, using a version manager is still a meaningful pattern because it increases flexibility, allows for ease of experimentation, and it provides a record of the Node version at a project level. Install: brew install nodenv Global Node: nodenv global <VERSION> (writes version to ~/.nodenv/version ) Local Node: nodenv local <VERSION> (creates .node-version file in root of your project) Note about M1: Support across node dependencies across versions of node across systems/architectures is somewhat patchy. Especially so for Apple M1 as it is still relatively new. For this reason, you will find some repo readmes demand not only specific node versions, but also that it be explicitly installed as M1 or Intel . There is not currently a way to assert this specificity with only nodenv commands. Instead, you need to spoof your desired architecture for your shell and then run your nodenv commands as usual. For example: $ arch -x86_64 zsh --login $ arch i386 $ nodenv install 12.14.0 Downloading node-v12.14.0-darwin-x64.tar.gz... -> https://nodejs.org/dist/v12.14.0/node-v12.14.0-darwin-x64.tar.gz Installing node-v12.14.0-darwin-x64... Installed node-v12.14.0-darwin-x64 to /path/to/.nodenv/versions/12.14.0 If you installed an Intel version of node, it is recommended that you run all subsequent node-related commands as Intel . yarn yarn is a node package manager. It acts as a replacement for npm . yarn and npm continue to converge both in terms of functionality and support. How to install: brew install yarn How to install all dependencies in package.json as specified in yarn.lock : yarn How to add a new dependency: yarn add <PACKAGE-NAME> How to add a new dev dependency: yarn add -D <PACKAGE-NAME> How to run a node command specified in package.json : yarn <COMMAND-NAME> Apps See Useful Apps page","title":"Global Dependencies"},{"location":"global-dependencies/#global-dependencies","text":"Currently, the EPO team exclusively uses Macs. Therefore all of the tools and processes described are going to be Mac specific, but many tools have direct analogs on Windows or Linux, and alternative commands, software, etc. should be readily available (we're not discussing anything too crazy here). In 2020 Apple released a new chip architecture. This new architecture necessitates a few important and particular workflows. When commands or technologies are specific to one architecture or the other, Intel will designate the legacy architecture and M1 will designate the new architecture.","title":"Global Dependencies"},{"location":"global-dependencies/#zsh","text":"As of Big Sur Apple machines ship with Zsh (as oppose to bash) as the official terminal. This change brings a couple minor differences like editing .zprofile and .zshrc files instead of .bashprofile and .bashrc files, but otherwise is very similar. A couple suggested conveniences to include in your .zprofile : Exports export EDITOR=<your fave text editor> export VISUAL=\"$EDITOR\" Aliases alias ls='ls -GFh' alias gs='git status' alias gf='git fetch --all' alias gr='git log' alias gre='git log --pretty=full' alias arm=\"arch -arm64 zsh --login\" alias intel=\"arch -x86_64 zsh --login\" That first alias gussies up the standard ls output to be a bit more verbose and a bit more human readable. The git aliases are all just shortcuts to typing less. And the last 2 are only applicable if you are on a M1 mac. These commands are useful for quickly switching your whole shell between mac architectures (switching between native M1 architecture and Intel architecture emulated with Rosetta 2)","title":"Zsh"},{"location":"global-dependencies/#oh-my-zsh","text":"One neato thing that zsh supports much better than bash is theming and plugins. Oh My Zsh is a popular framework for managing your Zsh configurations. How to Install: sh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" Aliases: Oh My Zsh aliases a whole bunch of helpful git shortcuts for ya. Theming: There are a whole bunch of themes to choose from , and writing your own, or extending existing themes is fairly straight-forward. For instance, Agnoster is theme attuned to working with git. It will give you some helpful colors and iconography in your prompt that indicate what branch you are on, what kind of commands you may be performing, etc.","title":"Oh My Zsh"},{"location":"global-dependencies/#homebrew","text":"Homebrew is one of those where have you been all my life products. In their own words, it's \"The missing package manager for macOS.\" If you've done much web development without Homebrew you have probably run into many moments where packages or shared dependencies collide, or you hunt all over your file system to delete one version of something just to confidently upgrade to another, or some things are in one user directory, or some weird bin directory, or you're always having to sudo install all manner of things everywhere, and on and on. Well, for the most part Homebrew gets you around all that by being your one source of truth for everything you install on your Mac that isn't downloaded from the App Store. They have some pretty fantastic documentation and there are lots of installation tutorials out there, so we'll breeze through how to install Homebrew, callout a few commands, and then move on to some critical packages that are installed with Homebrew. Note: Homebrew now prompts you to allow the Xcode Command Line Tools to be installed along with the initial Homebrew install. We recommend you allow the Xcode Command Line Tools to be installed in this way. However, if you don't allow, you can always install separately. How to Install: /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" How to Update Homebrew: brew update How to Get a Package: brew install PACKAGE-NAME How to Update a Package: brew upgrade PACKAGE-NAME How to List Packages Installed with Homebrew: brew list What's wrong with Homebrew?: brew doctor","title":"Homebrew"},{"location":"global-dependencies/#git","text":"Git makes the world go 'round. No really. If you are building software (for the web or otherwise) you are going to use Git. Even if you're not committing your work to Github, you're still using Git. So get used to it. It's great. We're not going to spend anytime here going through the basics, instead we'll callout a couple best practices we aspire to on the EPO team. How to Install: brew install git Github Authentication: We use Github to manage all of our repos. We highly recommend using two-factor authentication and connecting with SSH How to Configure Git: git config You can find the Git Config at ~/.gitconfig and you can configure a lot of things Configure a git message template . This is our commit message template . Along with the template you'll find a description of how we think it aides in writing stronger commit messages. Configure a PR message template . This is our PR message template . Along with the template you'll find a description of how we think it aides in writing stronger PR messages. Pick your editor of choice (used for messages, rebases, etc.). If your editor is already aliased: git config --global core.editor \"EDITOR-ALIAS\" . Otherwise enter the absolute path to the editor: git config --global core.editor \"PATH/TO/EDITOR\" How to Branch: We juggle 3 important branches: prod , main , and develop . These branches align with the 3 development environments with Continuous Deployment: prod deploys to Production main deploys to Integration develop deploys to Development . In older projects main is still master . Because the Production and Integration environments are potentially \"live\" to the public or stakeholders you are restricted from pushing work directly to prod and main ; work must be merged from a PR (more on this in Deployment Workflows ). For feature branches include the JIRA ticket key (like EPO-1111 ) in your branch name to associate your pull request with that JIRA ticket. If you know multiple people are going to be committing work to a single JIRA ticket, but on separate branches, differentiate your branch from theirs (like YOUR-NAME/EPO-1111 ) How to Commit: git commit Keep it short, sweet, and to the point. This is our commit message template (see above for guidance on implementation). Each commit should deliver a feature , chore , or bug fix and a reference to the type of commit should be included at the start of the commit log line as [F] , [C] , or [B] respectively. E.g. [F] Brand new cool thing , [C] Trivial maintenance task , [B] Broken thing works better now . Many commits may refer to the same JIRA ticket; no commit should refer to more than one JIRA ticket. To associate commit to a Jira ticket include a reference to the Jira ticket key in the commit message. We typically include this reference as a new line at the end of the commit like: [F] Brand new cool thing Summary of the coolness [EPO-1111] It's the end of the day and you're not ready to push a full on commit? Commit and push your work to a branch for safe keeping anyway, but use a placeholder message git commit -m \"[WIP]\" . Later, when you finish your work, amend your work and change the message git commit --amend . Note: because you already have a message you won't see your commit message template when you amend. Observing this practice ensures that even if your computer explodes during the night, at least the next morning you won't have to readdress that pesky problem from the day before. RIP your exploded computer. How to Pull Requests: You can submit and merge pull requests from the command line , but we generally work in Github to create and approve. You can also use pull request templates. This is our Pull Request Template . Include the JIRA ticket key (like EPO-1111 ) in your branch name to associate your pull request with that JIRA ticket. How to Rebase: git rebase <branch> Rebasing is such an awesome thing. git merge is for squares. It creates kinda superfluous merge messages in the log and tends to lead to more merge conflicts, and conflicts between collaborators' branches. To avoid all this, always rebase your work on top of develop before submitting or merging a pull request: while on your working branch git rebase origin/develop If your project has multiple contributors, rebase your work onto develop after every commit to avoid any merge conflicts down the line. Do a set of commits in your pull request feel too granular? Do they all add up to a single feature, chore, or bug fix? Do the commit messages in your pull request feel all wrong? Start an interactive rebase : git rebase -i HEAD~<NUMBER-OF-COMMITS-BACK> . Once in an interactive rebase you can combine, rewrite, or even skip commits. How to Cherry Pick: git cherry-pick <commit-id> Cherry picking commits off one branch and plopping them onto another has saved many a merge/rebase troubles headache. cherry-pick is what's happening under the hood when rebasing (i.e. a rebase is just a collection of cherry-picks applied in sequence) and it's a good technique to keep in mind when git stuff goes awry.","title":"Git"},{"location":"global-dependencies/#nodenv","text":"nodenv is a Node version manager. While EPO is in a position to dictate the Node version space across all of our products, using a version manager is still a meaningful pattern because it increases flexibility, allows for ease of experimentation, and it provides a record of the Node version at a project level. Install: brew install nodenv Global Node: nodenv global <VERSION> (writes version to ~/.nodenv/version ) Local Node: nodenv local <VERSION> (creates .node-version file in root of your project) Note about M1: Support across node dependencies across versions of node across systems/architectures is somewhat patchy. Especially so for Apple M1 as it is still relatively new. For this reason, you will find some repo readmes demand not only specific node versions, but also that it be explicitly installed as M1 or Intel . There is not currently a way to assert this specificity with only nodenv commands. Instead, you need to spoof your desired architecture for your shell and then run your nodenv commands as usual. For example: $ arch -x86_64 zsh --login $ arch i386 $ nodenv install 12.14.0 Downloading node-v12.14.0-darwin-x64.tar.gz... -> https://nodejs.org/dist/v12.14.0/node-v12.14.0-darwin-x64.tar.gz Installing node-v12.14.0-darwin-x64... Installed node-v12.14.0-darwin-x64 to /path/to/.nodenv/versions/12.14.0 If you installed an Intel version of node, it is recommended that you run all subsequent node-related commands as Intel .","title":"nodenv"},{"location":"global-dependencies/#yarn","text":"yarn is a node package manager. It acts as a replacement for npm . yarn and npm continue to converge both in terms of functionality and support. How to install: brew install yarn How to install all dependencies in package.json as specified in yarn.lock : yarn How to add a new dependency: yarn add <PACKAGE-NAME> How to add a new dev dependency: yarn add -D <PACKAGE-NAME> How to run a node command specified in package.json : yarn <COMMAND-NAME>","title":"yarn"},{"location":"global-dependencies/#apps","text":"","title":"Apps"},{"location":"global-dependencies/#see-useful-apps-page","text":"","title":"See Useful Apps page"},{"location":"global-dependencies/commit-message-template/","text":"You may copy and paste the following into a file, and then reference that file in your git config # [LABEL] SHORT SUMMARY WRITTEN IN IMPERATIVE #### ############################################ c50 \u2191 # Leave SECOND LINE BLANK. Use the IMPERATIVE VOICE ############# c72 \u2193 # For git: \"Resolves <ISSUE_NUMBER>\" # # For JIRA: \"<ISSUE_KEY> #<transition_name> #comment <comment_string>\" # Transitions: IN-PROGRESS | IN-REVIEW ##################################################################### \u2193 Why'd we do this? Log Line # [LABEL] SHORT SUMMARY WRITTEN IN IMPERATIVE ### ########################################### c50 \u2191 [LABEL] We use 3 different labels, and they tend to be enough to describe any type of commit: [C] A chore; any change that adds value but does not significantly affect performance or functionality. For example: Changing what a button does is not a chore. A chore is changing the text or color of a button. [F] A feature; any change that adds/improves/changes functionality. Changing the data a graph renders is not a feature. A feature is changing what the graph does with the data. [B] A bug; any change that fixes a performance or functionality issue. Refactoring a JS component for legibility is not a bug. A bug is altering or replacing a JS component so it does what it's suppose to. SHORT SUMMARY WRITTEN IN IMPERATIVE A reminder to be succinct and to use the imperative voice . This voice uses verbs that are commands in the present tense, and lends itself to writing short summaries. ############################################ c50 \u2191 A reminder to BE SUCCINCT. You can, and in many cases should, be verbose in the next section of your commit message but the log line should be < 50 characters whenever possible. This will ensure that it will read well in any context and will help others review many short logs at a glance and have a good understanding of what's going on. This line, as well as the one above it, are each 50 characters long so if your log line stretches past them, consider taking another stab at it. Summary # Leave SECOND LINE BLANK. Use the IMPERATIVE VOICE ############# c72 \u2193 Leave SECOND LINE BLANK. The log line should be followed by a blank line. This blank line tells git where the log line (what show up in short logs) ends, and where the bulk of your commit message (what show up in long logs) begins. Use the IMPERITIVE VOICE Another reminder to USE THAT THERE IMPERATIVE VOICE. ############# c72 \u2193 Add a carriage return after 72 characters so that your commit message fits in the terminal well. This line is 72 characters long. This is far less critical than the log line length as most of us wrap our terminal text. In fact, when Github displays the full commit messages, these carriage returns can look awkward as the text seems to be wrapping unnecessarily. A bit of a toss up. # For git: \"Resolves <ISSUE_NUMBER>\" Generally the EPO team tracks all issue in JIRA. However, occasionally, you may want to associate a commit with a Github issue . To do so, use the Resolves keyword followed by the issue number #111 . For instance, you might create Github issues that each address separate aspects of a larger JIRA ticket. You could then close out issues by associating them with commits, and close out a JIRA ticket by associating it with a pull request. This is a not a predetermined pattern that EPO is using currently, but if it works for you, it works. # For JIRA: \"<ISSUE_KEY> #<transition_name> #comment <comment_string>\" # Transitions: IN-PROGRESS | IN-REVIEW <ISSUE_KEY> To associate a commit with a JIRA ticket just include the ticket key (i.e EPO-1111) as the first thing on a new line. A link to your commit will now automatically show up alongside the ticket description in JIRA. #<transition_name> To set the state of the JIRA ticket using your commit message, first associate it with a ticket (see above), then, on the same line, use # + TRANSITION-NAME . Two states you might want to set are IN-PROGRESS or IN-REVIEW . You should not set the state to DONE as all JIRA tickets should be reviewed by someone other than the author before they are closed. This functionality is not particularly useful for our development because you typically want to indicate a ticket is in progress before you have work to commit, and there is not currently a way to assign (or auto assign) a review when transitioning to IN-REVIEW necessitating you interact with the JIRA web app regardless of what you told it to do from git. #comment <comment_string>\" To add a comment to the JIRA ticket, first associate it with a ticket (see above), then, on the same line, use #comment + YOUR COMMENT . This can be quite a time saver as you may often find yourself copying text from your commit message verbatim for your JIRA comment. Unfortunately there is not currently support for adding work log comments. ##################################################################### \u2193 This line is also 72 characters long. In our project management ecosystem a commit should be <= to a JIRA ticket. That is, it should be the only commit in a pull request that lines up to a JIRA ticket, or it should be one of several commits in a pull request that lines up to a JIRA ticket. A commit message should really never reference more than one JIRA ticket.","title":"Commit message template"},{"location":"global-dependencies/commit-message-template/#whyd-we-do-this","text":"","title":"Why'd we do this?"},{"location":"global-dependencies/commit-message-template/#log-line","text":"# [LABEL] SHORT SUMMARY WRITTEN IN IMPERATIVE ### ########################################### c50 \u2191 [LABEL] We use 3 different labels, and they tend to be enough to describe any type of commit: [C] A chore; any change that adds value but does not significantly affect performance or functionality. For example: Changing what a button does is not a chore. A chore is changing the text or color of a button. [F] A feature; any change that adds/improves/changes functionality. Changing the data a graph renders is not a feature. A feature is changing what the graph does with the data. [B] A bug; any change that fixes a performance or functionality issue. Refactoring a JS component for legibility is not a bug. A bug is altering or replacing a JS component so it does what it's suppose to. SHORT SUMMARY WRITTEN IN IMPERATIVE A reminder to be succinct and to use the imperative voice . This voice uses verbs that are commands in the present tense, and lends itself to writing short summaries. ############################################ c50 \u2191 A reminder to BE SUCCINCT. You can, and in many cases should, be verbose in the next section of your commit message but the log line should be < 50 characters whenever possible. This will ensure that it will read well in any context and will help others review many short logs at a glance and have a good understanding of what's going on. This line, as well as the one above it, are each 50 characters long so if your log line stretches past them, consider taking another stab at it.","title":"Log Line"},{"location":"global-dependencies/commit-message-template/#summary","text":"# Leave SECOND LINE BLANK. Use the IMPERATIVE VOICE ############# c72 \u2193 Leave SECOND LINE BLANK. The log line should be followed by a blank line. This blank line tells git where the log line (what show up in short logs) ends, and where the bulk of your commit message (what show up in long logs) begins. Use the IMPERITIVE VOICE Another reminder to USE THAT THERE IMPERATIVE VOICE. ############# c72 \u2193 Add a carriage return after 72 characters so that your commit message fits in the terminal well. This line is 72 characters long. This is far less critical than the log line length as most of us wrap our terminal text. In fact, when Github displays the full commit messages, these carriage returns can look awkward as the text seems to be wrapping unnecessarily. A bit of a toss up. # For git: \"Resolves <ISSUE_NUMBER>\" Generally the EPO team tracks all issue in JIRA. However, occasionally, you may want to associate a commit with a Github issue . To do so, use the Resolves keyword followed by the issue number #111 . For instance, you might create Github issues that each address separate aspects of a larger JIRA ticket. You could then close out issues by associating them with commits, and close out a JIRA ticket by associating it with a pull request. This is a not a predetermined pattern that EPO is using currently, but if it works for you, it works. # For JIRA: \"<ISSUE_KEY> #<transition_name> #comment <comment_string>\" # Transitions: IN-PROGRESS | IN-REVIEW <ISSUE_KEY> To associate a commit with a JIRA ticket just include the ticket key (i.e EPO-1111) as the first thing on a new line. A link to your commit will now automatically show up alongside the ticket description in JIRA. #<transition_name> To set the state of the JIRA ticket using your commit message, first associate it with a ticket (see above), then, on the same line, use # + TRANSITION-NAME . Two states you might want to set are IN-PROGRESS or IN-REVIEW . You should not set the state to DONE as all JIRA tickets should be reviewed by someone other than the author before they are closed. This functionality is not particularly useful for our development because you typically want to indicate a ticket is in progress before you have work to commit, and there is not currently a way to assign (or auto assign) a review when transitioning to IN-REVIEW necessitating you interact with the JIRA web app regardless of what you told it to do from git. #comment <comment_string>\" To add a comment to the JIRA ticket, first associate it with a ticket (see above), then, on the same line, use #comment + YOUR COMMENT . This can be quite a time saver as you may often find yourself copying text from your commit message verbatim for your JIRA comment. Unfortunately there is not currently support for adding work log comments. ##################################################################### \u2193 This line is also 72 characters long. In our project management ecosystem a commit should be <= to a JIRA ticket. That is, it should be the only commit in a pull request that lines up to a JIRA ticket, or it should be one of several commits in a pull request that lines up to a JIRA ticket. A commit message should really never reference more than one JIRA ticket.","title":"Summary"},{"location":"global-dependencies/pr-message-template/","text":"Commit Message Template You may copy and paste the following into a file, and then implement that file in your repo to see the template propagate to Github PRs JIRA: https://jira.lsstcorp.org/browse/<ID> ## What this change does A few sentences describing the outcome of the change (\u201cfixes a thing\u201d; \"adds the stuff\") and how you tackled it (\u201cadded a prop to prevent lazyloading in the presence of barbara walters\u201d). How successful is the change? And how are you measuring that success? ## Notes for reviewers Where should the reviewer look for the change? Do they review the change on the frontend? How extensive is the change? Does it affect Components used in a variety of contexts? Anything you'd like reviewers to pay particular attention to or questions you have about the change. Include an indication of how detailed a review you want on a 1-10 scale. - 1 = \"I barely need review on this\" - 5 = \"Please make sure there are no obvious errors and that you believe it does what it says it does\" - 10 = \"I think it works, maybe, but we need to look at it together\" ## Testing How did you test this change? Can the reviewer test this change for themselves? If you wrote new tests in the change it's fine to just put \"New tests in PR\". If you haven't added any tests but you think your change is covered by existing tests you can say \"Existing tests\". And if you're not sure how to test it, say that. ## Screenshots (optional) ### Before: ### After: Why'd we do this? In an effort to standardize our team's expectations and use of PRs we created a template that indicates what sort of information is most useful for a reviewer. Broadly speaking, we're looking for a couple components in a PR message: What change did you make? How do you know the change is valid? How can a reviewer validate your change?","title":"Pr message template"},{"location":"global-dependencies/pr-message-template/#commit-message-template","text":"You may copy and paste the following into a file, and then implement that file in your repo to see the template propagate to Github PRs JIRA: https://jira.lsstcorp.org/browse/<ID> ## What this change does A few sentences describing the outcome of the change (\u201cfixes a thing\u201d; \"adds the stuff\") and how you tackled it (\u201cadded a prop to prevent lazyloading in the presence of barbara walters\u201d). How successful is the change? And how are you measuring that success? ## Notes for reviewers Where should the reviewer look for the change? Do they review the change on the frontend? How extensive is the change? Does it affect Components used in a variety of contexts? Anything you'd like reviewers to pay particular attention to or questions you have about the change. Include an indication of how detailed a review you want on a 1-10 scale. - 1 = \"I barely need review on this\" - 5 = \"Please make sure there are no obvious errors and that you believe it does what it says it does\" - 10 = \"I think it works, maybe, but we need to look at it together\" ## Testing How did you test this change? Can the reviewer test this change for themselves? If you wrote new tests in the change it's fine to just put \"New tests in PR\". If you haven't added any tests but you think your change is covered by existing tests you can say \"Existing tests\". And if you're not sure how to test it, say that. ## Screenshots (optional) ### Before: ### After:","title":"Commit Message Template"},{"location":"global-dependencies/pr-message-template/#whyd-we-do-this","text":"In an effort to standardize our team's expectations and use of PRs we created a template that indicates what sort of information is most useful for a reviewer. Broadly speaking, we're looking for a couple components in a PR message: What change did you make? How do you know the change is valid? How can a reviewer validate your change?","title":"Why'd we do this?"},{"location":"investigations/","text":"Formal Education Investigations Introduction The investigations explore Astronomy 101 topics through an interactive question-answer format using LSST data. The investigations are currently being built as static-sites that rely on locally loaded precursor data (NOT LSST data). This section describes the current investigation work flow and stack. Work Flow Developers collaborate with designers and members of the Education Team to design, build, and test the investigations. Educational materials (Teacher's guides, notebooks, and links to supplemental documentation) can be found in the GOAT Google Doc. Developers and designers work from these materials (and directly with other team members) to create the investigation web apps. Currently the apps are: Consuming precursor data as JSON Designed in Sketch Coded in ES6 Javascript, React , SCSS, and HTML Built using Webpack 4 Deployed as a static site to Github Pages (for production) and Netlify (for staging) The Stack Data The investigation app consumes JSON for precursor astronomical data: Example data format Example local http request using Axios ES6 Javascript Modern JS is transcompiled to vanilla javascript using babel. Important ES6 functionality includes: import NodeModuleName from 'NodeModuleName' Imports . The glue that points every piece of your web app and every other piece or external dependency. Also helps webpack to make good choices during its builds. class Classes . A more concise, legible, and fancier alternative to the vanilla prototypical inheritance . => The fat arrow . When writing a class fat arrows can help in managing what this is. [..1, 2, 3] The spread operator . Particularly helpful when [[managing React state|react-state-management]] Destructuring objects . Particularly useful in React when taking apart props for use in a Component function, or in the render method. @decoratorName Decorators . A pattern popular in some React libraries. beginnging-string${variableName}end-string String Interpolation","title":"Formal Education Investigations"},{"location":"investigations/#formal-education-investigations","text":"","title":"Formal Education Investigations"},{"location":"investigations/#introduction","text":"The investigations explore Astronomy 101 topics through an interactive question-answer format using LSST data. The investigations are currently being built as static-sites that rely on locally loaded precursor data (NOT LSST data). This section describes the current investigation work flow and stack.","title":"Introduction"},{"location":"investigations/#work-flow","text":"Developers collaborate with designers and members of the Education Team to design, build, and test the investigations. Educational materials (Teacher's guides, notebooks, and links to supplemental documentation) can be found in the GOAT Google Doc. Developers and designers work from these materials (and directly with other team members) to create the investigation web apps. Currently the apps are: Consuming precursor data as JSON Designed in Sketch Coded in ES6 Javascript, React , SCSS, and HTML Built using Webpack 4 Deployed as a static site to Github Pages (for production) and Netlify (for staging)","title":"Work Flow"},{"location":"investigations/#the-stack","text":"","title":"The Stack"},{"location":"investigations/#data","text":"The investigation app consumes JSON for precursor astronomical data: Example data format Example local http request using Axios","title":"Data"},{"location":"investigations/#es6-javascript","text":"Modern JS is transcompiled to vanilla javascript using babel. Important ES6 functionality includes: import NodeModuleName from 'NodeModuleName' Imports . The glue that points every piece of your web app and every other piece or external dependency. Also helps webpack to make good choices during its builds. class Classes . A more concise, legible, and fancier alternative to the vanilla prototypical inheritance . => The fat arrow . When writing a class fat arrows can help in managing what this is. [..1, 2, 3] The spread operator . Particularly helpful when [[managing React state|react-state-management]] Destructuring objects . Particularly useful in React when taking apart props for use in a Component function, or in the render method. @decoratorName Decorators . A pattern popular in some React libraries. beginnging-string${variableName}end-string String Interpolation","title":"ES6 Javascript"},{"location":"investigations/axios-request-example/","text":"Helper function creates reusable axios instance with baseUrl set based on node environmental variable: import axios from 'axios'; const getBaseUrl = function(env) { const envs = { development: '/', staging: '/', production: 'https://lsst-epo.github.io/a-window-to-the-stars/', }; return envs[env] || '/'; }; export default axios.create({ baseURL: getBaseUrl(process.env.NODE_ENV), }); In the componentDidMount() lifeycle method of a React Component: import API from 'PATH/TO/API'; ... API.get('static-data/EXAMPLE-DATA.json') .then(res => { console.log(res.data) this.setState(prevState => { ...prevState, data: res.data }); ...","title":"Axios request example"},{"location":"investigations/stellar-data-example/","text":"{ \"stars\": [{ \"is_member\": false, \"radius\": X.X, \"RA\": X.XXXXXXX, \"lifetime\": 0.0, \"source_id\": XXXXXXXXXXXXXX, \"luminosity\": X.XXXXXXX, \"Dec\": XX.XXXXXXXXXXXX, \"parent_cluster\": \"NGC_188\", \"mass\": X.X, \"temperature\": XXXX.XXXXXXXXXX }, ...] }","title":"Stellar data example"},{"location":"legacy-projects/ed-hub/","text":"LSST Education Hub The home of our Formal Education Investigations, all educational support materials, and a means for our end users to manage their experiences with the work they do inside the investigations. The ed-hub repo is primarily the CMS driving the content for both all the support material pages, as well as the Investigations themselves. The investigations themselves do not live in the ed-hub repo. The investigation experiences are encapsulated in a react app that uses Craft as a headless CMS: make queries and mutations on the JSON API provided by craft by way of GraphQL (and the CraftQL plugin). Getting Started These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See deployment for notes on how to deploy the project on a live system. Prerequisites Below, I'll throw out some basic commands to get stuff going, but please refer to the linked tutorials/articles if you haven't worked with or installed these technologies before (i.e. don't learn the hard way that it's never a good idea to blindly install stuff on your machine). Homebrew We're going to be using Homebrew to install and manage various packages necessary for this project. Luckily it's easy to install and easy to use. The Starting from Scratch section of our general docs more detailed/opinionated info about Homebrew, including some critical commands. Git Version control like woah. I mean if you're on this page you probably already have it, but, you know, just trying to be thorough. It can be installed in all the ways you'd expect , and, as ever, I'll reccommend installing it with homebrew. brew install git PHP 7.0+ Even if you're on a brand new shiny mac, it still only ships with PHP 5.6. I would strongly reccommend installing PHP using homebrew . brew install php If you need to manage multiple version of PHP on your machine, homebrew offers a way to switch global versions through \"linking\" and \"unlinking\" . If you need to mmore deeply manage php versions, say on a project directory by project directory basis, phpenv seems like a good option , but its set up is beyond the scope of this readme. Composer Composer is npm for php plugins. Install it with homebrew (also install php first). brew install composer PostgreSQL 10.10+ PostgreSQL is another dependency Homebrew makes too easy to install . The CLI tool for postgres is psql and it comes with a number of handy commands you can run without having to know SQL ( here's a few to get you started ). But you can also always connect to you db and run SQL commands/queries in all the usual ways. brew install postgresql If you want a GUI to CRUD your postgres, probably the most ubiquitous free option is pgAdmin , however it is neither \"the best\" nor \"the prettiest.\" Valet Valet is a (somewhat Laravel focused) dev tool that runs ningx (a php server) in the background, and proxies all requests to a specified TLD to your local. This is a total nice to have and you can absolutely manage any and all local development without it. That said, installation is dead simple and has a couple reasonable and simple ways to run the php server. composer global require laravel/valet Craft CMS 3.3 Craft is a blissfully unopinionated (optionally headless) CMS written in PHP. This is not a prerequisite in the sense that it's something you need to install globally, but it's worth calling out here as this is definitely a Craft Project . So if this is the first time you've worked with Craft, maybe familiarize yourself with their docs and such. Installing Ok. You installed and set up all of the above tools. You're ready to get down to businesstime. Get and go to the project directory git clone https://github.com/lsst-epo/ed-hub.git cd ed-hub Install some php stuff and things composer install Note : Craft has a rich plugin marketplace, all of which are, in essence, php modules installed with composer. Currently adding plugins to staging is a one way trip from local. That is to say, to maintain staging as a destination and not a source of truth any plugins should be installed locally, the composer.json and composer.lock should always be checked in, and then composer install will be automatically run on staging. You should not install plugins on staging and then try to pull down changes. Set up a local database These instructions assume you are working on the command line, but you can perform all of these commands in pgAdmin or the like if you prefer. Note : The following assumes you already set up a your_user_name with the right privalges to create/edit/own databases, and that your database server is running. Connect to your database server: psql -U your_user_name Depending on how you set up your user you will be prompted to enter a password, or use some other stored token. Create an empty PostgreSQL database: CREATE DATABASE your_database_name WITH OWNER = your_user_name ENCODING = 'UTF8'; Doublecheck that you see your new database listed: \\l If it's there, that's it for now. This repo contains a /config/project.yaml that essentially acts as a schema/scaffolding for the associated database. If it's not there?!? Oh man, I don't know man, you're on your own dude. Just kidding. It's always something. Shoot @blnkt a message and we'll figure it out together. Disconnect from your database server: \\q Note : There is not currently an automatic mechanism to sync a remote database to your local. If you feel like you might need some really real data to do your local development, contact @blnkt . Update your Environmental Variables The root of this project includes a .env.example which should cover all of the necessary environmental variables currently in use, so go ahead and start by copy/pasting this into a new file in the root of the project called .env . ENVIRONMENT=\"dev\" Leave this be unless your testing some environment specific behavior. Note : This is not currently set up as a multi-environment project. This means each environment gets its own special, manually updated, .env file. SECURITY_KEY=\"\" I'm not sure how much it matters that all developers use matching SECURITY_KEYS but if you're doing regular development on this project, you can get it from @blnkt . Otherwise you can generate it manually . Either way, you need to copy/paste it into your .env and then set it: cd ed-hub ./craft setup/security-key DB_DRIVER=\"pgsql\" Leave it be. DB_SERVER=\"localhost\" Leave this be unless you're developing with a remote database server, or have some interesting and awesome local setup. DB_USER=\"\" This is your_user_name that has access to the database you created above. DB_PASSWORD=\"\" This is the password your_user_name uses to access the database you created above. DB_DATABASE=\"\" This is the name of the database you created above. DB_SCHEMA=\"public\" Leave this be. DB_PORT=\"5432\" This is the port your database is at. DEFAULT_SITE_URL=\"http://domain\" Depending on whether you're proxying your localhost using Valet or something of that ilk, this could be whatever. ES_SITE_URL=\"http://domain/es/\" But this should be DEFAULT_SITE_URL but just with /es/ on the end. Point your php web server at the web directory If you're using Valet: cd ed-hub/web valet link DEFAULT_SITE_URL Where DEFAULT_SITE_URL is the value of your DEFAULT_SITE_URL environmental variable, BUT without the TLD (i.e. if DEFAULT_SITE_URL is http://blahblah.woofwoof your valet command is valet link blahblah ). \"Install Craft\" Alright. If everything is working as it should, when you visit http://DEFAULT_SITE_URL/admin/install (where DEFAULT_SITE_URL is the value of your DEFAULT_SITE_URL environmental variable), you should see a button inviting you to \"Install Craft.\" Click that button and walk through the \"Install\" process. It'll invite you to create an admin account, and ask you fill out some different setup fields. If any of those fields are empty, it's ok for you to fill them. If they are being prepopulated with values, DON'T fill them out. Those values are getting read out of the project.yaml and altering them in this \"Install\" flow will change them in that config file, and doing so might percipitate a nasty merge conflict down the road for someone (maybe you). Don't forget to take note of your Craft admin credentials. You will need this to access the Craft Control Panel. At the end of the \"Install\" flow you should land on the dashboard. Thanks to the project.yaml you should have the same entry types, same fields, same groups, sites, globals, plugins, etc, as your fellow developers. If stuff feels suspiciously empty, something went wrong. But if you see stuff and things, you're golden. Start building something rad. If you prefer, you may step through this very same install process on the command line instead: ./craft install If you do, please stay similarly vigilant as to not overwrite those values provided by the project.yml file (as noted above). Running the tests This project uses Codeception for testing. It currently only supports Functional and Unit testing. Currently this testing suite is configured to be non-destructive when it comes to its interactions with the database, however, a poorly written test could still do some damage to the database. Therefore, ideally you will run your tests on a different database than what you're developing on. For this (and other) reasons the craft instance powering the tests uses its own .env located in /tests/.env . It should look very similar to your primary .env except it'll include information about some other database. Break down into end to end tests Coming soon Deployment See @blnkt](https://github.com/blnkt) about setting up a remote to push to staging using git over ssh. Connect to staging over ssh ssh root@0.0.0.0 (hosted on DigitalOcean; see their docs ; you will need a private SSH key saved/whitelisted to connect to host) cd into project directory cd /var/www/edhub/ Create DB backup and save to storage/backups ./craft backup (see addiitonal Craft 3 CLI commands ) Update to desired commit Restore DB from externally provided DB backup (if applicable) rsync -avz /path/to/my/files root@0.0.0.0:/path/on/my/server Update packages make install Sync Craft Project config ./craft project-config/sync Build frontend assets make build-fe Check frontend and admin for any indications of failed deploy Built With Craft 3 CraftQL ...and therefore GraphQL Codeception Authors LSST EPO Team - Github Organization See also the list of contributors who participated in this project.","title":"LSST Education Hub"},{"location":"legacy-projects/ed-hub/#lsst-education-hub","text":"The home of our Formal Education Investigations, all educational support materials, and a means for our end users to manage their experiences with the work they do inside the investigations. The ed-hub repo is primarily the CMS driving the content for both all the support material pages, as well as the Investigations themselves. The investigations themselves do not live in the ed-hub repo. The investigation experiences are encapsulated in a react app that uses Craft as a headless CMS: make queries and mutations on the JSON API provided by craft by way of GraphQL (and the CraftQL plugin).","title":"LSST Education Hub"},{"location":"legacy-projects/ed-hub/#getting-started","text":"These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See deployment for notes on how to deploy the project on a live system.","title":"Getting Started"},{"location":"legacy-projects/ed-hub/#prerequisites","text":"Below, I'll throw out some basic commands to get stuff going, but please refer to the linked tutorials/articles if you haven't worked with or installed these technologies before (i.e. don't learn the hard way that it's never a good idea to blindly install stuff on your machine).","title":"Prerequisites"},{"location":"legacy-projects/ed-hub/#homebrew","text":"We're going to be using Homebrew to install and manage various packages necessary for this project. Luckily it's easy to install and easy to use. The Starting from Scratch section of our general docs more detailed/opinionated info about Homebrew, including some critical commands.","title":"Homebrew"},{"location":"legacy-projects/ed-hub/#git","text":"Version control like woah. I mean if you're on this page you probably already have it, but, you know, just trying to be thorough. It can be installed in all the ways you'd expect , and, as ever, I'll reccommend installing it with homebrew. brew install git","title":"Git"},{"location":"legacy-projects/ed-hub/#php-70","text":"Even if you're on a brand new shiny mac, it still only ships with PHP 5.6. I would strongly reccommend installing PHP using homebrew . brew install php If you need to manage multiple version of PHP on your machine, homebrew offers a way to switch global versions through \"linking\" and \"unlinking\" . If you need to mmore deeply manage php versions, say on a project directory by project directory basis, phpenv seems like a good option , but its set up is beyond the scope of this readme.","title":"PHP 7.0+"},{"location":"legacy-projects/ed-hub/#composer","text":"Composer is npm for php plugins. Install it with homebrew (also install php first). brew install composer","title":"Composer"},{"location":"legacy-projects/ed-hub/#postgresql-1010","text":"PostgreSQL is another dependency Homebrew makes too easy to install . The CLI tool for postgres is psql and it comes with a number of handy commands you can run without having to know SQL ( here's a few to get you started ). But you can also always connect to you db and run SQL commands/queries in all the usual ways. brew install postgresql If you want a GUI to CRUD your postgres, probably the most ubiquitous free option is pgAdmin , however it is neither \"the best\" nor \"the prettiest.\"","title":"PostgreSQL 10.10+"},{"location":"legacy-projects/ed-hub/#valet","text":"Valet is a (somewhat Laravel focused) dev tool that runs ningx (a php server) in the background, and proxies all requests to a specified TLD to your local. This is a total nice to have and you can absolutely manage any and all local development without it. That said, installation is dead simple and has a couple reasonable and simple ways to run the php server. composer global require laravel/valet","title":"Valet"},{"location":"legacy-projects/ed-hub/#craft-cms-33","text":"Craft is a blissfully unopinionated (optionally headless) CMS written in PHP. This is not a prerequisite in the sense that it's something you need to install globally, but it's worth calling out here as this is definitely a Craft Project . So if this is the first time you've worked with Craft, maybe familiarize yourself with their docs and such.","title":"Craft CMS 3.3"},{"location":"legacy-projects/ed-hub/#installing","text":"Ok. You installed and set up all of the above tools. You're ready to get down to businesstime.","title":"Installing"},{"location":"legacy-projects/ed-hub/#get-and-go-to-the-project-directory","text":"git clone https://github.com/lsst-epo/ed-hub.git cd ed-hub","title":"Get and go to the project directory"},{"location":"legacy-projects/ed-hub/#install-some-php-stuff-and-things","text":"composer install Note : Craft has a rich plugin marketplace, all of which are, in essence, php modules installed with composer. Currently adding plugins to staging is a one way trip from local. That is to say, to maintain staging as a destination and not a source of truth any plugins should be installed locally, the composer.json and composer.lock should always be checked in, and then composer install will be automatically run on staging. You should not install plugins on staging and then try to pull down changes.","title":"Install some php stuff and things"},{"location":"legacy-projects/ed-hub/#set-up-a-local-database","text":"These instructions assume you are working on the command line, but you can perform all of these commands in pgAdmin or the like if you prefer. Note : The following assumes you already set up a your_user_name with the right privalges to create/edit/own databases, and that your database server is running. Connect to your database server: psql -U your_user_name Depending on how you set up your user you will be prompted to enter a password, or use some other stored token. Create an empty PostgreSQL database: CREATE DATABASE your_database_name WITH OWNER = your_user_name ENCODING = 'UTF8'; Doublecheck that you see your new database listed: \\l If it's there, that's it for now. This repo contains a /config/project.yaml that essentially acts as a schema/scaffolding for the associated database. If it's not there?!? Oh man, I don't know man, you're on your own dude. Just kidding. It's always something. Shoot @blnkt a message and we'll figure it out together. Disconnect from your database server: \\q Note : There is not currently an automatic mechanism to sync a remote database to your local. If you feel like you might need some really real data to do your local development, contact @blnkt .","title":"Set up a local database"},{"location":"legacy-projects/ed-hub/#update-your-environmental-variables","text":"The root of this project includes a .env.example which should cover all of the necessary environmental variables currently in use, so go ahead and start by copy/pasting this into a new file in the root of the project called .env . ENVIRONMENT=\"dev\" Leave this be unless your testing some environment specific behavior. Note : This is not currently set up as a multi-environment project. This means each environment gets its own special, manually updated, .env file. SECURITY_KEY=\"\" I'm not sure how much it matters that all developers use matching SECURITY_KEYS but if you're doing regular development on this project, you can get it from @blnkt . Otherwise you can generate it manually . Either way, you need to copy/paste it into your .env and then set it: cd ed-hub ./craft setup/security-key DB_DRIVER=\"pgsql\" Leave it be. DB_SERVER=\"localhost\" Leave this be unless you're developing with a remote database server, or have some interesting and awesome local setup. DB_USER=\"\" This is your_user_name that has access to the database you created above. DB_PASSWORD=\"\" This is the password your_user_name uses to access the database you created above. DB_DATABASE=\"\" This is the name of the database you created above. DB_SCHEMA=\"public\" Leave this be. DB_PORT=\"5432\" This is the port your database is at. DEFAULT_SITE_URL=\"http://domain\" Depending on whether you're proxying your localhost using Valet or something of that ilk, this could be whatever. ES_SITE_URL=\"http://domain/es/\" But this should be DEFAULT_SITE_URL but just with /es/ on the end.","title":"Update your Environmental Variables"},{"location":"legacy-projects/ed-hub/#point-your-php-web-server-at-the-web-directory","text":"If you're using Valet: cd ed-hub/web valet link DEFAULT_SITE_URL Where DEFAULT_SITE_URL is the value of your DEFAULT_SITE_URL environmental variable, BUT without the TLD (i.e. if DEFAULT_SITE_URL is http://blahblah.woofwoof your valet command is valet link blahblah ).","title":"Point your php web server at the web directory"},{"location":"legacy-projects/ed-hub/#install-craft","text":"Alright. If everything is working as it should, when you visit http://DEFAULT_SITE_URL/admin/install (where DEFAULT_SITE_URL is the value of your DEFAULT_SITE_URL environmental variable), you should see a button inviting you to \"Install Craft.\" Click that button and walk through the \"Install\" process. It'll invite you to create an admin account, and ask you fill out some different setup fields. If any of those fields are empty, it's ok for you to fill them. If they are being prepopulated with values, DON'T fill them out. Those values are getting read out of the project.yaml and altering them in this \"Install\" flow will change them in that config file, and doing so might percipitate a nasty merge conflict down the road for someone (maybe you). Don't forget to take note of your Craft admin credentials. You will need this to access the Craft Control Panel. At the end of the \"Install\" flow you should land on the dashboard. Thanks to the project.yaml you should have the same entry types, same fields, same groups, sites, globals, plugins, etc, as your fellow developers. If stuff feels suspiciously empty, something went wrong. But if you see stuff and things, you're golden. Start building something rad. If you prefer, you may step through this very same install process on the command line instead: ./craft install If you do, please stay similarly vigilant as to not overwrite those values provided by the project.yml file (as noted above).","title":"\"Install Craft\""},{"location":"legacy-projects/ed-hub/#running-the-tests","text":"This project uses Codeception for testing. It currently only supports Functional and Unit testing. Currently this testing suite is configured to be non-destructive when it comes to its interactions with the database, however, a poorly written test could still do some damage to the database. Therefore, ideally you will run your tests on a different database than what you're developing on. For this (and other) reasons the craft instance powering the tests uses its own .env located in /tests/.env . It should look very similar to your primary .env except it'll include information about some other database.","title":"Running the tests"},{"location":"legacy-projects/ed-hub/#break-down-into-end-to-end-tests","text":"Coming soon","title":"Break down into end to end tests"},{"location":"legacy-projects/ed-hub/#deployment","text":"See @blnkt](https://github.com/blnkt) about setting up a remote to push to staging using git over ssh. Connect to staging over ssh ssh root@0.0.0.0 (hosted on DigitalOcean; see their docs ; you will need a private SSH key saved/whitelisted to connect to host) cd into project directory cd /var/www/edhub/ Create DB backup and save to storage/backups ./craft backup (see addiitonal Craft 3 CLI commands ) Update to desired commit Restore DB from externally provided DB backup (if applicable) rsync -avz /path/to/my/files root@0.0.0.0:/path/on/my/server Update packages make install Sync Craft Project config ./craft project-config/sync Build frontend assets make build-fe Check frontend and admin for any indications of failed deploy","title":"Deployment"},{"location":"legacy-projects/ed-hub/#built-with","text":"Craft 3 CraftQL ...and therefore GraphQL Codeception","title":"Built With"},{"location":"legacy-projects/ed-hub/#authors","text":"LSST EPO Team - Github Organization See also the list of contributors who participated in this project.","title":"Authors"},{"location":"legacy-projects/legacy-main-site/","text":"Legacy CIC Rubin Project Setup UPDATED: In 2020 the Main Site repo was broken up into separate API and Client repos, and each was dockerized, effectively replacing the STRTA set up described below. These instructions are here for prosperity, and in the case that someone needs to get the legacy repo up and running for some reason. STRTA Instructions These instructions assume you're running macOS Catalina (10.15). We have not installed Big Sur (11.0), and would expect there to be some troubleshooting and issues potentially. We have only tested on Intel macs and there will be significant blockers to installing some of the required dependencies on an Apple Silicon (m1 chip) mac. There are some workarounds floating around but all at your own risk. You likely have some of these tools mentioned in the instructions below already installed. There is no need to reinstall unless there is a version mismatch. We have given you (Blake) access to the Homebrew tap that provides custom commands for STRTA (Scripts to Rule Them All, see: https://github.blog/2015-06-30-scripts-to-rule-them-all/ ). We're going to review the code and see if there's any reason why we can't make that repo public. Back up your computer Install homebrew (https://brew.sh) Install XCode 11.x (app store). We're running 11.7. Install XCode command line tools. Version 11.5 works for us. XCode version \u2265 12 is not compatible with php versions \u2265 7.4.X and phpenv install 7.4.X will fail to compile Run xcode-select --install Make sure you have a github SSH keys in place, and test your SSH connection to github Create ~/.gitconfig, add: [url \"git@github.com:\"] insteadOf = https://github.com/ Run brew tap castiron/bootstrap Run brew install nodenv to install the node version manager Run brew install rbenv to install the ruby version manager It is not necessary to uninstall the system default ruby that ships on your mac, and, in fact, removing could have unintendend consequences even after installing new versions using rbenv Run brew install phpenv to install the php version manager Recommend uninstalling any existing versions of php before installing phpenv php versions < 7.4.X are not compatible with XCode versions \u2265 12 and phpenv install 7.4.X will fail to compile Run brew install zlib BZip2 readline libedit libiconv tidy-html5 On macOS 10.15.x, when installing new/additional versions of php using phpenv , you may need to configure that version of php with your brew installed php extensions, on install. For instance, to install 7.4.3 , configure options like CONFIGURE_OPTS=\"--with-zlib-dir=$(brew --prefix zlib) --with-bz2=$(brew --prefix bzip2) --with-curl=$(brew --prefix curl) --with-iconv=$(brew --prefix libiconv) --with-libedit=$(brew --prefix libedit) --with-readline=$(brew --prefix readline) --with-tidy=$(brew --prefix tidy-html5) --with-pdo-pgsql\" phpenv install 7.4.3 Run brew install postgresql Run brew install yarn to install a node package manager (that's not npm ) Add this to ~/.zprofile if you are using zSh (the default shell on mac starting in Catalina/10.15) or ~/.bash_profile if you are using bash eval \"$(nodenv init -)\" eval \"$(rbenv init -)\" eval \"$(phpenv init -)\" Verify that starting a terminal doesn't result in errors. Confirm postgres is running: brew services start postgresql If everything goes well, you should now be able to run script/setup for the cloned Rubin project. Finishing Up Unless you are managing you local dns in some other manner, you will need to update /etc/hosts by adding 127.0.0.1 api.rubin.lvh rubin.lvh You will need to fill in some additional environmental variables at the bottom of api/.env in order to access the Amazon S3 bucket (i.e. to CRUD content with any media in it). See script/setup for default CMS credentials. See README for important info regarding useful dev scripts, project architecture, browser support, etc. Deployment Local Development Run script/server to start the nginx magic Deployment Deployment Configuration This project relies on Capistrano for deployment. Managing individual deploy targets requires creating and manipulating files in the config/deploy/ directory. The name of each file in this directory corresponds with a target environment, and that environment is identified by the filename without the extension. In other words config/deploy/staging.rb is associated with an environment that will be referred to as \"staging.\" The deploy config for staging.rb is currently: set :stage, :staging set :branch, ENV['REVISION'] || ENV['BRANCH_NAME'] || 'master' set :craft_url, \"https://api-rubin.cicnode.com\" server 'rubin.cicnode.com', user: fetch(:user), roles: %w(app db web) Each line may potentially need to be modified when creating a new environment. The first line specifies the type of environment. If this were a production environment, this line would look like this: set :staging, :production The second line specifies what branch to deploy by default. This can be overridden during deploy by using either of the two ENV vars present on that line. An example of this will be provided below. By default, this config will deploy the master branch. There are two domains associated with this project. One is the Craft CMS domain, specified by :craft_url . The other domain, the next.js domain, is typically referenced on the 4th line as the server . However, the server line is really specifying the server to deploy the project to, not the domain that the site will be accessible at publicly. So it could be, for instance, an IP address. Note that the :craft_url setting is only used during the first deployment of the project in order to set up Craft. Deployment Commands The most typical command to deploy the project will look like this: bundle exec cap staging deploy This instructions capistrano to deploy the project to the staging target. There are some environment variables to be aware of. As mentioned above, the REVISION and BRANCH_NAME env vars can be used to specify an alternative branch to deploy. Here's an example: BRANCH_NAME=foo/bar bundle exec cap staging deploy That command will deploy branch foo/bar to the staging target. Another environment variable to be aware of is SKIP_NEXT . If set to 1, next.js will not be deployed. This is useful when initially setting up the project on a new host, for example, or for deploying changes to Craft which require content changes before next.js can build the pages. In general, consideration should be given to the deployment process to avoid this type of situation, however. Here's an example of what this command would look like: SKIP_NEXT=1 bundle exec cap staging deploy Other Capistrano Commands Content Sync To sync content and files from a deploy target to your local host, overwriting your own content, execute the following command: bundle exec cap staging content:sync There are a handful of other Capistrano task that compose the current and previous deployment systems. You can locate these commands in the config/deploy.rb and in the rake tasks defined in lib/capistrano/tasks/ folder. I would advise against using these on their own unless you fully understand what they do and how they will work out of sequence. There is, for instance, a command for building the site completely statically in next.js. The command is publish:static and it's left here for reference but will likely not work within the context of a node app. Changes to nginx configuration would be required to serve the site statically. Setting Up New Environments This will likely require further discussion. We have various tools we use, most central is Puppet, in order to quickly and reliably configure new web hosts for this and all projects. This isn't something we can hand off. If you're not planning on signing a retainer agreement with CIC, the thing to do might be to have us spin up a new environment, and snapshot it immediately in Digital Ocean so that it can be used for other environments. In theory, this would allow you to make only some small changes to nginx configuration (specifically the domains, and creating SSL certs) and have a working environment. This isn't an ideal approach in many ways, however.","title":"Legacy CIC Rubin Project Setup"},{"location":"legacy-projects/legacy-main-site/#legacy-cic-rubin-project-setup","text":"UPDATED: In 2020 the Main Site repo was broken up into separate API and Client repos, and each was dockerized, effectively replacing the STRTA set up described below. These instructions are here for prosperity, and in the case that someone needs to get the legacy repo up and running for some reason.","title":"Legacy CIC Rubin Project Setup"},{"location":"legacy-projects/legacy-main-site/#strta-instructions","text":"These instructions assume you're running macOS Catalina (10.15). We have not installed Big Sur (11.0), and would expect there to be some troubleshooting and issues potentially. We have only tested on Intel macs and there will be significant blockers to installing some of the required dependencies on an Apple Silicon (m1 chip) mac. There are some workarounds floating around but all at your own risk. You likely have some of these tools mentioned in the instructions below already installed. There is no need to reinstall unless there is a version mismatch. We have given you (Blake) access to the Homebrew tap that provides custom commands for STRTA (Scripts to Rule Them All, see: https://github.blog/2015-06-30-scripts-to-rule-them-all/ ). We're going to review the code and see if there's any reason why we can't make that repo public. Back up your computer Install homebrew (https://brew.sh) Install XCode 11.x (app store). We're running 11.7. Install XCode command line tools. Version 11.5 works for us. XCode version \u2265 12 is not compatible with php versions \u2265 7.4.X and phpenv install 7.4.X will fail to compile Run xcode-select --install Make sure you have a github SSH keys in place, and test your SSH connection to github Create ~/.gitconfig, add: [url \"git@github.com:\"] insteadOf = https://github.com/ Run brew tap castiron/bootstrap Run brew install nodenv to install the node version manager Run brew install rbenv to install the ruby version manager It is not necessary to uninstall the system default ruby that ships on your mac, and, in fact, removing could have unintendend consequences even after installing new versions using rbenv Run brew install phpenv to install the php version manager Recommend uninstalling any existing versions of php before installing phpenv php versions < 7.4.X are not compatible with XCode versions \u2265 12 and phpenv install 7.4.X will fail to compile Run brew install zlib BZip2 readline libedit libiconv tidy-html5 On macOS 10.15.x, when installing new/additional versions of php using phpenv , you may need to configure that version of php with your brew installed php extensions, on install. For instance, to install 7.4.3 , configure options like CONFIGURE_OPTS=\"--with-zlib-dir=$(brew --prefix zlib) --with-bz2=$(brew --prefix bzip2) --with-curl=$(brew --prefix curl) --with-iconv=$(brew --prefix libiconv) --with-libedit=$(brew --prefix libedit) --with-readline=$(brew --prefix readline) --with-tidy=$(brew --prefix tidy-html5) --with-pdo-pgsql\" phpenv install 7.4.3 Run brew install postgresql Run brew install yarn to install a node package manager (that's not npm ) Add this to ~/.zprofile if you are using zSh (the default shell on mac starting in Catalina/10.15) or ~/.bash_profile if you are using bash eval \"$(nodenv init -)\" eval \"$(rbenv init -)\" eval \"$(phpenv init -)\" Verify that starting a terminal doesn't result in errors. Confirm postgres is running: brew services start postgresql If everything goes well, you should now be able to run script/setup for the cloned Rubin project.","title":"STRTA Instructions"},{"location":"legacy-projects/legacy-main-site/#finishing-up","text":"Unless you are managing you local dns in some other manner, you will need to update /etc/hosts by adding 127.0.0.1 api.rubin.lvh rubin.lvh You will need to fill in some additional environmental variables at the bottom of api/.env in order to access the Amazon S3 bucket (i.e. to CRUD content with any media in it). See script/setup for default CMS credentials. See README for important info regarding useful dev scripts, project architecture, browser support, etc. Deployment","title":"Finishing Up"},{"location":"legacy-projects/legacy-main-site/#local-development","text":"Run script/server to start the nginx magic","title":"Local Development"},{"location":"legacy-projects/legacy-main-site/#deployment","text":"","title":"Deployment"},{"location":"legacy-projects/legacy-main-site/#deployment-configuration","text":"This project relies on Capistrano for deployment. Managing individual deploy targets requires creating and manipulating files in the config/deploy/ directory. The name of each file in this directory corresponds with a target environment, and that environment is identified by the filename without the extension. In other words config/deploy/staging.rb is associated with an environment that will be referred to as \"staging.\" The deploy config for staging.rb is currently: set :stage, :staging set :branch, ENV['REVISION'] || ENV['BRANCH_NAME'] || 'master' set :craft_url, \"https://api-rubin.cicnode.com\" server 'rubin.cicnode.com', user: fetch(:user), roles: %w(app db web) Each line may potentially need to be modified when creating a new environment. The first line specifies the type of environment. If this were a production environment, this line would look like this: set :staging, :production The second line specifies what branch to deploy by default. This can be overridden during deploy by using either of the two ENV vars present on that line. An example of this will be provided below. By default, this config will deploy the master branch. There are two domains associated with this project. One is the Craft CMS domain, specified by :craft_url . The other domain, the next.js domain, is typically referenced on the 4th line as the server . However, the server line is really specifying the server to deploy the project to, not the domain that the site will be accessible at publicly. So it could be, for instance, an IP address. Note that the :craft_url setting is only used during the first deployment of the project in order to set up Craft.","title":"Deployment Configuration"},{"location":"legacy-projects/legacy-main-site/#deployment-commands","text":"The most typical command to deploy the project will look like this: bundle exec cap staging deploy This instructions capistrano to deploy the project to the staging target. There are some environment variables to be aware of. As mentioned above, the REVISION and BRANCH_NAME env vars can be used to specify an alternative branch to deploy. Here's an example: BRANCH_NAME=foo/bar bundle exec cap staging deploy That command will deploy branch foo/bar to the staging target. Another environment variable to be aware of is SKIP_NEXT . If set to 1, next.js will not be deployed. This is useful when initially setting up the project on a new host, for example, or for deploying changes to Craft which require content changes before next.js can build the pages. In general, consideration should be given to the deployment process to avoid this type of situation, however. Here's an example of what this command would look like: SKIP_NEXT=1 bundle exec cap staging deploy","title":"Deployment Commands"},{"location":"legacy-projects/legacy-main-site/#other-capistrano-commands","text":"","title":"Other Capistrano Commands"},{"location":"legacy-projects/legacy-main-site/#content-sync","text":"To sync content and files from a deploy target to your local host, overwriting your own content, execute the following command: bundle exec cap staging content:sync There are a handful of other Capistrano task that compose the current and previous deployment systems. You can locate these commands in the config/deploy.rb and in the rake tasks defined in lib/capistrano/tasks/ folder. I would advise against using these on their own unless you fully understand what they do and how they will work out of sequence. There is, for instance, a command for building the site completely statically in next.js. The command is publish:static and it's left here for reference but will likely not work within the context of a node app. Changes to nginx configuration would be required to serve the site statically.","title":"Content Sync"},{"location":"legacy-projects/legacy-main-site/#setting-up-new-environments","text":"This will likely require further discussion. We have various tools we use, most central is Puppet, in order to quickly and reliably configure new web hosts for this and all projects. This isn't something we can hand off. If you're not planning on signing a retainer agreement with CIC, the thing to do might be to have us spin up a new environment, and snapshot it immediately in Digital Ocean so that it can be used for other environments. In theory, this would allow you to make only some small changes to nginx configuration (specifically the domains, and creating SSL certs) and have a working environment. This isn't an ideal approach in many ways, however.","title":"Setting Up New Environments"},{"location":"project-dependencies/","text":"Project Dependencies All of the following project level dependencies are Node packages (modules). There are three main categories: packages useful in your IDE, packages useful in development (not included in the build), packages useful in production (included in the build). In the IDE These packages will be installed globally. You can use npm or yarn . Most of these tools aim to keep a codebase uniform across contributors, as well as organized and legible. Mostly these tools enforce opinions about the format and structure of the code on the page. All of the tools in this section can be configured to produce errors or warnings , and in turn halt builds or commits, or just print infractions and suggestions in the terminal. They can be configured to fix problems automatically. You can also use them in conjunction with IDE plugins in order to view and fix rule infractions in-place. Rules and tools can be disabled inline, or for an entire file. editorconfig EditorConfig is a code styling tool. Code styling impacts the basic level of formatting different code (file types) in your IDE. For instance controlling indentation/spacing. It is not concerned with how you are using the languages corresponding to the designated file types. This configuration will only have an effect if you add the corresponding plugin to your IDE. The config is a .editorconfig file in the project root of the project. Example config prettier Prettier is an opinionated code formatter that works with many popular languages, including js, jsx, scss, and ruby. For the most part, on our projects, we only use it for js and jsx, and its use is knit into how we use ESLint : ESlint manages any/all linters that interact with javascript-like files, Prettier included, and Prettier is responsible for the \"structure\" of those files, while other linters/configs handle how the javascript in those files is implemented. For instance, we might use prettier to control when and where commas or line breaks are included, but we would use another linter to decide when a variable should be defined using let vs const . Prettier should be configured in the .eslintrc file but it can also be configured in its own .prettierrc file. eslint ESLint is a js and jsx linter that helps you to follow ES6/Javascript best practices, adopt popular patterns and adhere to style guidelines. Being such a flexible and loosely-typed language, Javascript is especially prone to developer errors that can not be spotted until you execute the code. Dutifully linting your code can help you avoid some of the more common syntactical errors, and also ensure your code conforms to standards other developers might be familiar with (and hopefully increase legibility). One such standard we rely on is Airbnb's styleguide . Example config stylelint StyleLint is for styles (CSS, SCSS, Sass, or Less) what ESLint is for Javascript. With it you can enforce rules about general formatting, what properties are allowed, and catch syntactical errors. For instance we use stylelint to enforce rules about the order properties should be in, how many levels of nesting are allowed, and what formats for colors are allowed (hex vs rgb vs color name). Example config In Development webpack Webpack is a dev tool used to build and bundle assets. In our work these assets primarily take the form of styles, Javascript, precursor data, and any typography, images, and icons served locally. How to create a webpack config is well out of the scope of this documentation. However, it is important to note that Webpack, in essence, is just a tool for telling other tools what to do. Therefore the configs and set up of the various plugins Webpack interacts with is crucial to a project successfully building assets in the manner you expect. In our work we typically adopt frontend React Frameworks that make use of Webpack under the hood, but present their own means of configuring stuff that's like one step removed from Webpack itself. browserslist Like Webpack, browserslist is a package meant to support the work other packages do. It provides the ability to configure what browsers and systems other packages (like postcss, autoprefixer, eslint, etc.) should target for any features, polyfills, or workarounds that might apply. We recommend including these definitions in the package.json file, however a .browserslistrc file in the root of your project can be used. In our work we generally use the following config to target browsers that are still actively maintained (have official support and have had a new version release in the last 2 years), and whose user base is more than 0.5% of all internet browser users. This is the the default setting for browserslist . \"browserslist\": [ \"defaults\", \"not IE 11\" ], babel Babel is a javascript compiler that does all the work of transpiling our fancy javascript (be it ES6, JSX, typescript, or something even more experimental) into normal, everyday js any ol' browser will run (aka those browsers targeted by browserslist ). Babel. sweet sweet Babel. Thank you for the gift of modern javascript. Babel pulls all this off using lots of special workarounds and polyfills. Some of these are included in the babel core, some of them are provided by babel in the form of additional packages, and some of them are from third-party providers. These packages are installed as node modules, and referred to in the babel config found in the package.json file. You may also configure Babel using a .babelrc file in the root of your project. \"babel\": { \"presets\": [ \"next/babel\" ], \"plugins\": [ [ \"styled-components\", { \"ssr\": true } ] ] }, postcss PostCSS a transpiler/linter for CSS and CSS like languages. With it you can use bleeding-edge CSS properties and standards, but mostly we use it to use Autoprefixer . Example config autoprefixer Autoprefixer is absolutely, 100%, indispensable. It injects all of those vendor prefixes you never remember, making cross-browser support just that much easier. Thank you Autoprefixer. In Production react React is a js framework to lend an MVC type approach to frontend development. Really this is a whole thing, and even a superficial deep-dive is well outside the scope of this documentation. next.js Next.js is a react framework which excels at building static sites, or sites who deliver a mixture of static and dynamic content/pages. It has a host of convenience methods and classes and optimizations and opinions on project structure, and it's been working pretty well for us. We started development in this vein using a similar react framework called Gatsby . For real reasons, and chance circumstances, we elected to shift from Gatsby to next.js. And the best we can say about it is, \"We haven't looked back since.\" You can find more info about our use of next.js on the frontend, and our stack in general, in the [[CMS Backend + React Frontend Stack section|The Stack]]. d3 D3 is a js library that is a popular solution for creating interactive data-driven visualizations. It is not enormously developer friendly, but it is incredibly robust and flexible to most any needs. As such going into more detail here is not gonna happen.","title":"Project Dependencies"},{"location":"project-dependencies/#project-dependencies","text":"All of the following project level dependencies are Node packages (modules). There are three main categories: packages useful in your IDE, packages useful in development (not included in the build), packages useful in production (included in the build).","title":"Project Dependencies"},{"location":"project-dependencies/#in-the-ide","text":"These packages will be installed globally. You can use npm or yarn . Most of these tools aim to keep a codebase uniform across contributors, as well as organized and legible. Mostly these tools enforce opinions about the format and structure of the code on the page. All of the tools in this section can be configured to produce errors or warnings , and in turn halt builds or commits, or just print infractions and suggestions in the terminal. They can be configured to fix problems automatically. You can also use them in conjunction with IDE plugins in order to view and fix rule infractions in-place. Rules and tools can be disabled inline, or for an entire file.","title":"In the IDE"},{"location":"project-dependencies/#editorconfig","text":"EditorConfig is a code styling tool. Code styling impacts the basic level of formatting different code (file types) in your IDE. For instance controlling indentation/spacing. It is not concerned with how you are using the languages corresponding to the designated file types. This configuration will only have an effect if you add the corresponding plugin to your IDE. The config is a .editorconfig file in the project root of the project. Example config","title":"editorconfig"},{"location":"project-dependencies/#prettier","text":"Prettier is an opinionated code formatter that works with many popular languages, including js, jsx, scss, and ruby. For the most part, on our projects, we only use it for js and jsx, and its use is knit into how we use ESLint : ESlint manages any/all linters that interact with javascript-like files, Prettier included, and Prettier is responsible for the \"structure\" of those files, while other linters/configs handle how the javascript in those files is implemented. For instance, we might use prettier to control when and where commas or line breaks are included, but we would use another linter to decide when a variable should be defined using let vs const . Prettier should be configured in the .eslintrc file but it can also be configured in its own .prettierrc file.","title":"prettier"},{"location":"project-dependencies/#eslint","text":"ESLint is a js and jsx linter that helps you to follow ES6/Javascript best practices, adopt popular patterns and adhere to style guidelines. Being such a flexible and loosely-typed language, Javascript is especially prone to developer errors that can not be spotted until you execute the code. Dutifully linting your code can help you avoid some of the more common syntactical errors, and also ensure your code conforms to standards other developers might be familiar with (and hopefully increase legibility). One such standard we rely on is Airbnb's styleguide . Example config","title":"eslint"},{"location":"project-dependencies/#stylelint","text":"StyleLint is for styles (CSS, SCSS, Sass, or Less) what ESLint is for Javascript. With it you can enforce rules about general formatting, what properties are allowed, and catch syntactical errors. For instance we use stylelint to enforce rules about the order properties should be in, how many levels of nesting are allowed, and what formats for colors are allowed (hex vs rgb vs color name). Example config","title":"stylelint"},{"location":"project-dependencies/#in-development","text":"","title":"In Development"},{"location":"project-dependencies/#webpack","text":"Webpack is a dev tool used to build and bundle assets. In our work these assets primarily take the form of styles, Javascript, precursor data, and any typography, images, and icons served locally. How to create a webpack config is well out of the scope of this documentation. However, it is important to note that Webpack, in essence, is just a tool for telling other tools what to do. Therefore the configs and set up of the various plugins Webpack interacts with is crucial to a project successfully building assets in the manner you expect. In our work we typically adopt frontend React Frameworks that make use of Webpack under the hood, but present their own means of configuring stuff that's like one step removed from Webpack itself.","title":"webpack"},{"location":"project-dependencies/#browserslist","text":"Like Webpack, browserslist is a package meant to support the work other packages do. It provides the ability to configure what browsers and systems other packages (like postcss, autoprefixer, eslint, etc.) should target for any features, polyfills, or workarounds that might apply. We recommend including these definitions in the package.json file, however a .browserslistrc file in the root of your project can be used. In our work we generally use the following config to target browsers that are still actively maintained (have official support and have had a new version release in the last 2 years), and whose user base is more than 0.5% of all internet browser users. This is the the default setting for browserslist . \"browserslist\": [ \"defaults\", \"not IE 11\" ],","title":"browserslist"},{"location":"project-dependencies/#babel","text":"Babel is a javascript compiler that does all the work of transpiling our fancy javascript (be it ES6, JSX, typescript, or something even more experimental) into normal, everyday js any ol' browser will run (aka those browsers targeted by browserslist ). Babel. sweet sweet Babel. Thank you for the gift of modern javascript. Babel pulls all this off using lots of special workarounds and polyfills. Some of these are included in the babel core, some of them are provided by babel in the form of additional packages, and some of them are from third-party providers. These packages are installed as node modules, and referred to in the babel config found in the package.json file. You may also configure Babel using a .babelrc file in the root of your project. \"babel\": { \"presets\": [ \"next/babel\" ], \"plugins\": [ [ \"styled-components\", { \"ssr\": true } ] ] },","title":"babel"},{"location":"project-dependencies/#postcss","text":"PostCSS a transpiler/linter for CSS and CSS like languages. With it you can use bleeding-edge CSS properties and standards, but mostly we use it to use Autoprefixer . Example config","title":"postcss"},{"location":"project-dependencies/#autoprefixer","text":"Autoprefixer is absolutely, 100%, indispensable. It injects all of those vendor prefixes you never remember, making cross-browser support just that much easier. Thank you Autoprefixer.","title":"autoprefixer"},{"location":"project-dependencies/#in-production","text":"","title":"In Production"},{"location":"project-dependencies/#react","text":"React is a js framework to lend an MVC type approach to frontend development. Really this is a whole thing, and even a superficial deep-dive is well outside the scope of this documentation.","title":"react"},{"location":"project-dependencies/#nextjs","text":"Next.js is a react framework which excels at building static sites, or sites who deliver a mixture of static and dynamic content/pages. It has a host of convenience methods and classes and optimizations and opinions on project structure, and it's been working pretty well for us. We started development in this vein using a similar react framework called Gatsby . For real reasons, and chance circumstances, we elected to shift from Gatsby to next.js. And the best we can say about it is, \"We haven't looked back since.\" You can find more info about our use of next.js on the frontend, and our stack in general, in the [[CMS Backend + React Frontend Stack section|The Stack]].","title":"next.js"},{"location":"project-dependencies/#d3","text":"D3 is a js library that is a popular solution for creating interactive data-driven visualizations. It is not enormously developer friendly, but it is incredibly robust and flexible to most any needs. As such going into more detail here is not gonna happen.","title":"d3"},{"location":"project-dependencies/editor-config-example/","text":"An EditorConfig file in combination with a IDE specific plugin helps maintain consistent coding styles for multiple developers working on the same project across various editors and IDEs. You define coding styles for any file format and mainly define things like indent size and style. Sounds like such a little thing but how annoying is it when you've coding js with 2 spaces , someone else contributes to your codebase, and the next time you open that file everything is 4 spaces , or worse indent 2 . This config lives in the root of your project and is named .editorconfig : root = true [*] end_of_line = lf charset = utf-8 trim_trailing_whitespace = true insert_final_newline = true [**.{rb,pp}] indent_style = space indent_size = 2 continuation_indent_size = 2 quote_type = double [**.{yml,yaml}] indent_style = space indent_size = 2 [**.{txt}] indent_style = space indent_size = 2 [**.{js}] indent_style = space indent_size = 2 [**.{jsx}] indent_style = space indent_size = 2 [**.{scss}] indent_style = space indent_size = 2","title":"Editor config example"},{"location":"project-dependencies/eslint-config-example/","text":"ESlint configs and ignore files live in the root of your project and are named .eslintrc and .eslintignore respectively. A config based on the popular Airbnb config and prettier's recommended formatting, that uses babel, might look like: require(\"@rushstack/eslint-patch/modern-module-resolution\"); module.exports = { root: true, env: { browser: true, }, rules: { // let next/link package handle anchor attributes \"jsx-a11y/anchor-is-valid\": 0, // next/link handles the href, so anchors without href are still interactive \"jsx-a11y/no-noninteractive-tabindex\": [\"error\", { tags: [\"a\"] }], // throwing false negatives on components using Atomics.Image \"jsx-a11y/alt-text\": 0, // storybook stories are exported this way \"import/no-anonymous-default-export\": 0, // would be good to use next/image but we aren't yet \"@next/next/no-img-element\": 0, }, extends: [\"@castiron\", \"next\"], }; A basic ignore file for a project with tests, built assets, and webpack, might look like: .next/* node_modules out/*","title":"Eslint config example"},{"location":"project-dependencies/postcss-config-example/","text":"PostCSS is a transpiler/linter for CSS and CSS like languages. With it you can use bleeding-edge CSS properties and standards, but mostly we use it to get Autoprefixer into the mix. Autoprefixer is absolutely, 100%, indispensable. It injects all of those vendor prefixes you never remember, making cross-browser support just that much easier. Thank you Autoprefixer. PostCSS Config lives in the root of your project and is named .postcss.config.js module.exports = { plugins: [ [ \"postcss-preset-env\", { autoprefixer: { flexbox: \"no-2009\", grid: false, }, stage: 2, }, ], [ \"postcss-normalize\", { forceImport: true, }, ], ], };","title":"Postcss config example"},{"location":"project-dependencies/stylelint-config-example/","text":"StyleLint helps you keep your styles in check: property orders, nesting, whitespace, etc. A StyleLint config lives in the root of your project and is named .stylelintrc.js . A config for a project using Scss: module.exports = { extends: [\"stylelint-config-standard-scss\", \"stylelint-config-recess-order\"], ignoreFiles: [\"theme/styles/base/_resets.scss\"], defaultSeverity: \"error\", rules: { \"function-calc-no-unspaced-operator\": true, \"shorthand-property-no-redundant-values\": true, \"declaration-block-no-redundant-longhand-properties\": true, // SCSS compiler shouldn't allow this // 'block-no-empty': true, \"comment-no-empty\": true, \"max-nesting-depth\": 3, // SCSS compiler shouldn't allow this // 'no-extra-semicolons': true, \"number-max-precision\": 3, \"property-no-vendor-prefix\": true, // OK, sometimes you need to use important, but // it should be explicitly called out/disabled if/when used. \"declaration-no-important\": true, \"declaration-block-single-line-max-declarations\": 1, \"selector-class-pattern\": \"[a-z][a-z0-9-]*\", \"selector-id-pattern\": \"[A-z_][A-z0-9-_]*\", \"custom-property-pattern\": \"[A-z][A-z0-9-]*\", // No id's allowed!! Unless accounted for \"selector-max-id\": 0, \"selector-no-vendor-prefix\": true, \"function-name-case\": \"lower\", \"number-leading-zero\": \"always\", \"number-no-trailing-zeros\": true, \"unit-case\": \"lower\", // sometimes we need a unit for Sass \"length-zero-no-unit\": null, // Doesn't play nicely with Sass `rgb()` function \"color-function-notation\": null, \"value-keyword-case\": [ \"lower\", { ignoreKeywords: [], }, ], \"value-list-comma-space-after\": \"always-single-line\", \"property-case\": \"lower\", \"declaration-bang-space-before\": \"always\", \"declaration-block-semicolon-newline-after\": \"always\", \"declaration-block-trailing-semicolon\": \"always\", \"block-closing-brace-newline-before\": \"always\", \"block-opening-brace-newline-after\": \"always\", \"selector-attribute-brackets-space-inside\": \"never\", \"selector-attribute-quotes\": \"always\", \"selector-combinator-space-after\": \"always\", \"selector-combinator-space-before\": \"always\", \"selector-pseudo-class-case\": \"lower\", \"selector-pseudo-class-parentheses-space-inside\": \"never\", \"selector-pseudo-element-case\": \"lower\", \"selector-pseudo-element-colon-notation\": \"double\", \"selector-type-case\": \"lower\", \"selector-list-comma-space-after\": \"always-single-line\", \"selector-list-comma-space-before\": \"never\", \"rule-empty-line-before\": [ \"always\", { except: [\"first-nested\"], ignore: [\"after-comment\"], }, ], \"media-feature-name-case\": \"lower\", indentation: 2, \"max-empty-lines\": 3, \"no-eol-whitespace\": true, // SCSS rules \"scss/at-else-closing-brace-newline-after\": \"always-last-in-chain\", \"scss/at-function-pattern\": \"([a-z]+[0-9]*)([a-z0-9-]+)?\", \"scss/at-if-closing-brace-newline-after\": \"always-last-in-chain\", \"scss/at-mixin-argumentless-call-parentheses\": \"never\", \"scss/at-mixin-pattern\": \"([a-z]+[0-9]*)([a-z0-9-]+)?\", \"scss/dollar-variable-pattern\": \"([a-z]+[0-9]*)([a-z0-9-]+)?\", \"scss/dollar-variable-colon-space-after\": \"always\", \"scss/dollar-variable-colon-space-before\": \"never\", \"scss/percent-placeholder-pattern\": \"[a-z][a-z0-9-]*\", // Arbitrary media values can be used, but explicitly \"scss/media-feature-value-dollar-variable\": \"always\", \"scss/selector-no-redundant-nesting-selector\": true, \"order/properties-order\": null, }, };","title":"Stylelint config example"},{"location":"stack/","text":"The Stack For content driven projects we use Craft 3 as a headless CMS on the backend and next.js on the frontend. Craft 3 Why Craft? Craft is a real Swiss Army Knife of CMSs. Written in PHP, on top of the popular Yii Framework, it is highly flexible, extremely developer and content creator friendly, has a rich marketplace of plugins , and a vibrant dev community . While it is not an open source project, they certainly adopt a similar ethos in their releases, their communication to users, and their dependency on a sprawling international dev community. And it's pretty darn cheap. The CMS dashboard is totally responsive, very mobile-friendly, and very intuitive for admins and content creators. It has a clean-slate approach to content modeling and front-end development that doesn\u2019t make any assumptions about your content or how it should be consumed. It has a robust framework for module and plugin development . It has a thoughtful approach to localization/multi-site management . Additionally, Craft has an option to run as a headless CMS. When this option is enabled queries to the CMS are handled over GraphQL. Using Craft as a headless CMS allows for a very generous separation of concerns between the backend and the frontend, and therefore much more flexibility in terms of what technologies or strategies we leverage on the backend vs the frontend. Modeling content in Craft The GUI in the Craft Admin Dashboard makes declaring and editing new Entry Types and Fields quick and easy. All changes are recorded in the project config files as migrations (of sorts). Project configs are applied when the project is instantiated making your work very portable across environments. Asserting such fine control over such complex things all in a GUI in the dashboard also means devs can get going in Craft quite quickly, not getting bogged down by code/syntactic idiosyncracies. Creating content in Craft Craft is a fairly unopinionated CMS which lends itself well to both traditional text-heavy web content like pages and posts, as well as defining very customized structured data. For the former, as much as possible, we take the composable \"Content Block\" approach, rather than a \"Page Template\" approach. The distinction being that where a \"Page Template\" approach requires a new kinda \"set in stone\" page template for every type of page on your site, the composable \"Content Block\" approach supplies the content creator with a set of building blocks they can select and arrange to \"compose\" pages. Still approach not only allows for more variance across pages, but also means a block of content can easily be abstracted out of a Page Entry, and into its own Entry, at which point that block of content can be reused across any pages. For instance, if you have a Callout Content Block, any Callout the content creator creates can just be a one-off for whatever page they're working on, but also every Callout that is created is saved as its own Entry, independent of whatever page it is on, and therefore identical instances of that Callout can then be reused across any page. For less-pagey content a Content Block approach usually isn't appropriate, but the wide array of off the shelf fields, and the ability to define highly complex custom fields, means you have a lot of tools at your disposal to create Entries, and create relationships between Entries, such that nearly any shape of data is achievable in the CMS. next.js React is a fairly freewheeling javascript framework. next.js provides enough structure/framework to keep your repo/project well organized and also dead simple configurations for your builds. It is a framework optimized for SSR and/or Static content, and/or Dynamic content. This versatility means it's never a stretch to use next.js in a project. Because it's never one way or the other, but as many ways as you'd like, different aspects of a project can be optimized for different use cases. graphQL graphQL is a query language that thrusts more than the usual amount of \"\"API data-fetching\" onus to the frontend. It's not the most flexible way to compose queries, and that's sorta the point. Each query is sorta a little schema validating what you want, against what you get, against what is available.","title":"The Stack"},{"location":"stack/#the-stack","text":"For content driven projects we use Craft 3 as a headless CMS on the backend and next.js on the frontend.","title":"The Stack"},{"location":"stack/#craft-3","text":"","title":"Craft 3"},{"location":"stack/#why-craft","text":"Craft is a real Swiss Army Knife of CMSs. Written in PHP, on top of the popular Yii Framework, it is highly flexible, extremely developer and content creator friendly, has a rich marketplace of plugins , and a vibrant dev community . While it is not an open source project, they certainly adopt a similar ethos in their releases, their communication to users, and their dependency on a sprawling international dev community. And it's pretty darn cheap. The CMS dashboard is totally responsive, very mobile-friendly, and very intuitive for admins and content creators. It has a clean-slate approach to content modeling and front-end development that doesn\u2019t make any assumptions about your content or how it should be consumed. It has a robust framework for module and plugin development . It has a thoughtful approach to localization/multi-site management . Additionally, Craft has an option to run as a headless CMS. When this option is enabled queries to the CMS are handled over GraphQL. Using Craft as a headless CMS allows for a very generous separation of concerns between the backend and the frontend, and therefore much more flexibility in terms of what technologies or strategies we leverage on the backend vs the frontend.","title":"Why Craft?"},{"location":"stack/#modeling-content-in-craft","text":"The GUI in the Craft Admin Dashboard makes declaring and editing new Entry Types and Fields quick and easy. All changes are recorded in the project config files as migrations (of sorts). Project configs are applied when the project is instantiated making your work very portable across environments. Asserting such fine control over such complex things all in a GUI in the dashboard also means devs can get going in Craft quite quickly, not getting bogged down by code/syntactic idiosyncracies.","title":"Modeling content in Craft"},{"location":"stack/#creating-content-in-craft","text":"Craft is a fairly unopinionated CMS which lends itself well to both traditional text-heavy web content like pages and posts, as well as defining very customized structured data. For the former, as much as possible, we take the composable \"Content Block\" approach, rather than a \"Page Template\" approach. The distinction being that where a \"Page Template\" approach requires a new kinda \"set in stone\" page template for every type of page on your site, the composable \"Content Block\" approach supplies the content creator with a set of building blocks they can select and arrange to \"compose\" pages. Still approach not only allows for more variance across pages, but also means a block of content can easily be abstracted out of a Page Entry, and into its own Entry, at which point that block of content can be reused across any pages. For instance, if you have a Callout Content Block, any Callout the content creator creates can just be a one-off for whatever page they're working on, but also every Callout that is created is saved as its own Entry, independent of whatever page it is on, and therefore identical instances of that Callout can then be reused across any page. For less-pagey content a Content Block approach usually isn't appropriate, but the wide array of off the shelf fields, and the ability to define highly complex custom fields, means you have a lot of tools at your disposal to create Entries, and create relationships between Entries, such that nearly any shape of data is achievable in the CMS.","title":"Creating content in Craft"},{"location":"stack/#nextjs","text":"React is a fairly freewheeling javascript framework. next.js provides enough structure/framework to keep your repo/project well organized and also dead simple configurations for your builds. It is a framework optimized for SSR and/or Static content, and/or Dynamic content. This versatility means it's never a stretch to use next.js in a project. Because it's never one way or the other, but as many ways as you'd like, different aspects of a project can be optimized for different use cases.","title":"next.js"},{"location":"stack/#graphql","text":"graphQL is a query language that thrusts more than the usual amount of \"\"API data-fetching\" onus to the frontend. It's not the most flexible way to compose queries, and that's sorta the point. Each query is sorta a little schema validating what you want, against what you get, against what is available.","title":"graphQL"},{"location":"useful-apps/","text":"Useful Apps Docker Several of our projects are run with Docker locally and in production. Docker configuration and scripting is fairly complicated, but installing the docker client and running containers is fairly straight-forward . Adobe Creative Cloud Our team's Designer delivers web designs exclusively in Adobe file formats, principally as InDesign or Illustrator files, and XD prototypes. PixelSnap PixelSnap is a super useful tool that does 1 thing very well: pixel-accurate measurements of your screen. We find this to be invaluable when translating design into code: the ability to compare measurements in XD to those in the browser allows you to quickly and easily verify layouts you defined in stylesheets match those a designer created by hand. Color Picker The native Apple Color Picker utility is absent in recent macOS versions. But there are many many many excellent free replacement options. System Color Picker is one of them. It includes an eye dropper tool which is the most critical feature as, similarly to PixelSnap, it enables you to verify color choices in design are accurately translated to code. For instance, one common gotcha is that designers often create many shades of a color by shifting its opacity. Replicating those colors in the same way in the browser (i.e. by shifting opacity) is not usually the preferred approach. Using an eye dropper tool in a Color Picker app allows you to grab the hex or rgba color code from the pixel on the screen itself, and therefore reproduce it 1:1 in code. Xcode If you installed Homebrew you likely already have access to the Xcode Command Line Tools. This is typically sufficient for most every kind of Xcode-y apple developy thing you need to do, with one important exception: emulating iPhones. To emulate an iPhone on your Apple you need to install the full Xcode 13 app . Xcode also enables you to use browser-based devTools with a tethered iPhone. While there is no substitute for testing on a real device, the Xcode emulated iPhone will tend to catch more mobile-specific issues than testing in the Chrome browser-based emulator alone. Genymotion Genymotion is an Android device emulator. This allows you to test on mobile on Android. It also supports \"tethering\" the emulated device to chrome, so you can use the Chrome DevTools with the emulated device. There are many similar apps out there that accomplish this, Ganymotion happens to be free and primarily has been chosen for that reason. 1Password 1Password is our team's preferred Password Manager. It is a repository for all of the credentials you use across the internet, or in local software. It natively, and via browser extensions, supports autofilling form fields. It is also a 2-factor Authorizer, which means you can use it whenever an online service requires an app-based (as oppose to SMS-based) 2-factor authentication. Chronos We use Jira as our main project management, ticketing, and time tracking tool. Chronos is a free app that allows you to manage, edit, and log time in Jira tickets via a desktop app. Additionally, it features realtime time tracking for wok logs so that you can track the time you are taking to do something, rather than estimate time spent in advance or after the fact. BlueJeans BlueJeans is the official audio/video conferencing tool for the Rubin Project. Whereas... Zoom Zoom is the official audio/video conferencing tool for NOIRLab. So you'll def need both.","title":"Useful Apps"},{"location":"useful-apps/#useful-apps","text":"","title":"Useful Apps"},{"location":"useful-apps/#docker","text":"Several of our projects are run with Docker locally and in production. Docker configuration and scripting is fairly complicated, but installing the docker client and running containers is fairly straight-forward .","title":"Docker"},{"location":"useful-apps/#adobe-creative-cloud","text":"Our team's Designer delivers web designs exclusively in Adobe file formats, principally as InDesign or Illustrator files, and XD prototypes.","title":"Adobe Creative Cloud"},{"location":"useful-apps/#pixelsnap","text":"PixelSnap is a super useful tool that does 1 thing very well: pixel-accurate measurements of your screen. We find this to be invaluable when translating design into code: the ability to compare measurements in XD to those in the browser allows you to quickly and easily verify layouts you defined in stylesheets match those a designer created by hand.","title":"PixelSnap"},{"location":"useful-apps/#color-picker","text":"The native Apple Color Picker utility is absent in recent macOS versions. But there are many many many excellent free replacement options. System Color Picker is one of them. It includes an eye dropper tool which is the most critical feature as, similarly to PixelSnap, it enables you to verify color choices in design are accurately translated to code. For instance, one common gotcha is that designers often create many shades of a color by shifting its opacity. Replicating those colors in the same way in the browser (i.e. by shifting opacity) is not usually the preferred approach. Using an eye dropper tool in a Color Picker app allows you to grab the hex or rgba color code from the pixel on the screen itself, and therefore reproduce it 1:1 in code.","title":"Color Picker"},{"location":"useful-apps/#xcode","text":"If you installed Homebrew you likely already have access to the Xcode Command Line Tools. This is typically sufficient for most every kind of Xcode-y apple developy thing you need to do, with one important exception: emulating iPhones. To emulate an iPhone on your Apple you need to install the full Xcode 13 app . Xcode also enables you to use browser-based devTools with a tethered iPhone. While there is no substitute for testing on a real device, the Xcode emulated iPhone will tend to catch more mobile-specific issues than testing in the Chrome browser-based emulator alone.","title":"Xcode"},{"location":"useful-apps/#genymotion","text":"Genymotion is an Android device emulator. This allows you to test on mobile on Android. It also supports \"tethering\" the emulated device to chrome, so you can use the Chrome DevTools with the emulated device. There are many similar apps out there that accomplish this, Ganymotion happens to be free and primarily has been chosen for that reason.","title":"Genymotion"},{"location":"useful-apps/#1password","text":"1Password is our team's preferred Password Manager. It is a repository for all of the credentials you use across the internet, or in local software. It natively, and via browser extensions, supports autofilling form fields. It is also a 2-factor Authorizer, which means you can use it whenever an online service requires an app-based (as oppose to SMS-based) 2-factor authentication.","title":"1Password"},{"location":"useful-apps/#chronos","text":"We use Jira as our main project management, ticketing, and time tracking tool. Chronos is a free app that allows you to manage, edit, and log time in Jira tickets via a desktop app. Additionally, it features realtime time tracking for wok logs so that you can track the time you are taking to do something, rather than estimate time spent in advance or after the fact.","title":"Chronos"},{"location":"useful-apps/#bluejeans","text":"BlueJeans is the official audio/video conferencing tool for the Rubin Project. Whereas...","title":"BlueJeans"},{"location":"useful-apps/#zoom","text":"Zoom is the official audio/video conferencing tool for NOIRLab. So you'll def need both.","title":"Zoom"},{"location":"es/","text":"Rubin EPO Desarrollo Web: C\u00f3mo hacerlo Needs Translation","title":"Rubin EPO Desarrollo Web: C\u00f3mo hacerlo"},{"location":"es/#rubin-epo-desarrollo-web-como-hacerlo","text":"Needs Translation","title":"Rubin EPO Desarrollo Web: C\u00f3mo hacerlo"},{"location":"es/markdown-cheat-sheet/","text":"Markdown Cheat Sheet Thanks for visiting The Markdown Guide ! This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can\u2019t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax . Basic Syntax These are the elements outlined in John Gruber\u2019s original design document. All Markdown applications support these elements. Heading H1 H2 H3 Bold bold text Italic italicized text Blockquote blockquote Ordered List First item Second item Third item Unordered List First item Second item Third item Code code Horizontal Rule Link Markdown Guide Image Extended Syntax These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements. Table Syntax Description Header Title Paragraph Text Fenced Code Block { \"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25 } Footnote Here's a sentence with a footnote. [^1] [^1]: This is the footnote. Heading ID My Great Heading {#custom-id} Definition List term : definition Strikethrough ~~The world is flat.~~ Task List [x] Write the press release [ ] Update the website [ ] Contact the media Emoji That is so funny! :joy: (See also Copying and Pasting Emoji ) Highlight I need to highlight these ==very important words==. Subscript H~2~O Superscript X^2^","title":"Markdown Cheat Sheet"},{"location":"es/markdown-cheat-sheet/#markdown-cheat-sheet","text":"Thanks for visiting The Markdown Guide ! This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can\u2019t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax .","title":"Markdown Cheat Sheet"},{"location":"es/markdown-cheat-sheet/#basic-syntax","text":"These are the elements outlined in John Gruber\u2019s original design document. All Markdown applications support these elements.","title":"Basic Syntax"},{"location":"es/markdown-cheat-sheet/#heading","text":"","title":"Heading"},{"location":"es/markdown-cheat-sheet/#h1","text":"","title":"H1"},{"location":"es/markdown-cheat-sheet/#h2","text":"","title":"H2"},{"location":"es/markdown-cheat-sheet/#h3","text":"","title":"H3"},{"location":"es/markdown-cheat-sheet/#bold","text":"bold text","title":"Bold"},{"location":"es/markdown-cheat-sheet/#italic","text":"italicized text","title":"Italic"},{"location":"es/markdown-cheat-sheet/#blockquote","text":"blockquote","title":"Blockquote"},{"location":"es/markdown-cheat-sheet/#ordered-list","text":"First item Second item Third item","title":"Ordered List"},{"location":"es/markdown-cheat-sheet/#unordered-list","text":"First item Second item Third item","title":"Unordered List"},{"location":"es/markdown-cheat-sheet/#code","text":"code","title":"Code"},{"location":"es/markdown-cheat-sheet/#horizontal-rule","text":"","title":"Horizontal Rule"},{"location":"es/markdown-cheat-sheet/#link","text":"Markdown Guide","title":"Link"},{"location":"es/markdown-cheat-sheet/#image","text":"","title":"Image"},{"location":"es/markdown-cheat-sheet/#extended-syntax","text":"These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements.","title":"Extended Syntax"},{"location":"es/markdown-cheat-sheet/#table","text":"Syntax Description Header Title Paragraph Text","title":"Table"},{"location":"es/markdown-cheat-sheet/#fenced-code-block","text":"{ \"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25 }","title":"Fenced Code Block"},{"location":"es/markdown-cheat-sheet/#footnote","text":"Here's a sentence with a footnote. [^1] [^1]: This is the footnote.","title":"Footnote"},{"location":"es/markdown-cheat-sheet/#heading-id","text":"","title":"Heading ID"},{"location":"es/markdown-cheat-sheet/#my-great-heading-custom-id","text":"","title":"My Great Heading {#custom-id}"},{"location":"es/markdown-cheat-sheet/#definition-list","text":"term : definition","title":"Definition List"},{"location":"es/markdown-cheat-sheet/#strikethrough","text":"~~The world is flat.~~","title":"Strikethrough"},{"location":"es/markdown-cheat-sheet/#task-list","text":"[x] Write the press release [ ] Update the website [ ] Contact the media","title":"Task List"},{"location":"es/markdown-cheat-sheet/#emoji","text":"That is so funny! :joy: (See also Copying and Pasting Emoji )","title":"Emoji"},{"location":"es/markdown-cheat-sheet/#highlight","text":"I need to highlight these ==very important words==.","title":"Highlight"},{"location":"es/markdown-cheat-sheet/#subscript","text":"H~2~O","title":"Subscript"},{"location":"es/markdown-cheat-sheet/#superscript","text":"X^2^","title":"Superscript"},{"location":"es/active-projects/main-site/","text":"Main Site Rubin Observatory Operations Site (the Main Site) This project has two associated repos, rubin-obs-api and rubin-obs-client , where the former is a headless Craft 3 CMS instance running in a Docker container, and the latter is a next.js app with a mix of static and dynamic pages. What follows is not a comprehensive description of those technologies (that's covered in [[CMS Backend + React Frontend Stack | The Stack]]) or information about how to get the project up and running on your local (that's covered in the readmes for the api and client and repos), but instead a summary of the repo structure, and any a note on Craft Localization quirks. Client architecture /lib \u2014 backend API fetching methods and GraphQL queries /pages \u2014 a single component that uses getStaticProps and getStaticPaths to dynamically generate static pages for all routes. /components \u2014 all React components for generating portions of static pages. These are further organized by type: \"content-blocks\", \"dynamic\", \"factories\", \"global\", \"layout\", \"primitives\", and \"templates\". /components/content-blocks \u2014 content blocks are the building /components/dynamic \u2014 components that make run-time API requests and are rendered client-side. /theme \u2014 SCSS partials defining the frontend theme. Component styles are defined in the same directory as their components but are imported at /theme/styles/components/_index.scss so that they are compiled in a single global stylesheet. /shapes \u2014 reusuable prop-type shapes for recurring data structures like pages, images, locales, etc. /public \u2014 static assets like favicons that are passed directly to the output directory without hashing. Module aliases are defined in /jsconfig.json . Localization There are some nuances to be aware of when dealing with localization data from Craft in Next.js: Entries must be fetched separately for each locale ( site param in the GraphQL API). If you want to generate pages for all routes, each set of entries must be concatenated into one array first. Similarly, an API request for a single entry must include the locale ( site param) even if the uri includes the subdirectory for the locale (e.g. /es/gallery ). There isn't a site property that exists on an entry but there is a language property. There is also a localized property which will return an array of instances of that entry in all other locales. The LanguageSelect component makes use of these properties to handle client-side routing between localized instances of a page. This approach avoids having to test for the presence of a localized subdirectory in the current route.","title":"Main Site"},{"location":"es/active-projects/main-site/#main-site","text":"","title":"Main Site"},{"location":"es/active-projects/main-site/#rubin-observatory-operations-site-the-main-site","text":"This project has two associated repos, rubin-obs-api and rubin-obs-client , where the former is a headless Craft 3 CMS instance running in a Docker container, and the latter is a next.js app with a mix of static and dynamic pages. What follows is not a comprehensive description of those technologies (that's covered in [[CMS Backend + React Frontend Stack | The Stack]]) or information about how to get the project up and running on your local (that's covered in the readmes for the api and client and repos), but instead a summary of the repo structure, and any a note on Craft Localization quirks.","title":"Rubin Observatory Operations Site (the Main Site)"},{"location":"es/active-projects/main-site/#client-architecture","text":"/lib \u2014 backend API fetching methods and GraphQL queries /pages \u2014 a single component that uses getStaticProps and getStaticPaths to dynamically generate static pages for all routes. /components \u2014 all React components for generating portions of static pages. These are further organized by type: \"content-blocks\", \"dynamic\", \"factories\", \"global\", \"layout\", \"primitives\", and \"templates\". /components/content-blocks \u2014 content blocks are the building /components/dynamic \u2014 components that make run-time API requests and are rendered client-side. /theme \u2014 SCSS partials defining the frontend theme. Component styles are defined in the same directory as their components but are imported at /theme/styles/components/_index.scss so that they are compiled in a single global stylesheet. /shapes \u2014 reusuable prop-type shapes for recurring data structures like pages, images, locales, etc. /public \u2014 static assets like favicons that are passed directly to the output directory without hashing. Module aliases are defined in /jsconfig.json .","title":"Client architecture"},{"location":"es/active-projects/main-site/#localization","text":"There are some nuances to be aware of when dealing with localization data from Craft in Next.js: Entries must be fetched separately for each locale ( site param in the GraphQL API). If you want to generate pages for all routes, each set of entries must be concatenated into one array first. Similarly, an API request for a single entry must include the locale ( site param) even if the uri includes the subdirectory for the locale (e.g. /es/gallery ). There isn't a site property that exists on an entry but there is a language property. There is also a localized property which will return an array of instances of that entry in all other locales. The LanguageSelect component makes use of these properties to handle client-side routing between localized instances of a page. This approach avoids having to test for the presence of a localized subdirectory in the current route.","title":"Localization"},{"location":"es/active-projects/investigations/","text":"Investigaciones de Educaci\u00f3n Formal Needs Translation","title":"Investigaciones de Educaci\u00f3n Formal"},{"location":"es/active-projects/investigations/#investigaciones-de-educacion-formal","text":"Needs Translation","title":"Investigaciones de Educaci\u00f3n Formal"},{"location":"es/active-projects/investigations/axios-request-example/","text":"Helper function creates reusable axios instance with baseUrl set based on node environmental variable: import axios from 'axios'; const getBaseUrl = function(env) { const envs = { development: '/', staging: '/', production: 'https://lsst-epo.github.io/a-window-to-the-stars/', }; return envs[env] || '/'; }; export default axios.create({ baseURL: getBaseUrl(process.env.NODE_ENV), }); In the componentDidMount() lifeycle method of a React Component: import API from 'PATH/TO/API'; ... API.get('static-data/EXAMPLE-DATA.json') .then(res => { console.log(res.data) this.setState(prevState => { ...prevState, data: res.data }); ...","title":"Axios request example"},{"location":"es/active-projects/investigations/stellar-data-example/","text":"{ \"stars\": [{ \"is_member\": false, \"radius\": X.X, \"RA\": X.XXXXXXX, \"lifetime\": 0.0, \"source_id\": XXXXXXXXXXXXXX, \"luminosity\": X.XXXXXXX, \"Dec\": XX.XXXXXXXXXXXX, \"parent_cluster\": \"NGC_188\", \"mass\": X.X, \"temperature\": XXXX.XXXXXXXXXX }, ...] }","title":"Stellar data example"},{"location":"es/active-projects/skyviewer/","text":"Skyviewer Needs Translation","title":"Skyviewer"},{"location":"es/active-projects/skyviewer/#skyviewer","text":"Needs Translation","title":"Skyviewer"},{"location":"es/cloud-services/","text":"Servicios en la Nube Needs Translation","title":"Servicios en la Nube"},{"location":"es/cloud-services/#servicios-en-la-nube","text":"Needs Translation","title":"Servicios en la Nube"},{"location":"es/github/","text":"Github Needs Translation","title":"Github"},{"location":"es/github/#github","text":"Needs Translation","title":"Github"},{"location":"es/global-dependencies/","text":"Dependencias Globales Needs Translation","title":"Dependencias Globales"},{"location":"es/global-dependencies/#dependencias-globales","text":"Needs Translation","title":"Dependencias Globales"},{"location":"es/global-dependencies/commit-message-template/","text":"You may copy and paste the following into a file, and then reference that file in your git config # [LABEL] SHORT SUMMARY WRITTEN IN IMPERATIVE #### ############################################ c50 \u2191 # Leave SECOND LINE BLANK. Use the IMPERATIVE VOICE ############# c72 \u2193 # For git: \"Resolves <ISSUE_NUMBER>\" # # For JIRA: \"<ISSUE_KEY> #<transition_name> #comment <comment_string>\" # Transitions: IN-PROGRESS | IN-REVIEW ##################################################################### \u2193 Why'd we do this? Log Line # [LABEL] SHORT SUMMARY WRITTEN IN IMPERATIVE ### ########################################### c50 \u2191 [LABEL] We use 3 different labels, and they tend to be enough to describe any type of commit: [C] A chore; any change that adds value but does not significantly affect performance or functionality. For example: Changing what a button does is not a chore. A chore is changing the text or color of a button. [F] A feature; any change that adds/improves/changes functionality. Changing the data a graph renders is not a feature. A feature is changing what the graph does with the data. [B] A bug; any change that fixes a performance or functionality issue. Refactoring a JS component for legibility is not a bug. A bug is altering or replacing a JS component so it does what it's suppose to. SHORT SUMMARY WRITTEN IN IMPERATIVE A reminder to be succinct and to use the imperative voice . This voice uses verbs that are commands in the present tense, and lends itself to writing short summaries. ############################################ c50 \u2191 A reminder to BE SUCCINCT. You can, and in many cases should, be verbose in the next section of your commit message but the log line should be < 50 characters whenever possible. This will ensure that it will read well in any context and will help others review many short logs at a glance and have a good understanding of what's going on. This line, as well as the one above it, are each 50 characters long so if your log line stretches past them, consider taking another stab at it. Summary # Leave SECOND LINE BLANK. Use the IMPERATIVE VOICE ############# c72 \u2193 Leave SECOND LINE BLANK. The log line should be followed by a blank line. This blank line tells git where the log line (what show up in short logs) ends, and where the bulk of your commit message (what show up in long logs) begins. Use the IMPERITIVE VOICE Another reminder to USE THAT THERE IMPERATIVE VOICE. ############# c72 \u2193 Add a carriage return after 72 characters so that your commit message fits in the terminal well. This line is 72 characters long. This is far less critical than the log line length as most of us wrap our terminal text. In fact, when Github displays the full commit messages, these carriage returns can look awkward as the text seems to be wrapping unnecessarily. A bit of a toss up. # For git: \"Resolves <ISSUE_NUMBER>\" Generally the EPO team tracks all issue in JIRA. However, occasionally, you may want to associate a commit with a Github issue . To do so, use the Resolves keyword followed by the issue number #111 . For instance, you might create Github issues that each address separate aspects of a larger JIRA ticket. You could then close out issues by associating them with commits, and close out a JIRA ticket by associating it with a pull request. This is a not a predetermined pattern that EPO is using currently, but if it works for you, it works. # For JIRA: \"<ISSUE_KEY> #<transition_name> #comment <comment_string>\" # Transitions: IN-PROGRESS | IN-REVIEW <ISSUE_KEY> To associate a commit with a JIRA ticket just include the ticket key (i.e EPO-1111) as the first thing on a new line. A link to your commit will now automatically show up alongside the ticket description in JIRA. #<transition_name> To set the state of the JIRA ticket using your commit message, first associate it with a ticket (see above), then, on the same line, use # + TRANSITION-NAME . Two states you might want to set are IN-PROGRESS or IN-REVIEW . You should not set the state to DONE as all JIRA tickets should be reviewed by someone other than the author before they are closed. This functionality is not particularly useful for our development because you typically want to indicate a ticket is in progress before you have work to commit, and there is not currently a way to assign (or auto assign) a review when transitioning to IN-REVIEW necessitating you interact with the JIRA web app regardless of what you told it to do from git. #comment <comment_string>\" To add a comment to the JIRA ticket, first associate it with a ticket (see above), then, on the same line, use #comment + YOUR COMMENT . This can be quite a time saver as you may often find yourself copying text from your commit message verbatim for your JIRA comment. Unfortunately there is not currently support for adding work log comments. ##################################################################### \u2193 This line is also 72 characters long. In our project management ecosystem a commit should be <= to a JIRA ticket. That is, it should be the only commit in a pull request that lines up to a JIRA ticket, or it should be one of several commits in a pull request that lines up to a JIRA ticket. A commit message should really never reference more than one JIRA ticket.","title":"Commit message template"},{"location":"es/global-dependencies/commit-message-template/#whyd-we-do-this","text":"","title":"Why'd we do this?"},{"location":"es/global-dependencies/commit-message-template/#log-line","text":"# [LABEL] SHORT SUMMARY WRITTEN IN IMPERATIVE ### ########################################### c50 \u2191 [LABEL] We use 3 different labels, and they tend to be enough to describe any type of commit: [C] A chore; any change that adds value but does not significantly affect performance or functionality. For example: Changing what a button does is not a chore. A chore is changing the text or color of a button. [F] A feature; any change that adds/improves/changes functionality. Changing the data a graph renders is not a feature. A feature is changing what the graph does with the data. [B] A bug; any change that fixes a performance or functionality issue. Refactoring a JS component for legibility is not a bug. A bug is altering or replacing a JS component so it does what it's suppose to. SHORT SUMMARY WRITTEN IN IMPERATIVE A reminder to be succinct and to use the imperative voice . This voice uses verbs that are commands in the present tense, and lends itself to writing short summaries. ############################################ c50 \u2191 A reminder to BE SUCCINCT. You can, and in many cases should, be verbose in the next section of your commit message but the log line should be < 50 characters whenever possible. This will ensure that it will read well in any context and will help others review many short logs at a glance and have a good understanding of what's going on. This line, as well as the one above it, are each 50 characters long so if your log line stretches past them, consider taking another stab at it.","title":"Log Line"},{"location":"es/global-dependencies/commit-message-template/#summary","text":"# Leave SECOND LINE BLANK. Use the IMPERATIVE VOICE ############# c72 \u2193 Leave SECOND LINE BLANK. The log line should be followed by a blank line. This blank line tells git where the log line (what show up in short logs) ends, and where the bulk of your commit message (what show up in long logs) begins. Use the IMPERITIVE VOICE Another reminder to USE THAT THERE IMPERATIVE VOICE. ############# c72 \u2193 Add a carriage return after 72 characters so that your commit message fits in the terminal well. This line is 72 characters long. This is far less critical than the log line length as most of us wrap our terminal text. In fact, when Github displays the full commit messages, these carriage returns can look awkward as the text seems to be wrapping unnecessarily. A bit of a toss up. # For git: \"Resolves <ISSUE_NUMBER>\" Generally the EPO team tracks all issue in JIRA. However, occasionally, you may want to associate a commit with a Github issue . To do so, use the Resolves keyword followed by the issue number #111 . For instance, you might create Github issues that each address separate aspects of a larger JIRA ticket. You could then close out issues by associating them with commits, and close out a JIRA ticket by associating it with a pull request. This is a not a predetermined pattern that EPO is using currently, but if it works for you, it works. # For JIRA: \"<ISSUE_KEY> #<transition_name> #comment <comment_string>\" # Transitions: IN-PROGRESS | IN-REVIEW <ISSUE_KEY> To associate a commit with a JIRA ticket just include the ticket key (i.e EPO-1111) as the first thing on a new line. A link to your commit will now automatically show up alongside the ticket description in JIRA. #<transition_name> To set the state of the JIRA ticket using your commit message, first associate it with a ticket (see above), then, on the same line, use # + TRANSITION-NAME . Two states you might want to set are IN-PROGRESS or IN-REVIEW . You should not set the state to DONE as all JIRA tickets should be reviewed by someone other than the author before they are closed. This functionality is not particularly useful for our development because you typically want to indicate a ticket is in progress before you have work to commit, and there is not currently a way to assign (or auto assign) a review when transitioning to IN-REVIEW necessitating you interact with the JIRA web app regardless of what you told it to do from git. #comment <comment_string>\" To add a comment to the JIRA ticket, first associate it with a ticket (see above), then, on the same line, use #comment + YOUR COMMENT . This can be quite a time saver as you may often find yourself copying text from your commit message verbatim for your JIRA comment. Unfortunately there is not currently support for adding work log comments. ##################################################################### \u2193 This line is also 72 characters long. In our project management ecosystem a commit should be <= to a JIRA ticket. That is, it should be the only commit in a pull request that lines up to a JIRA ticket, or it should be one of several commits in a pull request that lines up to a JIRA ticket. A commit message should really never reference more than one JIRA ticket.","title":"Summary"},{"location":"es/global-dependencies/pr-message-template/","text":"Commit Message Template You may copy and paste the following into a file, and then implement that file in your repo to see the template propagate to Github PRs JIRA: https://jira.lsstcorp.org/browse/<ID> ## What this change does A few sentences describing the outcome of the change (\u201cfixes a thing\u201d; \"adds the stuff\") and how you tackled it (\u201cadded a prop to prevent lazyloading in the presence of barbara walters\u201d). How successful is the change? And how are you measuring that success? ## Notes for reviewers Where should the reviewer look for the change? Do they review the change on the frontend? How extensive is the change? Does it affect Components used in a variety of contexts? Anything you'd like reviewers to pay particular attention to or questions you have about the change. Include an indication of how detailed a review you want on a 1-10 scale. - 1 = \"I barely need review on this\" - 5 = \"Please make sure there are no obvious errors and that you believe it does what it says it does\" - 10 = \"I think it works, maybe, but we need to look at it together\" ## Testing How did you test this change? Can the reviewer test this change for themselves? If you wrote new tests in the change it's fine to just put \"New tests in PR\". If you haven't added any tests but you think your change is covered by existing tests you can say \"Existing tests\". And if you're not sure how to test it, say that. ## Screenshots (optional) ### Before: ### After: Why'd we do this? In an effort to standardize our team's expectations and use of PRs we created a template that indicates what sort of information is most useful for a reviewer. Broadly speaking, we're looking for a couple components in a PR message: What change did you make? How do you know the change is valid? How can a reviewer validate your change?","title":"Pr message template"},{"location":"es/global-dependencies/pr-message-template/#commit-message-template","text":"You may copy and paste the following into a file, and then implement that file in your repo to see the template propagate to Github PRs JIRA: https://jira.lsstcorp.org/browse/<ID> ## What this change does A few sentences describing the outcome of the change (\u201cfixes a thing\u201d; \"adds the stuff\") and how you tackled it (\u201cadded a prop to prevent lazyloading in the presence of barbara walters\u201d). How successful is the change? And how are you measuring that success? ## Notes for reviewers Where should the reviewer look for the change? Do they review the change on the frontend? How extensive is the change? Does it affect Components used in a variety of contexts? Anything you'd like reviewers to pay particular attention to or questions you have about the change. Include an indication of how detailed a review you want on a 1-10 scale. - 1 = \"I barely need review on this\" - 5 = \"Please make sure there are no obvious errors and that you believe it does what it says it does\" - 10 = \"I think it works, maybe, but we need to look at it together\" ## Testing How did you test this change? Can the reviewer test this change for themselves? If you wrote new tests in the change it's fine to just put \"New tests in PR\". If you haven't added any tests but you think your change is covered by existing tests you can say \"Existing tests\". And if you're not sure how to test it, say that. ## Screenshots (optional) ### Before: ### After:","title":"Commit Message Template"},{"location":"es/global-dependencies/pr-message-template/#whyd-we-do-this","text":"In an effort to standardize our team's expectations and use of PRs we created a template that indicates what sort of information is most useful for a reviewer. Broadly speaking, we're looking for a couple components in a PR message: What change did you make? How do you know the change is valid? How can a reviewer validate your change?","title":"Why'd we do this?"},{"location":"es/investigations/","text":"Investigaciones de Educaci\u00f3n Formal Needs Translation","title":"Investigaciones de Educaci\u00f3n Formal"},{"location":"es/investigations/#investigaciones-de-educacion-formal","text":"Needs Translation","title":"Investigaciones de Educaci\u00f3n Formal"},{"location":"es/investigations/axios-request-example/","text":"Helper function creates reusable axios instance with baseUrl set based on node environmental variable: import axios from 'axios'; const getBaseUrl = function(env) { const envs = { development: '/', staging: '/', production: 'https://lsst-epo.github.io/a-window-to-the-stars/', }; return envs[env] || '/'; }; export default axios.create({ baseURL: getBaseUrl(process.env.NODE_ENV), }); In the componentDidMount() lifeycle method of a React Component: import API from 'PATH/TO/API'; ... API.get('static-data/EXAMPLE-DATA.json') .then(res => { console.log(res.data) this.setState(prevState => { ...prevState, data: res.data }); ...","title":"Axios request example"},{"location":"es/investigations/stellar-data-example/","text":"{ \"stars\": [{ \"is_member\": false, \"radius\": X.X, \"RA\": X.XXXXXXX, \"lifetime\": 0.0, \"source_id\": XXXXXXXXXXXXXX, \"luminosity\": X.XXXXXXX, \"Dec\": XX.XXXXXXXXXXXX, \"parent_cluster\": \"NGC_188\", \"mass\": X.X, \"temperature\": XXXX.XXXXXXXXXX }, ...] }","title":"Stellar data example"},{"location":"es/legacy-projects/ed-hub/","text":"LSST Education Hub The home of our Formal Education Investigations, all educational support materials, and a means for our end users to manage their experiences with the work they do inside the investigations. The ed-hub repo is primarily the CMS driving the content for both all the support material pages, as well as the Investigations themselves. The investigations themselves do not live in the ed-hub repo. The investigation experiences are encapsulated in a react app that uses Craft as a headless CMS: make queries and mutations on the JSON API provided by craft by way of GraphQL (and the CraftQL plugin). Getting Started These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See deployment for notes on how to deploy the project on a live system. Prerequisites Below, I'll throw out some basic commands to get stuff going, but please refer to the linked tutorials/articles if you haven't worked with or installed these technologies before (i.e. don't learn the hard way that it's never a good idea to blindly install stuff on your machine). Homebrew We're going to be using Homebrew to install and manage various packages necessary for this project. Luckily it's easy to install and easy to use. The Starting from Scratch section of our general docs more detailed/opinionated info about Homebrew, including some critical commands. Git Version control like woah. I mean if you're on this page you probably already have it, but, you know, just trying to be thorough. It can be installed in all the ways you'd expect , and, as ever, I'll reccommend installing it with homebrew. brew install git PHP 7.0+ Even if you're on a brand new shiny mac, it still only ships with PHP 5.6. I would strongly reccommend installing PHP using homebrew . brew install php If you need to manage multiple version of PHP on your machine, homebrew offers a way to switch global versions through \"linking\" and \"unlinking\" . If you need to mmore deeply manage php versions, say on a project directory by project directory basis, phpenv seems like a good option , but its set up is beyond the scope of this readme. Composer Composer is npm for php plugins. Install it with homebrew (also install php first). brew install composer PostgreSQL 10.10+ PostgreSQL is another dependency Homebrew makes too easy to install . The CLI tool for postgres is psql and it comes with a number of handy commands you can run without having to know SQL ( here's a few to get you started ). But you can also always connect to you db and run SQL commands/queries in all the usual ways. brew install postgresql If you want a GUI to CRUD your postgres, probably the most ubiquitous free option is pgAdmin , however it is neither \"the best\" nor \"the prettiest.\" Valet Valet is a (somewhat Laravel focused) dev tool that runs ningx (a php server) in the background, and proxies all requests to a specified TLD to your local. This is a total nice to have and you can absolutely manage any and all local development without it. That said, installation is dead simple and has a couple reasonable and simple ways to run the php server. composer global require laravel/valet Craft CMS 3.3 Craft is a blissfully unopinionated (optionally headless) CMS written in PHP. This is not a prerequisite in the sense that it's something you need to install globally, but it's worth calling out here as this is definitely a Craft Project . So if this is the first time you've worked with Craft, maybe familiarize yourself with their docs and such. Installing Ok. You installed and set up all of the above tools. You're ready to get down to businesstime. Get and go to the project directory git clone https://github.com/lsst-epo/ed-hub.git cd ed-hub Install some php stuff and things composer install Note : Craft has a rich plugin marketplace, all of which are, in essence, php modules installed with composer. Currently adding plugins to staging is a one way trip from local. That is to say, to maintain staging as a destination and not a source of truth any plugins should be installed locally, the composer.json and composer.lock should always be checked in, and then composer install will be automatically run on staging. You should not install plugins on staging and then try to pull down changes. Set up a local database These instructions assume you are working on the command line, but you can perform all of these commands in pgAdmin or the like if you prefer. Note : The following assumes you already set up a your_user_name with the right privalges to create/edit/own databases, and that your database server is running. Connect to your database server: psql -U your_user_name Depending on how you set up your user you will be prompted to enter a password, or use some other stored token. Create an empty PostgreSQL database: CREATE DATABASE your_database_name WITH OWNER = your_user_name ENCODING = 'UTF8'; Doublecheck that you see your new database listed: \\l If it's there, that's it for now. This repo contains a /config/project.yaml that essentially acts as a schema/scaffolding for the associated database. If it's not there?!? Oh man, I don't know man, you're on your own dude. Just kidding. It's always something. Shoot @blnkt a message and we'll figure it out together. Disconnect from your database server: \\q Note : There is not currently an automatic mechanism to sync a remote database to your local. If you feel like you might need some really real data to do your local development, contact @blnkt . Update your Environmental Variables The root of this project includes a .env.example which should cover all of the necessary environmental variables currently in use, so go ahead and start by copy/pasting this into a new file in the root of the project called .env . ENVIRONMENT=\"dev\" Leave this be unless your testing some environment specific behavior. Note : This is not currently set up as a multi-environment project. This means each environment gets its own special, manually updated, .env file. SECURITY_KEY=\"\" I'm not sure how much it matters that all developers use matching SECURITY_KEYS but if you're doing regular development on this project, you can get it from @blnkt . Otherwise you can generate it manually . Either way, you need to copy/paste it into your .env and then set it: cd ed-hub ./craft setup/security-key DB_DRIVER=\"pgsql\" Leave it be. DB_SERVER=\"localhost\" Leave this be unless you're developing with a remote database server, or have some interesting and awesome local setup. DB_USER=\"\" This is your_user_name that has access to the database you created above. DB_PASSWORD=\"\" This is the password your_user_name uses to access the database you created above. DB_DATABASE=\"\" This is the name of the database you created above. DB_SCHEMA=\"public\" Leave this be. DB_PORT=\"5432\" This is the port your database is at. DEFAULT_SITE_URL=\"http://domain\" Depending on whether you're proxying your localhost using Valet or something of that ilk, this could be whatever. ES_SITE_URL=\"http://domain/es/\" But this should be DEFAULT_SITE_URL but just with /es/ on the end. Point your php web server at the web directory If you're using Valet: cd ed-hub/web valet link DEFAULT_SITE_URL Where DEFAULT_SITE_URL is the value of your DEFAULT_SITE_URL environmental variable, BUT without the TLD (i.e. if DEFAULT_SITE_URL is http://blahblah.woofwoof your valet command is valet link blahblah ). \"Install Craft\" Alright. If everything is working as it should, when you visit http://DEFAULT_SITE_URL/admin/install (where DEFAULT_SITE_URL is the value of your DEFAULT_SITE_URL environmental variable), you should see a button inviting you to \"Install Craft.\" Click that button and walk through the \"Install\" process. It'll invite you to create an admin account, and ask you fill out some different setup fields. If any of those fields are empty, it's ok for you to fill them. If they are being prepopulated with values, DON'T fill them out. Those values are getting read out of the project.yaml and altering them in this \"Install\" flow will change them in that config file, and doing so might percipitate a nasty merge conflict down the road for someone (maybe you). Don't forget to take note of your Craft admin credentials. You will need this to access the Craft Control Panel. At the end of the \"Install\" flow you should land on the dashboard. Thanks to the project.yaml you should have the same entry types, same fields, same groups, sites, globals, plugins, etc, as your fellow developers. If stuff feels suspiciously empty, something went wrong. But if you see stuff and things, you're golden. Start building something rad. If you prefer, you may step through this very same install process on the command line instead: ./craft install If you do, please stay similarly vigilant as to not overwrite those values provided by the project.yml file (as noted above). Running the tests This project uses Codeception for testing. It currently only supports Functional and Unit testing. Currently this testing suite is configured to be non-destructive when it comes to its interactions with the database, however, a poorly written test could still do some damage to the database. Therefore, ideally you will run your tests on a different database than what you're developing on. For this (and other) reasons the craft instance powering the tests uses its own .env located in /tests/.env . It should look very similar to your primary .env except it'll include information about some other database. Break down into end to end tests Coming soon Deployment See @blnkt](https://github.com/blnkt) about setting up a remote to push to staging using git over ssh. Connect to staging over ssh ssh root@0.0.0.0 (hosted on DigitalOcean; see their docs ; you will need a private SSH key saved/whitelisted to connect to host) cd into project directory cd /var/www/edhub/ Create DB backup and save to storage/backups ./craft backup (see addiitonal Craft 3 CLI commands ) Update to desired commit Restore DB from externally provided DB backup (if applicable) rsync -avz /path/to/my/files root@0.0.0.0:/path/on/my/server Update packages make install Sync Craft Project config ./craft project-config/sync Build frontend assets make build-fe Check frontend and admin for any indications of failed deploy Built With Craft 3 CraftQL ...and therefore GraphQL Codeception Authors LSST EPO Team - Github Organization See also the list of contributors who participated in this project.","title":"LSST Education Hub"},{"location":"es/legacy-projects/ed-hub/#lsst-education-hub","text":"The home of our Formal Education Investigations, all educational support materials, and a means for our end users to manage their experiences with the work they do inside the investigations. The ed-hub repo is primarily the CMS driving the content for both all the support material pages, as well as the Investigations themselves. The investigations themselves do not live in the ed-hub repo. The investigation experiences are encapsulated in a react app that uses Craft as a headless CMS: make queries and mutations on the JSON API provided by craft by way of GraphQL (and the CraftQL plugin).","title":"LSST Education Hub"},{"location":"es/legacy-projects/ed-hub/#getting-started","text":"These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See deployment for notes on how to deploy the project on a live system.","title":"Getting Started"},{"location":"es/legacy-projects/ed-hub/#prerequisites","text":"Below, I'll throw out some basic commands to get stuff going, but please refer to the linked tutorials/articles if you haven't worked with or installed these technologies before (i.e. don't learn the hard way that it's never a good idea to blindly install stuff on your machine).","title":"Prerequisites"},{"location":"es/legacy-projects/ed-hub/#homebrew","text":"We're going to be using Homebrew to install and manage various packages necessary for this project. Luckily it's easy to install and easy to use. The Starting from Scratch section of our general docs more detailed/opinionated info about Homebrew, including some critical commands.","title":"Homebrew"},{"location":"es/legacy-projects/ed-hub/#git","text":"Version control like woah. I mean if you're on this page you probably already have it, but, you know, just trying to be thorough. It can be installed in all the ways you'd expect , and, as ever, I'll reccommend installing it with homebrew. brew install git","title":"Git"},{"location":"es/legacy-projects/ed-hub/#php-70","text":"Even if you're on a brand new shiny mac, it still only ships with PHP 5.6. I would strongly reccommend installing PHP using homebrew . brew install php If you need to manage multiple version of PHP on your machine, homebrew offers a way to switch global versions through \"linking\" and \"unlinking\" . If you need to mmore deeply manage php versions, say on a project directory by project directory basis, phpenv seems like a good option , but its set up is beyond the scope of this readme.","title":"PHP 7.0+"},{"location":"es/legacy-projects/ed-hub/#composer","text":"Composer is npm for php plugins. Install it with homebrew (also install php first). brew install composer","title":"Composer"},{"location":"es/legacy-projects/ed-hub/#postgresql-1010","text":"PostgreSQL is another dependency Homebrew makes too easy to install . The CLI tool for postgres is psql and it comes with a number of handy commands you can run without having to know SQL ( here's a few to get you started ). But you can also always connect to you db and run SQL commands/queries in all the usual ways. brew install postgresql If you want a GUI to CRUD your postgres, probably the most ubiquitous free option is pgAdmin , however it is neither \"the best\" nor \"the prettiest.\"","title":"PostgreSQL 10.10+"},{"location":"es/legacy-projects/ed-hub/#valet","text":"Valet is a (somewhat Laravel focused) dev tool that runs ningx (a php server) in the background, and proxies all requests to a specified TLD to your local. This is a total nice to have and you can absolutely manage any and all local development without it. That said, installation is dead simple and has a couple reasonable and simple ways to run the php server. composer global require laravel/valet","title":"Valet"},{"location":"es/legacy-projects/ed-hub/#craft-cms-33","text":"Craft is a blissfully unopinionated (optionally headless) CMS written in PHP. This is not a prerequisite in the sense that it's something you need to install globally, but it's worth calling out here as this is definitely a Craft Project . So if this is the first time you've worked with Craft, maybe familiarize yourself with their docs and such.","title":"Craft CMS 3.3"},{"location":"es/legacy-projects/ed-hub/#installing","text":"Ok. You installed and set up all of the above tools. You're ready to get down to businesstime.","title":"Installing"},{"location":"es/legacy-projects/ed-hub/#get-and-go-to-the-project-directory","text":"git clone https://github.com/lsst-epo/ed-hub.git cd ed-hub","title":"Get and go to the project directory"},{"location":"es/legacy-projects/ed-hub/#install-some-php-stuff-and-things","text":"composer install Note : Craft has a rich plugin marketplace, all of which are, in essence, php modules installed with composer. Currently adding plugins to staging is a one way trip from local. That is to say, to maintain staging as a destination and not a source of truth any plugins should be installed locally, the composer.json and composer.lock should always be checked in, and then composer install will be automatically run on staging. You should not install plugins on staging and then try to pull down changes.","title":"Install some php stuff and things"},{"location":"es/legacy-projects/ed-hub/#set-up-a-local-database","text":"These instructions assume you are working on the command line, but you can perform all of these commands in pgAdmin or the like if you prefer. Note : The following assumes you already set up a your_user_name with the right privalges to create/edit/own databases, and that your database server is running. Connect to your database server: psql -U your_user_name Depending on how you set up your user you will be prompted to enter a password, or use some other stored token. Create an empty PostgreSQL database: CREATE DATABASE your_database_name WITH OWNER = your_user_name ENCODING = 'UTF8'; Doublecheck that you see your new database listed: \\l If it's there, that's it for now. This repo contains a /config/project.yaml that essentially acts as a schema/scaffolding for the associated database. If it's not there?!? Oh man, I don't know man, you're on your own dude. Just kidding. It's always something. Shoot @blnkt a message and we'll figure it out together. Disconnect from your database server: \\q Note : There is not currently an automatic mechanism to sync a remote database to your local. If you feel like you might need some really real data to do your local development, contact @blnkt .","title":"Set up a local database"},{"location":"es/legacy-projects/ed-hub/#update-your-environmental-variables","text":"The root of this project includes a .env.example which should cover all of the necessary environmental variables currently in use, so go ahead and start by copy/pasting this into a new file in the root of the project called .env . ENVIRONMENT=\"dev\" Leave this be unless your testing some environment specific behavior. Note : This is not currently set up as a multi-environment project. This means each environment gets its own special, manually updated, .env file. SECURITY_KEY=\"\" I'm not sure how much it matters that all developers use matching SECURITY_KEYS but if you're doing regular development on this project, you can get it from @blnkt . Otherwise you can generate it manually . Either way, you need to copy/paste it into your .env and then set it: cd ed-hub ./craft setup/security-key DB_DRIVER=\"pgsql\" Leave it be. DB_SERVER=\"localhost\" Leave this be unless you're developing with a remote database server, or have some interesting and awesome local setup. DB_USER=\"\" This is your_user_name that has access to the database you created above. DB_PASSWORD=\"\" This is the password your_user_name uses to access the database you created above. DB_DATABASE=\"\" This is the name of the database you created above. DB_SCHEMA=\"public\" Leave this be. DB_PORT=\"5432\" This is the port your database is at. DEFAULT_SITE_URL=\"http://domain\" Depending on whether you're proxying your localhost using Valet or something of that ilk, this could be whatever. ES_SITE_URL=\"http://domain/es/\" But this should be DEFAULT_SITE_URL but just with /es/ on the end.","title":"Update your Environmental Variables"},{"location":"es/legacy-projects/ed-hub/#point-your-php-web-server-at-the-web-directory","text":"If you're using Valet: cd ed-hub/web valet link DEFAULT_SITE_URL Where DEFAULT_SITE_URL is the value of your DEFAULT_SITE_URL environmental variable, BUT without the TLD (i.e. if DEFAULT_SITE_URL is http://blahblah.woofwoof your valet command is valet link blahblah ).","title":"Point your php web server at the web directory"},{"location":"es/legacy-projects/ed-hub/#install-craft","text":"Alright. If everything is working as it should, when you visit http://DEFAULT_SITE_URL/admin/install (where DEFAULT_SITE_URL is the value of your DEFAULT_SITE_URL environmental variable), you should see a button inviting you to \"Install Craft.\" Click that button and walk through the \"Install\" process. It'll invite you to create an admin account, and ask you fill out some different setup fields. If any of those fields are empty, it's ok for you to fill them. If they are being prepopulated with values, DON'T fill them out. Those values are getting read out of the project.yaml and altering them in this \"Install\" flow will change them in that config file, and doing so might percipitate a nasty merge conflict down the road for someone (maybe you). Don't forget to take note of your Craft admin credentials. You will need this to access the Craft Control Panel. At the end of the \"Install\" flow you should land on the dashboard. Thanks to the project.yaml you should have the same entry types, same fields, same groups, sites, globals, plugins, etc, as your fellow developers. If stuff feels suspiciously empty, something went wrong. But if you see stuff and things, you're golden. Start building something rad. If you prefer, you may step through this very same install process on the command line instead: ./craft install If you do, please stay similarly vigilant as to not overwrite those values provided by the project.yml file (as noted above).","title":"\"Install Craft\""},{"location":"es/legacy-projects/ed-hub/#running-the-tests","text":"This project uses Codeception for testing. It currently only supports Functional and Unit testing. Currently this testing suite is configured to be non-destructive when it comes to its interactions with the database, however, a poorly written test could still do some damage to the database. Therefore, ideally you will run your tests on a different database than what you're developing on. For this (and other) reasons the craft instance powering the tests uses its own .env located in /tests/.env . It should look very similar to your primary .env except it'll include information about some other database.","title":"Running the tests"},{"location":"es/legacy-projects/ed-hub/#break-down-into-end-to-end-tests","text":"Coming soon","title":"Break down into end to end tests"},{"location":"es/legacy-projects/ed-hub/#deployment","text":"See @blnkt](https://github.com/blnkt) about setting up a remote to push to staging using git over ssh. Connect to staging over ssh ssh root@0.0.0.0 (hosted on DigitalOcean; see their docs ; you will need a private SSH key saved/whitelisted to connect to host) cd into project directory cd /var/www/edhub/ Create DB backup and save to storage/backups ./craft backup (see addiitonal Craft 3 CLI commands ) Update to desired commit Restore DB from externally provided DB backup (if applicable) rsync -avz /path/to/my/files root@0.0.0.0:/path/on/my/server Update packages make install Sync Craft Project config ./craft project-config/sync Build frontend assets make build-fe Check frontend and admin for any indications of failed deploy","title":"Deployment"},{"location":"es/legacy-projects/ed-hub/#built-with","text":"Craft 3 CraftQL ...and therefore GraphQL Codeception","title":"Built With"},{"location":"es/legacy-projects/ed-hub/#authors","text":"LSST EPO Team - Github Organization See also the list of contributors who participated in this project.","title":"Authors"},{"location":"es/legacy-projects/legacy-main-site/","text":"Legacy CIC Rubin Project Setup UPDATED: In 2020 the Main Site repo was broken up into separate API and Client repos, and each was dockerized, effectively replacing the STRTA set up described below. These instructions are here for prosperity, and in the case that someone needs to get the legacy repo up and running for some reason. STRTA Instructions These instructions assume you're running macOS Catalina (10.15). We have not installed Big Sur (11.0), and would expect there to be some troubleshooting and issues potentially. We have only tested on Intel macs and there will be significant blockers to installing some of the required dependencies on an Apple Silicon (m1 chip) mac. There are some workarounds floating around but all at your own risk. You likely have some of these tools mentioned in the instructions below already installed. There is no need to reinstall unless there is a version mismatch. We have given you (Blake) access to the Homebrew tap that provides custom commands for STRTA (Scripts to Rule Them All, see: https://github.blog/2015-06-30-scripts-to-rule-them-all/ ). We're going to review the code and see if there's any reason why we can't make that repo public. Back up your computer Install homebrew (https://brew.sh) Install XCode 11.x (app store). We're running 11.7. Install XCode command line tools. Version 11.5 works for us. XCode version \u2265 12 is not compatible with php versions \u2265 7.4.X and phpenv install 7.4.X will fail to compile Run xcode-select --install Make sure you have a github SSH keys in place, and test your SSH connection to github Create ~/.gitconfig, add: [url \"git@github.com:\"] insteadOf = https://github.com/ Run brew tap castiron/bootstrap Run brew install nodenv to install the node version manager Run brew install rbenv to install the ruby version manager It is not necessary to uninstall the system default ruby that ships on your mac, and, in fact, removing could have unintendend consequences even after installing new versions using rbenv Run brew install phpenv to install the php version manager Recommend uninstalling any existing versions of php before installing phpenv php versions < 7.4.X are not compatible with XCode versions \u2265 12 and phpenv install 7.4.X will fail to compile Run brew install zlib BZip2 readline libedit libiconv tidy-html5 On macOS 10.15.x, when installing new/additional versions of php using phpenv , you may need to configure that version of php with your brew installed php extensions, on install. For instance, to install 7.4.3 , configure options like CONFIGURE_OPTS=\"--with-zlib-dir=$(brew --prefix zlib) --with-bz2=$(brew --prefix bzip2) --with-curl=$(brew --prefix curl) --with-iconv=$(brew --prefix libiconv) --with-libedit=$(brew --prefix libedit) --with-readline=$(brew --prefix readline) --with-tidy=$(brew --prefix tidy-html5) --with-pdo-pgsql\" phpenv install 7.4.3 Run brew install postgresql Run brew install yarn to install a node package manager (that's not npm ) Add this to ~/.zprofile if you are using zSh (the default shell on mac starting in Catalina/10.15) or ~/.bash_profile if you are using bash eval \"$(nodenv init -)\" eval \"$(rbenv init -)\" eval \"$(phpenv init -)\" Verify that starting a terminal doesn't result in errors. Confirm postgres is running: brew services start postgresql If everything goes well, you should now be able to run script/setup for the cloned Rubin project. Finishing Up Unless you are managing you local dns in some other manner, you will need to update /etc/hosts by adding 127.0.0.1 api.rubin.lvh rubin.lvh You will need to fill in some additional environmental variables at the bottom of api/.env in order to access the Amazon S3 bucket (i.e. to CRUD content with any media in it). See script/setup for default CMS credentials. See README for important info regarding useful dev scripts, project architecture, browser support, etc. Deployment Local Development Run script/server to start the nginx magic Deployment Deployment Configuration This project relies on Capistrano for deployment. Managing individual deploy targets requires creating and manipulating files in the config/deploy/ directory. The name of each file in this directory corresponds with a target environment, and that environment is identified by the filename without the extension. In other words config/deploy/staging.rb is associated with an environment that will be referred to as \"staging.\" The deploy config for staging.rb is currently: set :stage, :staging set :branch, ENV['REVISION'] || ENV['BRANCH_NAME'] || 'master' set :craft_url, \"https://api-rubin.cicnode.com\" server 'rubin.cicnode.com', user: fetch(:user), roles: %w(app db web) Each line may potentially need to be modified when creating a new environment. The first line specifies the type of environment. If this were a production environment, this line would look like this: set :staging, :production The second line specifies what branch to deploy by default. This can be overridden during deploy by using either of the two ENV vars present on that line. An example of this will be provided below. By default, this config will deploy the master branch. There are two domains associated with this project. One is the Craft CMS domain, specified by :craft_url . The other domain, the next.js domain, is typically referenced on the 4th line as the server . However, the server line is really specifying the server to deploy the project to, not the domain that the site will be accessible at publicly. So it could be, for instance, an IP address. Note that the :craft_url setting is only used during the first deployment of the project in order to set up Craft. Deployment Commands The most typical command to deploy the project will look like this: bundle exec cap staging deploy This instructions capistrano to deploy the project to the staging target. There are some environment variables to be aware of. As mentioned above, the REVISION and BRANCH_NAME env vars can be used to specify an alternative branch to deploy. Here's an example: BRANCH_NAME=foo/bar bundle exec cap staging deploy That command will deploy branch foo/bar to the staging target. Another environment variable to be aware of is SKIP_NEXT . If set to 1, next.js will not be deployed. This is useful when initially setting up the project on a new host, for example, or for deploying changes to Craft which require content changes before next.js can build the pages. In general, consideration should be given to the deployment process to avoid this type of situation, however. Here's an example of what this command would look like: SKIP_NEXT=1 bundle exec cap staging deploy Other Capistrano Commands Content Sync To sync content and files from a deploy target to your local host, overwriting your own content, execute the following command: bundle exec cap staging content:sync There are a handful of other Capistrano task that compose the current and previous deployment systems. You can locate these commands in the config/deploy.rb and in the rake tasks defined in lib/capistrano/tasks/ folder. I would advise against using these on their own unless you fully understand what they do and how they will work out of sequence. There is, for instance, a command for building the site completely statically in next.js. The command is publish:static and it's left here for reference but will likely not work within the context of a node app. Changes to nginx configuration would be required to serve the site statically. Setting Up New Environments This will likely require further discussion. We have various tools we use, most central is Puppet, in order to quickly and reliably configure new web hosts for this and all projects. This isn't something we can hand off. If you're not planning on signing a retainer agreement with CIC, the thing to do might be to have us spin up a new environment, and snapshot it immediately in Digital Ocean so that it can be used for other environments. In theory, this would allow you to make only some small changes to nginx configuration (specifically the domains, and creating SSL certs) and have a working environment. This isn't an ideal approach in many ways, however.","title":"Legacy CIC Rubin Project Setup"},{"location":"es/legacy-projects/legacy-main-site/#legacy-cic-rubin-project-setup","text":"UPDATED: In 2020 the Main Site repo was broken up into separate API and Client repos, and each was dockerized, effectively replacing the STRTA set up described below. These instructions are here for prosperity, and in the case that someone needs to get the legacy repo up and running for some reason.","title":"Legacy CIC Rubin Project Setup"},{"location":"es/legacy-projects/legacy-main-site/#strta-instructions","text":"These instructions assume you're running macOS Catalina (10.15). We have not installed Big Sur (11.0), and would expect there to be some troubleshooting and issues potentially. We have only tested on Intel macs and there will be significant blockers to installing some of the required dependencies on an Apple Silicon (m1 chip) mac. There are some workarounds floating around but all at your own risk. You likely have some of these tools mentioned in the instructions below already installed. There is no need to reinstall unless there is a version mismatch. We have given you (Blake) access to the Homebrew tap that provides custom commands for STRTA (Scripts to Rule Them All, see: https://github.blog/2015-06-30-scripts-to-rule-them-all/ ). We're going to review the code and see if there's any reason why we can't make that repo public. Back up your computer Install homebrew (https://brew.sh) Install XCode 11.x (app store). We're running 11.7. Install XCode command line tools. Version 11.5 works for us. XCode version \u2265 12 is not compatible with php versions \u2265 7.4.X and phpenv install 7.4.X will fail to compile Run xcode-select --install Make sure you have a github SSH keys in place, and test your SSH connection to github Create ~/.gitconfig, add: [url \"git@github.com:\"] insteadOf = https://github.com/ Run brew tap castiron/bootstrap Run brew install nodenv to install the node version manager Run brew install rbenv to install the ruby version manager It is not necessary to uninstall the system default ruby that ships on your mac, and, in fact, removing could have unintendend consequences even after installing new versions using rbenv Run brew install phpenv to install the php version manager Recommend uninstalling any existing versions of php before installing phpenv php versions < 7.4.X are not compatible with XCode versions \u2265 12 and phpenv install 7.4.X will fail to compile Run brew install zlib BZip2 readline libedit libiconv tidy-html5 On macOS 10.15.x, when installing new/additional versions of php using phpenv , you may need to configure that version of php with your brew installed php extensions, on install. For instance, to install 7.4.3 , configure options like CONFIGURE_OPTS=\"--with-zlib-dir=$(brew --prefix zlib) --with-bz2=$(brew --prefix bzip2) --with-curl=$(brew --prefix curl) --with-iconv=$(brew --prefix libiconv) --with-libedit=$(brew --prefix libedit) --with-readline=$(brew --prefix readline) --with-tidy=$(brew --prefix tidy-html5) --with-pdo-pgsql\" phpenv install 7.4.3 Run brew install postgresql Run brew install yarn to install a node package manager (that's not npm ) Add this to ~/.zprofile if you are using zSh (the default shell on mac starting in Catalina/10.15) or ~/.bash_profile if you are using bash eval \"$(nodenv init -)\" eval \"$(rbenv init -)\" eval \"$(phpenv init -)\" Verify that starting a terminal doesn't result in errors. Confirm postgres is running: brew services start postgresql If everything goes well, you should now be able to run script/setup for the cloned Rubin project.","title":"STRTA Instructions"},{"location":"es/legacy-projects/legacy-main-site/#finishing-up","text":"Unless you are managing you local dns in some other manner, you will need to update /etc/hosts by adding 127.0.0.1 api.rubin.lvh rubin.lvh You will need to fill in some additional environmental variables at the bottom of api/.env in order to access the Amazon S3 bucket (i.e. to CRUD content with any media in it). See script/setup for default CMS credentials. See README for important info regarding useful dev scripts, project architecture, browser support, etc. Deployment","title":"Finishing Up"},{"location":"es/legacy-projects/legacy-main-site/#local-development","text":"Run script/server to start the nginx magic","title":"Local Development"},{"location":"es/legacy-projects/legacy-main-site/#deployment","text":"","title":"Deployment"},{"location":"es/legacy-projects/legacy-main-site/#deployment-configuration","text":"This project relies on Capistrano for deployment. Managing individual deploy targets requires creating and manipulating files in the config/deploy/ directory. The name of each file in this directory corresponds with a target environment, and that environment is identified by the filename without the extension. In other words config/deploy/staging.rb is associated with an environment that will be referred to as \"staging.\" The deploy config for staging.rb is currently: set :stage, :staging set :branch, ENV['REVISION'] || ENV['BRANCH_NAME'] || 'master' set :craft_url, \"https://api-rubin.cicnode.com\" server 'rubin.cicnode.com', user: fetch(:user), roles: %w(app db web) Each line may potentially need to be modified when creating a new environment. The first line specifies the type of environment. If this were a production environment, this line would look like this: set :staging, :production The second line specifies what branch to deploy by default. This can be overridden during deploy by using either of the two ENV vars present on that line. An example of this will be provided below. By default, this config will deploy the master branch. There are two domains associated with this project. One is the Craft CMS domain, specified by :craft_url . The other domain, the next.js domain, is typically referenced on the 4th line as the server . However, the server line is really specifying the server to deploy the project to, not the domain that the site will be accessible at publicly. So it could be, for instance, an IP address. Note that the :craft_url setting is only used during the first deployment of the project in order to set up Craft.","title":"Deployment Configuration"},{"location":"es/legacy-projects/legacy-main-site/#deployment-commands","text":"The most typical command to deploy the project will look like this: bundle exec cap staging deploy This instructions capistrano to deploy the project to the staging target. There are some environment variables to be aware of. As mentioned above, the REVISION and BRANCH_NAME env vars can be used to specify an alternative branch to deploy. Here's an example: BRANCH_NAME=foo/bar bundle exec cap staging deploy That command will deploy branch foo/bar to the staging target. Another environment variable to be aware of is SKIP_NEXT . If set to 1, next.js will not be deployed. This is useful when initially setting up the project on a new host, for example, or for deploying changes to Craft which require content changes before next.js can build the pages. In general, consideration should be given to the deployment process to avoid this type of situation, however. Here's an example of what this command would look like: SKIP_NEXT=1 bundle exec cap staging deploy","title":"Deployment Commands"},{"location":"es/legacy-projects/legacy-main-site/#other-capistrano-commands","text":"","title":"Other Capistrano Commands"},{"location":"es/legacy-projects/legacy-main-site/#content-sync","text":"To sync content and files from a deploy target to your local host, overwriting your own content, execute the following command: bundle exec cap staging content:sync There are a handful of other Capistrano task that compose the current and previous deployment systems. You can locate these commands in the config/deploy.rb and in the rake tasks defined in lib/capistrano/tasks/ folder. I would advise against using these on their own unless you fully understand what they do and how they will work out of sequence. There is, for instance, a command for building the site completely statically in next.js. The command is publish:static and it's left here for reference but will likely not work within the context of a node app. Changes to nginx configuration would be required to serve the site statically.","title":"Content Sync"},{"location":"es/legacy-projects/legacy-main-site/#setting-up-new-environments","text":"This will likely require further discussion. We have various tools we use, most central is Puppet, in order to quickly and reliably configure new web hosts for this and all projects. This isn't something we can hand off. If you're not planning on signing a retainer agreement with CIC, the thing to do might be to have us spin up a new environment, and snapshot it immediately in Digital Ocean so that it can be used for other environments. In theory, this would allow you to make only some small changes to nginx configuration (specifically the domains, and creating SSL certs) and have a working environment. This isn't an ideal approach in many ways, however.","title":"Setting Up New Environments"},{"location":"es/project-dependencies/","text":"Dependencias del Proyecto Needs Translation","title":"Dependencias del Proyecto"},{"location":"es/project-dependencies/#dependencias-del-proyecto","text":"Needs Translation","title":"Dependencias del Proyecto"},{"location":"es/project-dependencies/editor-config-example/","text":"An EditorConfig file in combination with a IDE specific plugin helps maintain consistent coding styles for multiple developers working on the same project across various editors and IDEs. You define coding styles for any file format and mainly define things like indent size and style. Sounds like such a little thing but how annoying is it when you've coding js with 2 spaces , someone else contributes to your codebase, and the next time you open that file everything is 4 spaces , or worse indent 2 . This config lives in the root of your project and is named .editorconfig : root = true [*] end_of_line = lf charset = utf-8 trim_trailing_whitespace = true insert_final_newline = true [**.{rb,pp}] indent_style = space indent_size = 2 continuation_indent_size = 2 quote_type = double [**.{yml,yaml}] indent_style = space indent_size = 2 [**.{txt}] indent_style = space indent_size = 2 [**.{js}] indent_style = space indent_size = 2 [**.{jsx}] indent_style = space indent_size = 2 [**.{scss}] indent_style = space indent_size = 2","title":"Editor config example"},{"location":"es/project-dependencies/eslint-config-example/","text":"ESlint configs and ignore files live in the root of your project and are named .eslintrc and .eslintignore respectively. A config based on the popular Airbnb config and prettier's recommended formatting, that uses babel, might look like: require(\"@rushstack/eslint-patch/modern-module-resolution\"); module.exports = { root: true, env: { browser: true, }, rules: { // let next/link package handle anchor attributes \"jsx-a11y/anchor-is-valid\": 0, // next/link handles the href, so anchors without href are still interactive \"jsx-a11y/no-noninteractive-tabindex\": [\"error\", { tags: [\"a\"] }], // throwing false negatives on components using Atomics.Image \"jsx-a11y/alt-text\": 0, // storybook stories are exported this way \"import/no-anonymous-default-export\": 0, // would be good to use next/image but we aren't yet \"@next/next/no-img-element\": 0, }, extends: [\"@castiron\", \"next\"], }; A basic ignore file for a project with tests, built assets, and webpack, might look like: .next/* node_modules out/*","title":"Eslint config example"},{"location":"es/project-dependencies/postcss-config-example/","text":"PostCSS is a transpiler/linter for CSS and CSS like languages. With it you can use bleeding-edge CSS properties and standards, but mostly we use it to get Autoprefixer into the mix. Autoprefixer is absolutely, 100%, indispensable. It injects all of those vendor prefixes you never remember, making cross-browser support just that much easier. Thank you Autoprefixer. PostCSS Config lives in the root of your project and is named .postcss.config.js module.exports = { plugins: [ [ \"postcss-preset-env\", { autoprefixer: { flexbox: \"no-2009\", grid: false, }, stage: 2, }, ], [ \"postcss-normalize\", { forceImport: true, }, ], ], };","title":"Postcss config example"},{"location":"es/project-dependencies/stylelint-config-example/","text":"StyleLint helps you keep your styles in check: property orders, nesting, whitespace, etc. A StyleLint config lives in the root of your project and is named .stylelintrc.js . A config for a project using Scss: module.exports = { extends: [\"stylelint-config-standard-scss\", \"stylelint-config-recess-order\"], ignoreFiles: [\"theme/styles/base/_resets.scss\"], defaultSeverity: \"error\", rules: { \"function-calc-no-unspaced-operator\": true, \"shorthand-property-no-redundant-values\": true, \"declaration-block-no-redundant-longhand-properties\": true, // SCSS compiler shouldn't allow this // 'block-no-empty': true, \"comment-no-empty\": true, \"max-nesting-depth\": 3, // SCSS compiler shouldn't allow this // 'no-extra-semicolons': true, \"number-max-precision\": 3, \"property-no-vendor-prefix\": true, // OK, sometimes you need to use important, but // it should be explicitly called out/disabled if/when used. \"declaration-no-important\": true, \"declaration-block-single-line-max-declarations\": 1, \"selector-class-pattern\": \"[a-z][a-z0-9-]*\", \"selector-id-pattern\": \"[A-z_][A-z0-9-_]*\", \"custom-property-pattern\": \"[A-z][A-z0-9-]*\", // No id's allowed!! Unless accounted for \"selector-max-id\": 0, \"selector-no-vendor-prefix\": true, \"function-name-case\": \"lower\", \"number-leading-zero\": \"always\", \"number-no-trailing-zeros\": true, \"unit-case\": \"lower\", // sometimes we need a unit for Sass \"length-zero-no-unit\": null, // Doesn't play nicely with Sass `rgb()` function \"color-function-notation\": null, \"value-keyword-case\": [ \"lower\", { ignoreKeywords: [], }, ], \"value-list-comma-space-after\": \"always-single-line\", \"property-case\": \"lower\", \"declaration-bang-space-before\": \"always\", \"declaration-block-semicolon-newline-after\": \"always\", \"declaration-block-trailing-semicolon\": \"always\", \"block-closing-brace-newline-before\": \"always\", \"block-opening-brace-newline-after\": \"always\", \"selector-attribute-brackets-space-inside\": \"never\", \"selector-attribute-quotes\": \"always\", \"selector-combinator-space-after\": \"always\", \"selector-combinator-space-before\": \"always\", \"selector-pseudo-class-case\": \"lower\", \"selector-pseudo-class-parentheses-space-inside\": \"never\", \"selector-pseudo-element-case\": \"lower\", \"selector-pseudo-element-colon-notation\": \"double\", \"selector-type-case\": \"lower\", \"selector-list-comma-space-after\": \"always-single-line\", \"selector-list-comma-space-before\": \"never\", \"rule-empty-line-before\": [ \"always\", { except: [\"first-nested\"], ignore: [\"after-comment\"], }, ], \"media-feature-name-case\": \"lower\", indentation: 2, \"max-empty-lines\": 3, \"no-eol-whitespace\": true, // SCSS rules \"scss/at-else-closing-brace-newline-after\": \"always-last-in-chain\", \"scss/at-function-pattern\": \"([a-z]+[0-9]*)([a-z0-9-]+)?\", \"scss/at-if-closing-brace-newline-after\": \"always-last-in-chain\", \"scss/at-mixin-argumentless-call-parentheses\": \"never\", \"scss/at-mixin-pattern\": \"([a-z]+[0-9]*)([a-z0-9-]+)?\", \"scss/dollar-variable-pattern\": \"([a-z]+[0-9]*)([a-z0-9-]+)?\", \"scss/dollar-variable-colon-space-after\": \"always\", \"scss/dollar-variable-colon-space-before\": \"never\", \"scss/percent-placeholder-pattern\": \"[a-z][a-z0-9-]*\", // Arbitrary media values can be used, but explicitly \"scss/media-feature-value-dollar-variable\": \"always\", \"scss/selector-no-redundant-nesting-selector\": true, \"order/properties-order\": null, }, };","title":"Stylelint config example"},{"location":"es/stack/","text":"Apilar Needs Translation","title":"Apilar"},{"location":"es/stack/#apilar","text":"Needs Translation","title":"Apilar"},{"location":"es/useful-apps/","text":"Aplicaciones \u00datiles Needs Translation","title":"Aplicaciones \u00datiles"},{"location":"es/useful-apps/#aplicaciones-utiles","text":"Needs Translation","title":"Aplicaciones \u00datiles"}]}