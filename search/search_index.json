{"config":{"indexing":"full","lang":["en","es"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Rubin EPO Web Development: A How To Introduction So, you're developing apps/websites for Rubin's Education and Public Outreach team (EPO) . Yeay! This guide will touch on a number of subjects pertaining to developing new/existing products for EPO, as well as share some opinions and resources applicable to web development in general. If you are rip-roaring to start building/working on something immediately, and you are a web developer equal parts awesome, confident, and curious, feel free to jump right into any repo in EPO's Github Organization . Each repo should contain a readme to get you going, but the readme may be making some base assumptions about what global dependencies are installed on your machine. Checkout the links below. Enjoy learning all about web development on the EPO team. Quick Links Important Cloud Services External services we rely on for most projects. Useful Apps Apps we use everyday for everyday development things. Global Dependencies Web development tools we use on the EPO team. The globally installed dependencies can be considered the recommended prerequisites before running any EPO project repo locally. Project Dependencies Tools you'll come across in most EPO projects that are installed and/or configured at the project level (i.e. not global dependencies). You will often also find these tools called out in project readme. Github A couple of global Github settings and conventions. CMS Backend + React Frontend Stack Our platonic Stack: Headless Craft 3 CMS + Next.js Investigations How is this repo structured, what's goin on here, and what are any unique dependencies. Skyviewer How is this repo structured, what's goin on here, and what are any unique dependencies.","title":"Rubin EPO Web Development: A How To"},{"location":"#rubin-epo-web-development-a-how-to","text":"","title":"Rubin EPO Web Development: A How To"},{"location":"#introduction","text":"So, you're developing apps/websites for Rubin's Education and Public Outreach team (EPO) . Yeay! This guide will touch on a number of subjects pertaining to developing new/existing products for EPO, as well as share some opinions and resources applicable to web development in general. If you are rip-roaring to start building/working on something immediately, and you are a web developer equal parts awesome, confident, and curious, feel free to jump right into any repo in EPO's Github Organization . Each repo should contain a readme to get you going, but the readme may be making some base assumptions about what global dependencies are installed on your machine. Checkout the links below. Enjoy learning all about web development on the EPO team.","title":"Introduction"},{"location":"#quick-links","text":"","title":"Quick Links"},{"location":"#important-cloud-services","text":"External services we rely on for most projects.","title":"Important Cloud Services"},{"location":"#useful-apps","text":"Apps we use everyday for everyday development things.","title":"Useful Apps"},{"location":"#global-dependencies","text":"Web development tools we use on the EPO team. The globally installed dependencies can be considered the recommended prerequisites before running any EPO project repo locally.","title":"Global Dependencies"},{"location":"#project-dependencies","text":"Tools you'll come across in most EPO projects that are installed and/or configured at the project level (i.e. not global dependencies). You will often also find these tools called out in project readme.","title":"Project Dependencies"},{"location":"#github","text":"A couple of global Github settings and conventions.","title":"Github"},{"location":"#cms-backend-react-frontend-stack","text":"Our platonic Stack: Headless Craft 3 CMS + Next.js","title":"CMS Backend + React Frontend Stack"},{"location":"#investigations","text":"How is this repo structured, what's goin on here, and what are any unique dependencies.","title":"Investigations"},{"location":"#skyviewer","text":"How is this repo structured, what's goin on here, and what are any unique dependencies.","title":"Skyviewer"},{"location":"markdown-cheat-sheet/","text":"Markdown Cheat Sheet Thanks for visiting The Markdown Guide ! This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can\u2019t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax . Basic Syntax These are the elements outlined in John Gruber\u2019s original design document. All Markdown applications support these elements. Heading H1 H2 H3 Bold bold text Italic italicized text Blockquote blockquote Ordered List First item Second item Third item Unordered List First item Second item Third item Code code Horizontal Rule Link Markdown Guide Image Extended Syntax These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements. Table Syntax Description Header Title Paragraph Text Fenced Code Block { \"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25 } Footnote Here's a sentence with a footnote. [^1] [^1]: This is the footnote. Heading ID My Great Heading {#custom-id} Definition List term : definition Strikethrough ~~The world is flat.~~ Task List [x] Write the press release [ ] Update the website [ ] Contact the media Emoji That is so funny! :joy: (See also Copying and Pasting Emoji ) Highlight I need to highlight these ==very important words==. Subscript H~2~O Superscript X^2^","title":"Markdown Cheat Sheet"},{"location":"markdown-cheat-sheet/#markdown-cheat-sheet","text":"Thanks for visiting The Markdown Guide ! This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can\u2019t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax .","title":"Markdown Cheat Sheet"},{"location":"markdown-cheat-sheet/#basic-syntax","text":"These are the elements outlined in John Gruber\u2019s original design document. All Markdown applications support these elements.","title":"Basic Syntax"},{"location":"markdown-cheat-sheet/#heading","text":"","title":"Heading"},{"location":"markdown-cheat-sheet/#h1","text":"","title":"H1"},{"location":"markdown-cheat-sheet/#h2","text":"","title":"H2"},{"location":"markdown-cheat-sheet/#h3","text":"","title":"H3"},{"location":"markdown-cheat-sheet/#bold","text":"bold text","title":"Bold"},{"location":"markdown-cheat-sheet/#italic","text":"italicized text","title":"Italic"},{"location":"markdown-cheat-sheet/#blockquote","text":"blockquote","title":"Blockquote"},{"location":"markdown-cheat-sheet/#ordered-list","text":"First item Second item Third item","title":"Ordered List"},{"location":"markdown-cheat-sheet/#unordered-list","text":"First item Second item Third item","title":"Unordered List"},{"location":"markdown-cheat-sheet/#code","text":"code","title":"Code"},{"location":"markdown-cheat-sheet/#horizontal-rule","text":"","title":"Horizontal Rule"},{"location":"markdown-cheat-sheet/#link","text":"Markdown Guide","title":"Link"},{"location":"markdown-cheat-sheet/#image","text":"","title":"Image"},{"location":"markdown-cheat-sheet/#extended-syntax","text":"These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements.","title":"Extended Syntax"},{"location":"markdown-cheat-sheet/#table","text":"Syntax Description Header Title Paragraph Text","title":"Table"},{"location":"markdown-cheat-sheet/#fenced-code-block","text":"{ \"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25 }","title":"Fenced Code Block"},{"location":"markdown-cheat-sheet/#footnote","text":"Here's a sentence with a footnote. [^1] [^1]: This is the footnote.","title":"Footnote"},{"location":"markdown-cheat-sheet/#heading-id","text":"","title":"Heading ID"},{"location":"markdown-cheat-sheet/#my-great-heading-custom-id","text":"","title":"My Great Heading {#custom-id}"},{"location":"markdown-cheat-sheet/#definition-list","text":"term : definition","title":"Definition List"},{"location":"markdown-cheat-sheet/#strikethrough","text":"~~The world is flat.~~","title":"Strikethrough"},{"location":"markdown-cheat-sheet/#task-list","text":"[x] Write the press release [ ] Update the website [ ] Contact the media","title":"Task List"},{"location":"markdown-cheat-sheet/#emoji","text":"That is so funny! :joy: (See also Copying and Pasting Emoji )","title":"Emoji"},{"location":"markdown-cheat-sheet/#highlight","text":"I need to highlight these ==very important words==.","title":"Highlight"},{"location":"markdown-cheat-sheet/#subscript","text":"H~2~O","title":"Subscript"},{"location":"markdown-cheat-sheet/#superscript","text":"X^2^","title":"Superscript"},{"location":"cloud-services/","text":"Cloud Services Google Cloud Platform Google Cloud Platform (GCP) is Google's one-stop-shop-clearing-house-AWS-look-alike-do-it-all service. And it is just that. We use GCP to host our web products, and all of the homegrown services, infrastructure, and databases that make those web products go. Every project in GCP: has three instances: prod , integration , and dev . [[Deployment workflows for those environments|Deployment Workflows]] infrastructure defined in terraform has docker containers to be used on build/deploy Netlify Netlify is a static site hosting platform with next.js and gatsby projects in mind. It offers a bunch of wonderful tools for managing and deploying projects, as well as config files to assert even greater control over builds and such. It has a very generous free tier and, before we set up GCP for similar types of development, it was absolutely indispensable. This is close to a legacy service as we now have the capability to host these kinds of client apps in GCP app engine. However, this is still where all of the current iterations of the Formal Education Investigations live and most of them will likely stay here throughout the rest of the pilot testing cycles of FY21 - FY23 and beyond. Starting in FY22 we may begin the process of porting Investigations from the Gatsby to next.js. As this work unfolds we will tackle hosting on GCP in tandem. Canto Canto is a Digital Assets Management system (DAM) that our team uses to house an archive of all of the assets (photos, videos, 3D renderings, etc.) the Rubin project produces, and also as a distribution source for all of the media assets we include in our web products. It has miriad tools for managing, editing, transforming, and sharing assets in the browser. It features a number of integrations as well as a robust API and all of the assets are served over a cdn. User Analytics TBD Legacy These are services we still rely upon but are in the process of shifting away from, or in the process of deprecating those web products that rely upon them. DigitalOcean We use DigitalOcean to host traditional sorts of projects that require a web server and database and the like. We intend to migrate all of the products hosted on DigitalOcean to the Google Cloud Platform by the end of FY22. AWS We used AWS ) for website hosting prior to adopting DigitalOcean. We still use an AWS bucket as an interim media server assets storage solution. We intend to migrate all of the media assets hosted on AWS to Canto by the end of FY22. Namecheap Namecheap handles domain purchases, DNS records, and some name servers stuff. Mostly we've already shifted away from this service. The only site in production that still relies upon it is Data2Dome. We intend to migrate any remaining domains to GCP by the end of 2021.","title":"Cloud Services"},{"location":"cloud-services/#cloud-services","text":"","title":"Cloud Services"},{"location":"cloud-services/#google-cloud-platform","text":"Google Cloud Platform (GCP) is Google's one-stop-shop-clearing-house-AWS-look-alike-do-it-all service. And it is just that. We use GCP to host our web products, and all of the homegrown services, infrastructure, and databases that make those web products go. Every project in GCP: has three instances: prod , integration , and dev . [[Deployment workflows for those environments|Deployment Workflows]] infrastructure defined in terraform has docker containers to be used on build/deploy","title":"Google Cloud Platform"},{"location":"cloud-services/#netlify","text":"Netlify is a static site hosting platform with next.js and gatsby projects in mind. It offers a bunch of wonderful tools for managing and deploying projects, as well as config files to assert even greater control over builds and such. It has a very generous free tier and, before we set up GCP for similar types of development, it was absolutely indispensable. This is close to a legacy service as we now have the capability to host these kinds of client apps in GCP app engine. However, this is still where all of the current iterations of the Formal Education Investigations live and most of them will likely stay here throughout the rest of the pilot testing cycles of FY21 - FY23 and beyond. Starting in FY22 we may begin the process of porting Investigations from the Gatsby to next.js. As this work unfolds we will tackle hosting on GCP in tandem.","title":"Netlify"},{"location":"cloud-services/#canto","text":"Canto is a Digital Assets Management system (DAM) that our team uses to house an archive of all of the assets (photos, videos, 3D renderings, etc.) the Rubin project produces, and also as a distribution source for all of the media assets we include in our web products. It has miriad tools for managing, editing, transforming, and sharing assets in the browser. It features a number of integrations as well as a robust API and all of the assets are served over a cdn.","title":"Canto"},{"location":"cloud-services/#user-analytics","text":"TBD","title":"User Analytics"},{"location":"cloud-services/#legacy","text":"These are services we still rely upon but are in the process of shifting away from, or in the process of deprecating those web products that rely upon them.","title":"Legacy"},{"location":"cloud-services/#digitalocean","text":"We use DigitalOcean to host traditional sorts of projects that require a web server and database and the like. We intend to migrate all of the products hosted on DigitalOcean to the Google Cloud Platform by the end of FY22.","title":"DigitalOcean"},{"location":"cloud-services/#aws","text":"We used AWS ) for website hosting prior to adopting DigitalOcean. We still use an AWS bucket as an interim media server assets storage solution. We intend to migrate all of the media assets hosted on AWS to Canto by the end of FY22.","title":"AWS"},{"location":"cloud-services/#namecheap","text":"Namecheap handles domain purchases, DNS records, and some name servers stuff. Mostly we've already shifted away from this service. The only site in production that still relies upon it is Data2Dome. We intend to migrate any remaining domains to GCP by the end of 2021.","title":"Namecheap"},{"location":"github/","text":"Github Github Teams Core is for EPO team members Contractors is for any external contributors Pull Requests Github repos are configured to only allow PRS to \"Rebase and merge\". Open Source Repositories Open Source repositories should have both Issues and Discussion enabled. Other Special Repositories Certain repositories act as either template repos or base Docker images. It is crucial that these are not removed unless the idea is to altogether remove the template or Docker base image. The repos will have \"template\" or \"base-image\" in the name. The base images in particular should not be altered unless you are knowledgeable of all the Dockerfiles that make use of the base image as there may be unintended bugs that arise if so.","title":"Github"},{"location":"github/#github","text":"","title":"Github"},{"location":"github/#github-teams","text":"Core is for EPO team members Contractors is for any external contributors","title":"Github Teams"},{"location":"github/#pull-requests","text":"Github repos are configured to only allow PRS to \"Rebase and merge\".","title":"Pull Requests"},{"location":"github/#open-source-repositories","text":"Open Source repositories should have both Issues and Discussion enabled.","title":"Open Source Repositories"},{"location":"github/#other-special-repositories","text":"Certain repositories act as either template repos or base Docker images. It is crucial that these are not removed unless the idea is to altogether remove the template or Docker base image. The repos will have \"template\" or \"base-image\" in the name. The base images in particular should not be altered unless you are knowledgeable of all the Dockerfiles that make use of the base image as there may be unintended bugs that arise if so.","title":"Other Special Repositories"},{"location":"global-dependencies/","text":"Global Dependencies Currently, the EPO team exclusively uses Macs. Therefore all of the tools and processes described are going to be Mac specific, but many tools have direct analogs on Windows or Linux, and alternative commands, software, etc. should be readily available (we're not discussing anything too crazy here). In 2020 Apple released a new chip architecture. This new architecture necessitates a few important and particular workflows. When commands or technologies are specific to one architecture or the other, Intel will designate the legacy architecture and M1 will designate the new architecture. Zsh As of Big Sur Apple machines ship with Zsh (as oppose to bash) as the official terminal. This change brings a couple minor differences like editing .zprofile and .zshrc files instead of .bashprofile and .bashrc files, but otherwise is very similar. A couple suggested conveniences to include in your .zprofile : Exports export EDITOR=<your fave text editor> export VISUAL=\"$EDITOR\" Aliases alias ls='ls -GFh' alias gs='git status' alias gf='git fetch --all' alias gr='git log' alias gre='git log --pretty=full' alias arm=\"arch -arm64 zsh --login\" alias intel=\"arch -x86_64 zsh --login\" That first alias gussies up the standard ls output to be a bit more verbose and a bit more human readable. The git aliases are all just shortcuts to typing less. And the last 2 are only applicable if you are on a M1 mac. These commands are useful for quickly switching your whole shell between mac architectures (switching between native M1 architecture and Intel architecture emulated with Rosetta 2) Oh My Zsh One neato thing that zsh supports much better than bash is theming and plugins. Oh My Zsh is a popular framework for managing your Zsh configurations. How to Install: sh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" Aliases: Oh My Zsh aliases a whole bunch of helpful git shortcuts for ya. Theming: There are a whole bunch of themes to choose from , and writing your own, or extending existing themes is fairly straight-forward. For instance, Agnoster is theme attuned to working with git. It will give you some helpful colors and iconography in your prompt that indicate what branch you are on, what kind of commands you may be performing, etc. Homebrew Homebrew is one of those where have you been all my life products. In their own words, it's \"The missing package manager for macOS.\" If you've done much web development without Homebrew you have probably run into many moments where packages or shared dependencies collide, or you hunt all over your file system to delete one version of something just to confidently upgrade to another, or some things are in one user directory, or some weird bin directory, or you're always having to sudo install all manner of things everywhere, and on and on. Well, for the most part Homebrew gets you around all that by being your one source of truth for everything you install on your Mac that isn't downloaded from the App Store. They have some pretty fantastic documentation and there are lots of installation tutorials out there, so we'll breeze through how to install Homebrew, callout a few commands, and then move on to some critical packages that are installed with Homebrew. Note: Homebrew now prompts you to allow the Xcode Command Line Tools to be installed along with the initial Homebrew install. We recommend you allow the Xcode Command Line Tools to be installed in this way. However, if you don't allow, you can always install separately. How to Install: /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" How to Update Homebrew: brew update How to Get a Package: brew install PACKAGE-NAME How to Update a Package: brew upgrade PACKAGE-NAME How to List Packages Installed with Homebrew: brew list What's wrong with Homebrew?: brew doctor Git Git makes the world go 'round. No really. If you are building software (for the web or otherwise) you are going to use Git. Even if you're not committing your work to Github, you're still using Git. So get used to it. It's great. We're not going to spend anytime here going through the basics, instead we'll callout a couple best practices we aspire to on the EPO team. How to Install: brew install git Github Authentication: We use Github to manage all of our repos. We highly recommend using two-factor authentication and connecting with SSH How to Configure Git: git config You can find the Git Config at ~/.gitconfig and you can configure a lot of things Configure a git message template . This is our commit message template . Along with the template you'll find a description of how we think it aides in writing stronger commit messages. Pick your editor of choice (used for messages, rebases, etc.). If your editor is already aliased: git config --global core.editor \"EDITOR-ALIAS\" . Otherwise enter the absolute path to the editor: git config --global core.editor \"PATH/TO/EDITOR\" How to Branch: We juggle 3 important branches: prod , main , and develop . These branches align with the 3 development environments with Continuous Deployment: prod deploys to Production main deploys to Integration develop deploys to Development . In older projects main is still master . Because the Production and Integration environments are potentially \"live\" to the public or stakeholders you are restricted from pushing work directly to prod and main ; work must be merged from a PR (more on this in Deployment Workflows ). For feature branches include the JIRA ticket key (like EPO-1111 ) in your branch name to associate your pull request with that JIRA ticket. If you know multiple people are going to be committing work to a single JIRA ticket, but on separate branches, differentiate your branch from theirs (like YOUR-NAME/EPO-1111 ) How to Commit: git commit Keep it short, sweet, and to the point. Learn more about message format, and JIRA & Github integrations . This is our commit message template (see above for guidance on implementation). Each commit should deliver a feature , chore , or bug fix and a reference to the type of commit should be included at the start of the commit log line as [F] , [C] , or [B] respectively. E.g. [F] Brand new cool thing , [C] Trivial maintenance task , [B] Broken thing works better now . Many commits may refer to the same JIRA ticket; no commit should refer to more than one JIRA ticket. To associate commit to a Jira ticket include a reference to the Jira ticket key in the commit message. We typically include this reference as a new line at the end of the commit like: ``` [F] Brand new cool thing Summary of the coolness [EPO-1111] ``` It's the end of the day and you're not ready to push a full on commit? Commit and push your work to a branch for safe keeping anyway, but use a placeholder message git commit -m \"[WIP]\" . Later, when you finish your work, amend your work and change the message git commit --amend . Note: because you already have a message you won't see your commit message template when you amend. Observing this practice ensures that even if your computer explodes during the night, at least the next morning you won't have to readdress that pesky problem from the day before. RIP your exploded computer. How to Pull Requests: You can submit and merge pull requests from the command line , but we generally work in Github to create and approve. You can also use pull request templates. This is our Pull Request Template . Include the JIRA ticket key (like EPO-1111 ) in your branch name to associate your pull request with that JIRA ticket. How to Rebase: git rebase <branch> Rebasing is such an awesome thing. git merge is for squares. It creates kinda superfluous merge messages in the log and tends to lead to more merge conflicts, and conflicts between collaborators' branches. To avoid all this, always rebase your work on top of develop before submitting or merging a pull request: while on your working branch git rebase origin/develop If your project has multiple contributors, rebase your work onto develop after every commit to avoid any merge conflicts down the line. Do a set of commits in your pull request feel too granular? Do they all add up to a single feature, chore, or bug fix? Do the commit messages in your pull request feel all wrong? Start an interactive rebase : git rebase -i HEAD~<NUMBER-OF-COMMITS-BACK> . Once in an interactive rebase you can combine, rewrite, or even skip commits. How to Cherry Pick: git cherry-pick <commit-id> Cherry picking commits off one branch and plopping them onto another has saved many a merge/rebase troubles headache. cherry-pick is what's happening under the hood when rebasing (i.e. a rebase is just a collection of cherry-picks applied in sequence) and it's a good technique to keep in mind when git stuff goes awry. nodenv nodenv is a Node version manager. While EPO is in a position to dictate the Node version space across all of our products, using a version manager is still a meaningful pattern because it increases flexibility, allows for ease of experimentation, and it provides a record of the Node version at a project level. Install: brew install nodenv Global Node: nodenv global <VERSION> (writes version to ~/.nodenv/version ) Local Node: nodenv local <VERSION> (creates .node-version file in root of your project) Note about M1: Support across node dependencies across versions of node across systems/architectures is somewhat patchy. Especially so for Apple M1 as it is still relatively new. For this reason, you will find some repo readmes demand not only specific node versions, but also that it be explicitly installed as M1 or Intel . There is not currently a way to assert this specificity with only nodenv commands. Instead, you need to spoof your desired architecture for your shell and then run your nodenv commands as usual. For example: $ arch -x86_64 zsh --login $ arch i386 $ nodenv install 12.14.0 Downloading node-v12.14.0-darwin-x64.tar.gz... -> https://nodejs.org/dist/v12.14.0/node-v12.14.0-darwin-x64.tar.gz Installing node-v12.14.0-darwin-x64... Installed node-v12.14.0-darwin-x64 to /path/to/.nodenv/versions/12.14.0 If you installed an Intel version of node, it is recommended that you run all subsequent node-related commands as Intel . yarn yarn is a node package manager. It acts as a replacement for npm . yarn and npm continue to converge both in terms of functionality and support. How to install: brew install yarn How to install all dependencies in package.json as specified in yarn.lock : yarn How to add a new dependency: yarn add <PACKAGE-NAME> How to add a new dev dependency: yarn add -D <PACKAGE-NAME> How to run a node command specified in package.json : yarn <COMMAND-NAME> Apps Docker Several of our projects are run with Docker locally and in production. Docker configuration and scripting is fairly complicated, but installing the docker client and running containers is fairly straight-forward . Adobe Creative Cloud Our team's Designer delivers web designs exclusively in Adobe file formats, principally as InDesign or Illustrator files, and XD prototypes. PixelSnap PixelSnap is a super useful tool that does 1 thing very well: pixel-accurate measurements of your screen. We find this to be invaluable when translating design into code: the ability to compare measurements in XD to those in the browser allows you to quickly and easily verify layouts you defined in stylesheets match those a designer created by hand. 1Password 1Password is our team's preferred Password Manager. It is a repository for all of the credentials you use across the internet, or in local software. It natively, and via browser extensions, supports autofilling form fields. It is also a 2-factor Authorizer, which means you can use it whenever an online service requires an app-based (as oppose to SMS-based) 2-factor authentication. Chronos","title":"Global Dependencies"},{"location":"global-dependencies/#global-dependencies","text":"Currently, the EPO team exclusively uses Macs. Therefore all of the tools and processes described are going to be Mac specific, but many tools have direct analogs on Windows or Linux, and alternative commands, software, etc. should be readily available (we're not discussing anything too crazy here). In 2020 Apple released a new chip architecture. This new architecture necessitates a few important and particular workflows. When commands or technologies are specific to one architecture or the other, Intel will designate the legacy architecture and M1 will designate the new architecture.","title":"Global Dependencies"},{"location":"global-dependencies/#zsh","text":"As of Big Sur Apple machines ship with Zsh (as oppose to bash) as the official terminal. This change brings a couple minor differences like editing .zprofile and .zshrc files instead of .bashprofile and .bashrc files, but otherwise is very similar. A couple suggested conveniences to include in your .zprofile : Exports export EDITOR=<your fave text editor> export VISUAL=\"$EDITOR\" Aliases alias ls='ls -GFh' alias gs='git status' alias gf='git fetch --all' alias gr='git log' alias gre='git log --pretty=full' alias arm=\"arch -arm64 zsh --login\" alias intel=\"arch -x86_64 zsh --login\" That first alias gussies up the standard ls output to be a bit more verbose and a bit more human readable. The git aliases are all just shortcuts to typing less. And the last 2 are only applicable if you are on a M1 mac. These commands are useful for quickly switching your whole shell between mac architectures (switching between native M1 architecture and Intel architecture emulated with Rosetta 2)","title":"Zsh"},{"location":"global-dependencies/#oh-my-zsh","text":"One neato thing that zsh supports much better than bash is theming and plugins. Oh My Zsh is a popular framework for managing your Zsh configurations. How to Install: sh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" Aliases: Oh My Zsh aliases a whole bunch of helpful git shortcuts for ya. Theming: There are a whole bunch of themes to choose from , and writing your own, or extending existing themes is fairly straight-forward. For instance, Agnoster is theme attuned to working with git. It will give you some helpful colors and iconography in your prompt that indicate what branch you are on, what kind of commands you may be performing, etc.","title":"Oh My Zsh"},{"location":"global-dependencies/#homebrew","text":"Homebrew is one of those where have you been all my life products. In their own words, it's \"The missing package manager for macOS.\" If you've done much web development without Homebrew you have probably run into many moments where packages or shared dependencies collide, or you hunt all over your file system to delete one version of something just to confidently upgrade to another, or some things are in one user directory, or some weird bin directory, or you're always having to sudo install all manner of things everywhere, and on and on. Well, for the most part Homebrew gets you around all that by being your one source of truth for everything you install on your Mac that isn't downloaded from the App Store. They have some pretty fantastic documentation and there are lots of installation tutorials out there, so we'll breeze through how to install Homebrew, callout a few commands, and then move on to some critical packages that are installed with Homebrew. Note: Homebrew now prompts you to allow the Xcode Command Line Tools to be installed along with the initial Homebrew install. We recommend you allow the Xcode Command Line Tools to be installed in this way. However, if you don't allow, you can always install separately. How to Install: /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" How to Update Homebrew: brew update How to Get a Package: brew install PACKAGE-NAME How to Update a Package: brew upgrade PACKAGE-NAME How to List Packages Installed with Homebrew: brew list What's wrong with Homebrew?: brew doctor","title":"Homebrew"},{"location":"global-dependencies/#git","text":"Git makes the world go 'round. No really. If you are building software (for the web or otherwise) you are going to use Git. Even if you're not committing your work to Github, you're still using Git. So get used to it. It's great. We're not going to spend anytime here going through the basics, instead we'll callout a couple best practices we aspire to on the EPO team. How to Install: brew install git Github Authentication: We use Github to manage all of our repos. We highly recommend using two-factor authentication and connecting with SSH How to Configure Git: git config You can find the Git Config at ~/.gitconfig and you can configure a lot of things Configure a git message template . This is our commit message template . Along with the template you'll find a description of how we think it aides in writing stronger commit messages. Pick your editor of choice (used for messages, rebases, etc.). If your editor is already aliased: git config --global core.editor \"EDITOR-ALIAS\" . Otherwise enter the absolute path to the editor: git config --global core.editor \"PATH/TO/EDITOR\" How to Branch: We juggle 3 important branches: prod , main , and develop . These branches align with the 3 development environments with Continuous Deployment: prod deploys to Production main deploys to Integration develop deploys to Development . In older projects main is still master . Because the Production and Integration environments are potentially \"live\" to the public or stakeholders you are restricted from pushing work directly to prod and main ; work must be merged from a PR (more on this in Deployment Workflows ). For feature branches include the JIRA ticket key (like EPO-1111 ) in your branch name to associate your pull request with that JIRA ticket. If you know multiple people are going to be committing work to a single JIRA ticket, but on separate branches, differentiate your branch from theirs (like YOUR-NAME/EPO-1111 ) How to Commit: git commit Keep it short, sweet, and to the point. Learn more about message format, and JIRA & Github integrations . This is our commit message template (see above for guidance on implementation). Each commit should deliver a feature , chore , or bug fix and a reference to the type of commit should be included at the start of the commit log line as [F] , [C] , or [B] respectively. E.g. [F] Brand new cool thing , [C] Trivial maintenance task , [B] Broken thing works better now . Many commits may refer to the same JIRA ticket; no commit should refer to more than one JIRA ticket. To associate commit to a Jira ticket include a reference to the Jira ticket key in the commit message. We typically include this reference as a new line at the end of the commit like: ``` [F] Brand new cool thing Summary of the coolness [EPO-1111] ``` It's the end of the day and you're not ready to push a full on commit? Commit and push your work to a branch for safe keeping anyway, but use a placeholder message git commit -m \"[WIP]\" . Later, when you finish your work, amend your work and change the message git commit --amend . Note: because you already have a message you won't see your commit message template when you amend. Observing this practice ensures that even if your computer explodes during the night, at least the next morning you won't have to readdress that pesky problem from the day before. RIP your exploded computer. How to Pull Requests: You can submit and merge pull requests from the command line , but we generally work in Github to create and approve. You can also use pull request templates. This is our Pull Request Template . Include the JIRA ticket key (like EPO-1111 ) in your branch name to associate your pull request with that JIRA ticket. How to Rebase: git rebase <branch> Rebasing is such an awesome thing. git merge is for squares. It creates kinda superfluous merge messages in the log and tends to lead to more merge conflicts, and conflicts between collaborators' branches. To avoid all this, always rebase your work on top of develop before submitting or merging a pull request: while on your working branch git rebase origin/develop If your project has multiple contributors, rebase your work onto develop after every commit to avoid any merge conflicts down the line. Do a set of commits in your pull request feel too granular? Do they all add up to a single feature, chore, or bug fix? Do the commit messages in your pull request feel all wrong? Start an interactive rebase : git rebase -i HEAD~<NUMBER-OF-COMMITS-BACK> . Once in an interactive rebase you can combine, rewrite, or even skip commits. How to Cherry Pick: git cherry-pick <commit-id> Cherry picking commits off one branch and plopping them onto another has saved many a merge/rebase troubles headache. cherry-pick is what's happening under the hood when rebasing (i.e. a rebase is just a collection of cherry-picks applied in sequence) and it's a good technique to keep in mind when git stuff goes awry.","title":"Git"},{"location":"global-dependencies/#nodenv","text":"nodenv is a Node version manager. While EPO is in a position to dictate the Node version space across all of our products, using a version manager is still a meaningful pattern because it increases flexibility, allows for ease of experimentation, and it provides a record of the Node version at a project level. Install: brew install nodenv Global Node: nodenv global <VERSION> (writes version to ~/.nodenv/version ) Local Node: nodenv local <VERSION> (creates .node-version file in root of your project) Note about M1: Support across node dependencies across versions of node across systems/architectures is somewhat patchy. Especially so for Apple M1 as it is still relatively new. For this reason, you will find some repo readmes demand not only specific node versions, but also that it be explicitly installed as M1 or Intel . There is not currently a way to assert this specificity with only nodenv commands. Instead, you need to spoof your desired architecture for your shell and then run your nodenv commands as usual. For example: $ arch -x86_64 zsh --login $ arch i386 $ nodenv install 12.14.0 Downloading node-v12.14.0-darwin-x64.tar.gz... -> https://nodejs.org/dist/v12.14.0/node-v12.14.0-darwin-x64.tar.gz Installing node-v12.14.0-darwin-x64... Installed node-v12.14.0-darwin-x64 to /path/to/.nodenv/versions/12.14.0 If you installed an Intel version of node, it is recommended that you run all subsequent node-related commands as Intel .","title":"nodenv"},{"location":"global-dependencies/#yarn","text":"yarn is a node package manager. It acts as a replacement for npm . yarn and npm continue to converge both in terms of functionality and support. How to install: brew install yarn How to install all dependencies in package.json as specified in yarn.lock : yarn How to add a new dependency: yarn add <PACKAGE-NAME> How to add a new dev dependency: yarn add -D <PACKAGE-NAME> How to run a node command specified in package.json : yarn <COMMAND-NAME>","title":"yarn"},{"location":"global-dependencies/#apps","text":"","title":"Apps"},{"location":"global-dependencies/#docker","text":"Several of our projects are run with Docker locally and in production. Docker configuration and scripting is fairly complicated, but installing the docker client and running containers is fairly straight-forward .","title":"Docker"},{"location":"global-dependencies/#adobe-creative-cloud","text":"Our team's Designer delivers web designs exclusively in Adobe file formats, principally as InDesign or Illustrator files, and XD prototypes.","title":"Adobe Creative Cloud"},{"location":"global-dependencies/#pixelsnap","text":"PixelSnap is a super useful tool that does 1 thing very well: pixel-accurate measurements of your screen. We find this to be invaluable when translating design into code: the ability to compare measurements in XD to those in the browser allows you to quickly and easily verify layouts you defined in stylesheets match those a designer created by hand.","title":"PixelSnap"},{"location":"global-dependencies/#1password","text":"1Password is our team's preferred Password Manager. It is a repository for all of the credentials you use across the internet, or in local software. It natively, and via browser extensions, supports autofilling form fields. It is also a 2-factor Authorizer, which means you can use it whenever an online service requires an app-based (as oppose to SMS-based) 2-factor authentication.","title":"1Password"},{"location":"global-dependencies/#chronos","text":"","title":"Chronos"},{"location":"investigations/","text":"Formal Education Investigations Introduction The investigations explore Astronomy 101 topics through an interactive question-answer format using LSST data. The investigations are currently being built as static-sites that rely on locally loaded precursor data (NOT LSST data). This section describes the current investigation work flow and stack. Work Flow Developers collaborate with designers and members of the Education Team to design, build, and test the investigations. Educational materials (Teacher's guides, notebooks, and links to supplemental documentation) can be found in the GOAT Google Doc. Developers and designers work from these materials (and directly with other team members) to create the investigation web apps. Currently the apps are: Consuming precursor data as JSON Designed in Sketch Coded in ES6 Javascript, React , SCSS, and HTML Built using Webpack 4 Deployed as a static site to Github Pages (for production) and Netlify (for staging) The Stack Data The investigation app consumes JSON for precursor astronomical data: [[Example data format|stellar-data-format]] [[Example local http request|local-axios-http-request]] using Axios ES6 Javascript Modern JS is transcompiled to vanilla javascript using babel. Important ES6 functionality includes: import NodeModuleName from 'NodeModuleName' Imports . The glue that points every piece of your web app and every other piece or external dependency. Also helps webpack to make good choices during its builds. class Classes . A more concise, legible, and fancier alternative to the vanilla prototypical inheritance . => The fat arrow . When writing a class fat arrows can help in managing what this is. [..1, 2, 3] The spread operator . Particularly helpful when [[managing React state|react-state-management]] Destructuring objects . Particularly useful in React when taking apart props for use in a Component function, or in the render method. @decoratorName Decorators . A pattern popular in some React libraries. beginnging-string${variableName}end-string String Interpolation","title":"Formal Education Investigations"},{"location":"investigations/#formal-education-investigations","text":"","title":"Formal Education Investigations"},{"location":"investigations/#introduction","text":"The investigations explore Astronomy 101 topics through an interactive question-answer format using LSST data. The investigations are currently being built as static-sites that rely on locally loaded precursor data (NOT LSST data). This section describes the current investigation work flow and stack.","title":"Introduction"},{"location":"investigations/#work-flow","text":"Developers collaborate with designers and members of the Education Team to design, build, and test the investigations. Educational materials (Teacher's guides, notebooks, and links to supplemental documentation) can be found in the GOAT Google Doc. Developers and designers work from these materials (and directly with other team members) to create the investigation web apps. Currently the apps are: Consuming precursor data as JSON Designed in Sketch Coded in ES6 Javascript, React , SCSS, and HTML Built using Webpack 4 Deployed as a static site to Github Pages (for production) and Netlify (for staging)","title":"Work Flow"},{"location":"investigations/#the-stack","text":"","title":"The Stack"},{"location":"investigations/#data","text":"The investigation app consumes JSON for precursor astronomical data: [[Example data format|stellar-data-format]] [[Example local http request|local-axios-http-request]] using Axios","title":"Data"},{"location":"investigations/#es6-javascript","text":"Modern JS is transcompiled to vanilla javascript using babel. Important ES6 functionality includes: import NodeModuleName from 'NodeModuleName' Imports . The glue that points every piece of your web app and every other piece or external dependency. Also helps webpack to make good choices during its builds. class Classes . A more concise, legible, and fancier alternative to the vanilla prototypical inheritance . => The fat arrow . When writing a class fat arrows can help in managing what this is. [..1, 2, 3] The spread operator . Particularly helpful when [[managing React state|react-state-management]] Destructuring objects . Particularly useful in React when taking apart props for use in a Component function, or in the render method. @decoratorName Decorators . A pattern popular in some React libraries. beginnging-string${variableName}end-string String Interpolation","title":"ES6 Javascript"},{"location":"project-dependencies/","text":"Project Dependencies All of the following project level dependencies are Node packages (modules). There are three main categories: packages useful in your IDE, packages useful in development (not included in the build), packages useful in production (included in the build). Quick Links editorconfig prettier eslint stylelint webpack browserslist babel postcss autoprefixer react next.js d3 In the IDE These packages will be installed globally. You can use npm or yarn . Most of these tools aim to keep a codebase uniform across contributors, as well as organized and legible. Mostly these tools enforce opinions about the format and structure of the code on the page. All of the tools in this section can be configured to produce errors or warnings , and in turn halt builds or commits, or just print infractions and suggestions in the terminal. They can be configured to fix problems automatically. You can also use them in conjunction with IDE plugins in order to view and fix rule infractions in-place. Rules and tools can be disabled inline, or for an entire file. editorconfig EditorConfig is a code styling tool. Code styling impacts the basic level of formatting different code (file types) in your IDE. For instance controlling indentation/spacing. It is not concerned with how you are using the languages corresponding to the designated file types. This configuration will only have an effect if you add the corresponding plugin to your IDE. The config is a .editorconfig file in the project root of the project. Example [[config|EditorConfig Config]] prettier Prettier is an opinionated code formatter that works with many popular languages, including js, jsx, scss, and ruby. For the most part, on our projects, we only use it for js and jsx, and its use is knit into how we use ESLint : ESlint manages any/all linters that interact with javascript-like files, Prettier included, and Prettier is responsible for the \"structure\" of those files, while other linters/configs handle how the javascript in those files is implemented. For instance, we might use prettier to control when and where commas or line breaks are included, but we would use another linter to decide when a variable should be defined using let vs const . Prettier should be configured in the .eslintrc file but it can also be configured in its own .prettierrc file. eslint ESLint is a js and jsx linter that helps you to follow ES6/Javascript best practices, adopt popular patterns and adhere to style guidelines. Being such a flexible and loosely-typed language, Javascript is especially prone to developer errors that can not be spotted until you execute the code. Dutifully linting your code can help you avoid some of the more common syntactical errors, and also ensure your code conforms to standards other developers might be familiar with (and hopefully increase legibility). One such standard we rely on is Airbnb's styleguide . Example [[config|ESLint Config]] stylelint StyleLint is for styles (CSS, SCSS, Sass, or Less) what ESLint is for Javascript. With it you can enforce rules about general formatting, what properties are allowed, and catch syntactical errors. For instance we use stylelint to enforce rules about the order properties should be in, how many levels of nesting are allowed, and what formats for colors are allowed (hex vs rgb vs color name). Example [[config|StyleLint Config]] In Development webpack Webpack is a dev tool used to build and bundle assets. In our work these assets primarily take the form of styles, Javascript, precursor data, and any typography, images, and icons served locally. How to create a webpack config is well out of the scope of this documentation. However, it is important to note that Webpack, in essence, is just a tool for telling other tools what to do. Therefore the configs and set up of the various plugins Webpack interacts with is crucial to a project successfully building assets in the manner you expect. In our work we typically adopt frontend React Frameworks that make use of Webpack under the hood, but present their own means of configuring stuff that's like one step removed from Webpack itself. browserslist Like Webpack, browserslist is a package meant to support the work other packages do. It provides the ability to configure what browsers and systems other packages (like postcss, autoprefixer, eslint, etc.) should target for any features, polyfills, or workarounds that might apply. We recommend including these definitions in the package.json file, however a .browserslistrc file in the root of your project can be used. In our work we generally use the following config to target browsers that are still actively maintained (have official support and have had a new version release in the last 2 years), and whose user base is more than 0.5% of all internet browser users. > 0.5%, last 2 versions, Firefox ESR, not dead This is the the default setting for browserslist . babel Babel is a javascript compiler that does all the work of transpiling our fancy javascript (be it ES6, JSX, typescript, or something even more experimental) into normal, everyday js any ol' browser will run (aka those browsers targeted by browserslist ). Babel. sweet sweet Babel. Thank you for the gift of modern javascript. Babel pulls all this off using lots of special workarounds and polyfills. Some of these are included in the babel core, some of them are provided by babel in the form of additional packages, and some of them are from third-party providers. These packages are installed as node modules, and referred to in the babel config found in the package.json file. You may also configure Babel using a .babelrc file in the root of your project. Example [[config|Babel Config]] postcss PostCSS a transpiler/linter for CSS and CSS like languages. With it you can use bleeding-edge CSS properties and standards, but mostly we use it to use Autoprefixer . Example [[config|PostCSS Config]] autoprefixer Autoprefixer is absolutely, 100%, indispensable. It injects all of those vendor prefixes you never remember, making cross-browser support just that much easier. Thank you Autoprefixer. In Production react React is a js framework to lend an MVC type approach to frontend development. Really this is a whole thing, and even a superficial deep-dive is well outside the scope of this documentation. next.js Next.js is a react framework which excels at building static sites, or sites who deliver a mixture of static and dynamic content/pages. It has a host of convenience methods and classes and optimizations and opinions on project structure, and it's been working pretty well for us. We started development in this vein using a similar react framework called Gatsby . For real reasons, and chance circumstances, we elected to shift from Gatsby to next.js. And the best we can say about it is, \"We haven't looked back since.\" You can find more info about our use of next.js on the frontend, and our stack in general, in the [[CMS Backend + React Frontend Stack section|The Stack]]. d3 D3 is a js library that is a popular solution for creating interactive data-driven visualizations. It is not enormously developer friendly, but it is incredibly robust and flexible to most any needs. As such going into more detail here is not gonna happen.","title":"Project Dependencies"},{"location":"project-dependencies/#project-dependencies","text":"All of the following project level dependencies are Node packages (modules). There are three main categories: packages useful in your IDE, packages useful in development (not included in the build), packages useful in production (included in the build).","title":"Project Dependencies"},{"location":"project-dependencies/#quick-links","text":"editorconfig prettier eslint stylelint webpack browserslist babel postcss autoprefixer react next.js d3","title":"Quick Links"},{"location":"project-dependencies/#in-the-ide","text":"These packages will be installed globally. You can use npm or yarn . Most of these tools aim to keep a codebase uniform across contributors, as well as organized and legible. Mostly these tools enforce opinions about the format and structure of the code on the page. All of the tools in this section can be configured to produce errors or warnings , and in turn halt builds or commits, or just print infractions and suggestions in the terminal. They can be configured to fix problems automatically. You can also use them in conjunction with IDE plugins in order to view and fix rule infractions in-place. Rules and tools can be disabled inline, or for an entire file.","title":"In the IDE"},{"location":"project-dependencies/#editorconfig","text":"EditorConfig is a code styling tool. Code styling impacts the basic level of formatting different code (file types) in your IDE. For instance controlling indentation/spacing. It is not concerned with how you are using the languages corresponding to the designated file types. This configuration will only have an effect if you add the corresponding plugin to your IDE. The config is a .editorconfig file in the project root of the project. Example [[config|EditorConfig Config]]","title":"editorconfig"},{"location":"project-dependencies/#prettier","text":"Prettier is an opinionated code formatter that works with many popular languages, including js, jsx, scss, and ruby. For the most part, on our projects, we only use it for js and jsx, and its use is knit into how we use ESLint : ESlint manages any/all linters that interact with javascript-like files, Prettier included, and Prettier is responsible for the \"structure\" of those files, while other linters/configs handle how the javascript in those files is implemented. For instance, we might use prettier to control when and where commas or line breaks are included, but we would use another linter to decide when a variable should be defined using let vs const . Prettier should be configured in the .eslintrc file but it can also be configured in its own .prettierrc file.","title":"prettier"},{"location":"project-dependencies/#eslint","text":"ESLint is a js and jsx linter that helps you to follow ES6/Javascript best practices, adopt popular patterns and adhere to style guidelines. Being such a flexible and loosely-typed language, Javascript is especially prone to developer errors that can not be spotted until you execute the code. Dutifully linting your code can help you avoid some of the more common syntactical errors, and also ensure your code conforms to standards other developers might be familiar with (and hopefully increase legibility). One such standard we rely on is Airbnb's styleguide . Example [[config|ESLint Config]]","title":"eslint"},{"location":"project-dependencies/#stylelint","text":"StyleLint is for styles (CSS, SCSS, Sass, or Less) what ESLint is for Javascript. With it you can enforce rules about general formatting, what properties are allowed, and catch syntactical errors. For instance we use stylelint to enforce rules about the order properties should be in, how many levels of nesting are allowed, and what formats for colors are allowed (hex vs rgb vs color name). Example [[config|StyleLint Config]]","title":"stylelint"},{"location":"project-dependencies/#in-development","text":"","title":"In Development"},{"location":"project-dependencies/#webpack","text":"Webpack is a dev tool used to build and bundle assets. In our work these assets primarily take the form of styles, Javascript, precursor data, and any typography, images, and icons served locally. How to create a webpack config is well out of the scope of this documentation. However, it is important to note that Webpack, in essence, is just a tool for telling other tools what to do. Therefore the configs and set up of the various plugins Webpack interacts with is crucial to a project successfully building assets in the manner you expect. In our work we typically adopt frontend React Frameworks that make use of Webpack under the hood, but present their own means of configuring stuff that's like one step removed from Webpack itself.","title":"webpack"},{"location":"project-dependencies/#browserslist","text":"Like Webpack, browserslist is a package meant to support the work other packages do. It provides the ability to configure what browsers and systems other packages (like postcss, autoprefixer, eslint, etc.) should target for any features, polyfills, or workarounds that might apply. We recommend including these definitions in the package.json file, however a .browserslistrc file in the root of your project can be used. In our work we generally use the following config to target browsers that are still actively maintained (have official support and have had a new version release in the last 2 years), and whose user base is more than 0.5% of all internet browser users. > 0.5%, last 2 versions, Firefox ESR, not dead This is the the default setting for browserslist .","title":"browserslist"},{"location":"project-dependencies/#babel","text":"Babel is a javascript compiler that does all the work of transpiling our fancy javascript (be it ES6, JSX, typescript, or something even more experimental) into normal, everyday js any ol' browser will run (aka those browsers targeted by browserslist ). Babel. sweet sweet Babel. Thank you for the gift of modern javascript. Babel pulls all this off using lots of special workarounds and polyfills. Some of these are included in the babel core, some of them are provided by babel in the form of additional packages, and some of them are from third-party providers. These packages are installed as node modules, and referred to in the babel config found in the package.json file. You may also configure Babel using a .babelrc file in the root of your project. Example [[config|Babel Config]]","title":"babel"},{"location":"project-dependencies/#postcss","text":"PostCSS a transpiler/linter for CSS and CSS like languages. With it you can use bleeding-edge CSS properties and standards, but mostly we use it to use Autoprefixer . Example [[config|PostCSS Config]]","title":"postcss"},{"location":"project-dependencies/#autoprefixer","text":"Autoprefixer is absolutely, 100%, indispensable. It injects all of those vendor prefixes you never remember, making cross-browser support just that much easier. Thank you Autoprefixer.","title":"autoprefixer"},{"location":"project-dependencies/#in-production","text":"","title":"In Production"},{"location":"project-dependencies/#react","text":"React is a js framework to lend an MVC type approach to frontend development. Really this is a whole thing, and even a superficial deep-dive is well outside the scope of this documentation.","title":"react"},{"location":"project-dependencies/#nextjs","text":"Next.js is a react framework which excels at building static sites, or sites who deliver a mixture of static and dynamic content/pages. It has a host of convenience methods and classes and optimizations and opinions on project structure, and it's been working pretty well for us. We started development in this vein using a similar react framework called Gatsby . For real reasons, and chance circumstances, we elected to shift from Gatsby to next.js. And the best we can say about it is, \"We haven't looked back since.\" You can find more info about our use of next.js on the frontend, and our stack in general, in the [[CMS Backend + React Frontend Stack section|The Stack]].","title":"next.js"},{"location":"project-dependencies/#d3","text":"D3 is a js library that is a popular solution for creating interactive data-driven visualizations. It is not enormously developer friendly, but it is incredibly robust and flexible to most any needs. As such going into more detail here is not gonna happen.","title":"d3"},{"location":"skyviewer/","text":"Skyviewer TBD","title":"Skyviewer"},{"location":"skyviewer/#skyviewer","text":"TBD","title":"Skyviewer"},{"location":"stack/","text":"The Stack For content driven projects we use Craft 3 as a headless CMS on the backend and next.js on the frontend. Craft 3 Why Craft? Craft is a real Swiss Army Knife of CMSs. Written in PHP, on top of the popular Yii Framework, it is highly flexible, extremely developer and content creator friendly, has a rich marketplace of plugins , and a vibrant dev community . While it is not an open source project, they certainly adopt a similar ethos in their releases, their communication to users, and their dependency on a sprawling international dev community. And it's pretty darn cheap. The CMS dashboard is totally responsive, very mobile-friendly, and very intuitive for admins and content creators. It has a clean-slate approach to content modeling and front-end development that doesn\u2019t make any assumptions about your content or how it should be consumed. It has a robust framework for module and plugin development . It has a thoughtful approach to localization/multi-site management . Additionally, Craft has an option to run as a headless CMS. When this option is enabled queries to the CMS are handled over GraphQL. Using Craft as a headless CMS allows for a very generous separation of concerns between the backend and the frontend, and therefore much more flexibility in terms of what technologies or strategies we leverage on the backend vs the frontend. Modeling content in Craft The GUI in the Craft Admin Dashboard makes declaring and editing new Entry Types and Fields quick and easy. All changes are recorded in the project config files as migrations (of sorts). Project configs are applied when the project is instantiated making your work very portable across environments. Asserting such fine control over such complex things all in a GUI in the dashboard also means devs can get going in Craft quite quickly, not getting bogged down by code/syntactic idiosyncracies. Creating content in Craft Craft is a fairly unopinionated CMS which lends itself well to both traditional text-heavy web content like pages and posts, as well as defining very customized structured data. For the former, as much as possible, we take the composable \"Content Block\" approach, rather than a \"Page Template\" approach. The distinction being that where a \"Page Template\" approach requires a new kinda \"set in stone\" page template for every type of page on your site, the composable \"Content Block\" approach supplies the content creator with a set of building blocks they can select and arrange to \"compose\" pages. Still approach not only allows for more variance across pages, but also means a block of content can easily be abstracted out of a Page Entry, and into its own Entry, at which point that block of content can be reused across any pages. For instance, if you have a Callout Content Block, any Callout the content creator creates can just be a one-off for whatever page they're working on, but also every Callout that is created is saved as its own Entry, independent of whatever page it is on, and therefore identical instances of that Callout can then be reused across any page. For less-pagey content a Content Block approach usually isn't appropriate, but the wide array of off the shelf fields, and the ability to define highly complex custom fields, means you have a lot of tools at your disposal to create Entries, and create relationships between Entries, such that nearly any shape of data is achievable in the CMS. next.js React is a fairly freewheeling javascript framework. next.js provides enough structure/framework to keep your repo/project well organized and also dead simple configurations for your builds. It is a framework optimized for SSR and/or Static content, and/or Dynamic content. This versatility means it's never a stretch to use next.js in a project. Because it's never one way or the other, but as many ways as you'd like, different aspects of a project can be optimized for different use cases. graphQL graphQL is a query language that thrusts more than the usual amount of \"\"API data-fetching\" onus to the frontend. It's not the most flexible way to compose queries, and that's sorta the point. Each query is sorta a little schema validating what you want, against what you get, against what is available.","title":"The Stack"},{"location":"stack/#the-stack","text":"For content driven projects we use Craft 3 as a headless CMS on the backend and next.js on the frontend.","title":"The Stack"},{"location":"stack/#craft-3","text":"","title":"Craft 3"},{"location":"stack/#why-craft","text":"Craft is a real Swiss Army Knife of CMSs. Written in PHP, on top of the popular Yii Framework, it is highly flexible, extremely developer and content creator friendly, has a rich marketplace of plugins , and a vibrant dev community . While it is not an open source project, they certainly adopt a similar ethos in their releases, their communication to users, and their dependency on a sprawling international dev community. And it's pretty darn cheap. The CMS dashboard is totally responsive, very mobile-friendly, and very intuitive for admins and content creators. It has a clean-slate approach to content modeling and front-end development that doesn\u2019t make any assumptions about your content or how it should be consumed. It has a robust framework for module and plugin development . It has a thoughtful approach to localization/multi-site management . Additionally, Craft has an option to run as a headless CMS. When this option is enabled queries to the CMS are handled over GraphQL. Using Craft as a headless CMS allows for a very generous separation of concerns between the backend and the frontend, and therefore much more flexibility in terms of what technologies or strategies we leverage on the backend vs the frontend.","title":"Why Craft?"},{"location":"stack/#modeling-content-in-craft","text":"The GUI in the Craft Admin Dashboard makes declaring and editing new Entry Types and Fields quick and easy. All changes are recorded in the project config files as migrations (of sorts). Project configs are applied when the project is instantiated making your work very portable across environments. Asserting such fine control over such complex things all in a GUI in the dashboard also means devs can get going in Craft quite quickly, not getting bogged down by code/syntactic idiosyncracies.","title":"Modeling content in Craft"},{"location":"stack/#creating-content-in-craft","text":"Craft is a fairly unopinionated CMS which lends itself well to both traditional text-heavy web content like pages and posts, as well as defining very customized structured data. For the former, as much as possible, we take the composable \"Content Block\" approach, rather than a \"Page Template\" approach. The distinction being that where a \"Page Template\" approach requires a new kinda \"set in stone\" page template for every type of page on your site, the composable \"Content Block\" approach supplies the content creator with a set of building blocks they can select and arrange to \"compose\" pages. Still approach not only allows for more variance across pages, but also means a block of content can easily be abstracted out of a Page Entry, and into its own Entry, at which point that block of content can be reused across any pages. For instance, if you have a Callout Content Block, any Callout the content creator creates can just be a one-off for whatever page they're working on, but also every Callout that is created is saved as its own Entry, independent of whatever page it is on, and therefore identical instances of that Callout can then be reused across any page. For less-pagey content a Content Block approach usually isn't appropriate, but the wide array of off the shelf fields, and the ability to define highly complex custom fields, means you have a lot of tools at your disposal to create Entries, and create relationships between Entries, such that nearly any shape of data is achievable in the CMS.","title":"Creating content in Craft"},{"location":"stack/#nextjs","text":"React is a fairly freewheeling javascript framework. next.js provides enough structure/framework to keep your repo/project well organized and also dead simple configurations for your builds. It is a framework optimized for SSR and/or Static content, and/or Dynamic content. This versatility means it's never a stretch to use next.js in a project. Because it's never one way or the other, but as many ways as you'd like, different aspects of a project can be optimized for different use cases.","title":"next.js"},{"location":"stack/#graphql","text":"graphQL is a query language that thrusts more than the usual amount of \"\"API data-fetching\" onus to the frontend. It's not the most flexible way to compose queries, and that's sorta the point. Each query is sorta a little schema validating what you want, against what you get, against what is available.","title":"graphQL"},{"location":"useful-apps/","text":"Useful Apps Docker Several of our projects are run with Docker locally and in production. Docker configuration and scripting is fairly complicated, but installing the docker client and running containers is fairly straight-forward . Adobe Creative Cloud Our team's Designer delivers web designs exclusively in Adobe file formats, principally as InDesign or Illustrator files, and XD prototypes. PixelSnap PixelSnap is a super useful tool that does 1 thing very well: pixel-accurate measurements of your screen. We find this to be invaluable when translating design into code: the ability to compare measurements in XD to those in the browser allows you to quickly and easily verify layouts you defined in stylesheets match those a designer created by hand. Color Picker The native Apple Color Picker utility is absent in recent macOS versions. But there are many many many excellent free replacement options. System Color Picker is one of them. It includes an eye dropper tool which is the most critical feature as, similarly to PixelSnap, it enables you to verify color choices in design are accurately translated to code. For instance, one common gotcha is that designers often create many shades of a color by shifting its opacity. Replicating those colors in the same way in the browser (i.e. by shifting opacity) is not usually the preferred approach. Using an eye dropper tool in a Color Picker app allows you to grab the hex or rgba color code from the pixel on the screen itself, and therefore reproduce it 1:1 in code. Xcode If you installed Homebrew you likely already have access to the Xcode Command Line Tools. This is typically sufficient for most every kind of Xcode-y apple developy thing you need to do, with one important exception: emulating iPhones. To emulate an iPhone on your Apple you need to install the full Xcode 13 app . Xcode also enables you to use browser-based devTools with a tethered iPhone. While there is no substitute for testing on a real device, the Xcode emulated iPhone will tend to catch more mobile-specific issues than testing in the Chrome browser-based emulator alone. Genymotion Genymotion is an Android device emulator. This allows you to test on mobile on Android. It also supports \"tethering\" the emulated device to chrome, so you can use the Chrome DevTools with the emulated device. There are many similar apps out there that accomplish this, Ganymotion happens to be free and primarily has been chosen for that reason. 1Password 1Password is our team's preferred Password Manager. It is a repository for all of the credentials you use across the internet, or in local software. It natively, and via browser extensions, supports autofilling form fields. It is also a 2-factor Authorizer, which means you can use it whenever an online service requires an app-based (as oppose to SMS-based) 2-factor authentication. Chronos We use Jira as our main project management, ticketing, and time tracking tool. Chronos is a free app that allows you to manage, edit, and log time in Jira tickets via a desktop app. Additionally, it features realtime time tracking for wok logs so that you can track the time you are taking to do something, rather than estimate time spent in advance or after the fact. BlueJeans BlueJeans is the official audio/video conferencing tool for the Rubin Project. Whereas... Zoom Zoom is the official audio/video conferencing tool for NOIRLab. So you'll def need both.","title":"Useful Apps"},{"location":"useful-apps/#useful-apps","text":"","title":"Useful Apps"},{"location":"useful-apps/#docker","text":"Several of our projects are run with Docker locally and in production. Docker configuration and scripting is fairly complicated, but installing the docker client and running containers is fairly straight-forward .","title":"Docker"},{"location":"useful-apps/#adobe-creative-cloud","text":"Our team's Designer delivers web designs exclusively in Adobe file formats, principally as InDesign or Illustrator files, and XD prototypes.","title":"Adobe Creative Cloud"},{"location":"useful-apps/#pixelsnap","text":"PixelSnap is a super useful tool that does 1 thing very well: pixel-accurate measurements of your screen. We find this to be invaluable when translating design into code: the ability to compare measurements in XD to those in the browser allows you to quickly and easily verify layouts you defined in stylesheets match those a designer created by hand.","title":"PixelSnap"},{"location":"useful-apps/#color-picker","text":"The native Apple Color Picker utility is absent in recent macOS versions. But there are many many many excellent free replacement options. System Color Picker is one of them. It includes an eye dropper tool which is the most critical feature as, similarly to PixelSnap, it enables you to verify color choices in design are accurately translated to code. For instance, one common gotcha is that designers often create many shades of a color by shifting its opacity. Replicating those colors in the same way in the browser (i.e. by shifting opacity) is not usually the preferred approach. Using an eye dropper tool in a Color Picker app allows you to grab the hex or rgba color code from the pixel on the screen itself, and therefore reproduce it 1:1 in code.","title":"Color Picker"},{"location":"useful-apps/#xcode","text":"If you installed Homebrew you likely already have access to the Xcode Command Line Tools. This is typically sufficient for most every kind of Xcode-y apple developy thing you need to do, with one important exception: emulating iPhones. To emulate an iPhone on your Apple you need to install the full Xcode 13 app . Xcode also enables you to use browser-based devTools with a tethered iPhone. While there is no substitute for testing on a real device, the Xcode emulated iPhone will tend to catch more mobile-specific issues than testing in the Chrome browser-based emulator alone.","title":"Xcode"},{"location":"useful-apps/#genymotion","text":"Genymotion is an Android device emulator. This allows you to test on mobile on Android. It also supports \"tethering\" the emulated device to chrome, so you can use the Chrome DevTools with the emulated device. There are many similar apps out there that accomplish this, Ganymotion happens to be free and primarily has been chosen for that reason.","title":"Genymotion"},{"location":"useful-apps/#1password","text":"1Password is our team's preferred Password Manager. It is a repository for all of the credentials you use across the internet, or in local software. It natively, and via browser extensions, supports autofilling form fields. It is also a 2-factor Authorizer, which means you can use it whenever an online service requires an app-based (as oppose to SMS-based) 2-factor authentication.","title":"1Password"},{"location":"useful-apps/#chronos","text":"We use Jira as our main project management, ticketing, and time tracking tool. Chronos is a free app that allows you to manage, edit, and log time in Jira tickets via a desktop app. Additionally, it features realtime time tracking for wok logs so that you can track the time you are taking to do something, rather than estimate time spent in advance or after the fact.","title":"Chronos"},{"location":"useful-apps/#bluejeans","text":"BlueJeans is the official audio/video conferencing tool for the Rubin Project. Whereas...","title":"BlueJeans"},{"location":"useful-apps/#zoom","text":"Zoom is the official audio/video conferencing tool for NOIRLab. So you'll def need both.","title":"Zoom"},{"location":"es/","text":"Rubin EPO Desarrollo Web: C\u00f3mo hacerlo Needs Translation","title":"Rubin EPO Desarrollo Web: C\u00f3mo hacerlo"},{"location":"es/#rubin-epo-desarrollo-web-como-hacerlo","text":"Needs Translation","title":"Rubin EPO Desarrollo Web: C\u00f3mo hacerlo"},{"location":"es/markdown-cheat-sheet/","text":"Markdown Cheat Sheet Thanks for visiting The Markdown Guide ! This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can\u2019t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax . Basic Syntax These are the elements outlined in John Gruber\u2019s original design document. All Markdown applications support these elements. Heading H1 H2 H3 Bold bold text Italic italicized text Blockquote blockquote Ordered List First item Second item Third item Unordered List First item Second item Third item Code code Horizontal Rule Link Markdown Guide Image Extended Syntax These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements. Table Syntax Description Header Title Paragraph Text Fenced Code Block { \"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25 } Footnote Here's a sentence with a footnote. [^1] [^1]: This is the footnote. Heading ID My Great Heading {#custom-id} Definition List term : definition Strikethrough ~~The world is flat.~~ Task List [x] Write the press release [ ] Update the website [ ] Contact the media Emoji That is so funny! :joy: (See also Copying and Pasting Emoji ) Highlight I need to highlight these ==very important words==. Subscript H~2~O Superscript X^2^","title":"Markdown Cheat Sheet"},{"location":"es/markdown-cheat-sheet/#markdown-cheat-sheet","text":"Thanks for visiting The Markdown Guide ! This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can\u2019t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax .","title":"Markdown Cheat Sheet"},{"location":"es/markdown-cheat-sheet/#basic-syntax","text":"These are the elements outlined in John Gruber\u2019s original design document. All Markdown applications support these elements.","title":"Basic Syntax"},{"location":"es/markdown-cheat-sheet/#heading","text":"","title":"Heading"},{"location":"es/markdown-cheat-sheet/#h1","text":"","title":"H1"},{"location":"es/markdown-cheat-sheet/#h2","text":"","title":"H2"},{"location":"es/markdown-cheat-sheet/#h3","text":"","title":"H3"},{"location":"es/markdown-cheat-sheet/#bold","text":"bold text","title":"Bold"},{"location":"es/markdown-cheat-sheet/#italic","text":"italicized text","title":"Italic"},{"location":"es/markdown-cheat-sheet/#blockquote","text":"blockquote","title":"Blockquote"},{"location":"es/markdown-cheat-sheet/#ordered-list","text":"First item Second item Third item","title":"Ordered List"},{"location":"es/markdown-cheat-sheet/#unordered-list","text":"First item Second item Third item","title":"Unordered List"},{"location":"es/markdown-cheat-sheet/#code","text":"code","title":"Code"},{"location":"es/markdown-cheat-sheet/#horizontal-rule","text":"","title":"Horizontal Rule"},{"location":"es/markdown-cheat-sheet/#link","text":"Markdown Guide","title":"Link"},{"location":"es/markdown-cheat-sheet/#image","text":"","title":"Image"},{"location":"es/markdown-cheat-sheet/#extended-syntax","text":"These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements.","title":"Extended Syntax"},{"location":"es/markdown-cheat-sheet/#table","text":"Syntax Description Header Title Paragraph Text","title":"Table"},{"location":"es/markdown-cheat-sheet/#fenced-code-block","text":"{ \"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25 }","title":"Fenced Code Block"},{"location":"es/markdown-cheat-sheet/#footnote","text":"Here's a sentence with a footnote. [^1] [^1]: This is the footnote.","title":"Footnote"},{"location":"es/markdown-cheat-sheet/#heading-id","text":"","title":"Heading ID"},{"location":"es/markdown-cheat-sheet/#my-great-heading-custom-id","text":"","title":"My Great Heading {#custom-id}"},{"location":"es/markdown-cheat-sheet/#definition-list","text":"term : definition","title":"Definition List"},{"location":"es/markdown-cheat-sheet/#strikethrough","text":"~~The world is flat.~~","title":"Strikethrough"},{"location":"es/markdown-cheat-sheet/#task-list","text":"[x] Write the press release [ ] Update the website [ ] Contact the media","title":"Task List"},{"location":"es/markdown-cheat-sheet/#emoji","text":"That is so funny! :joy: (See also Copying and Pasting Emoji )","title":"Emoji"},{"location":"es/markdown-cheat-sheet/#highlight","text":"I need to highlight these ==very important words==.","title":"Highlight"},{"location":"es/markdown-cheat-sheet/#subscript","text":"H~2~O","title":"Subscript"},{"location":"es/markdown-cheat-sheet/#superscript","text":"X^2^","title":"Superscript"},{"location":"es/cloud-services/","text":"Servicios en la Nube Needs Translation","title":"Servicios en la Nube"},{"location":"es/cloud-services/#servicios-en-la-nube","text":"Needs Translation","title":"Servicios en la Nube"},{"location":"es/github/","text":"Github Needs Translation","title":"Github"},{"location":"es/github/#github","text":"Needs Translation","title":"Github"},{"location":"es/global-dependencies/","text":"Dependencias Globales Needs Translation","title":"Dependencias Globales"},{"location":"es/global-dependencies/#dependencias-globales","text":"Needs Translation","title":"Dependencias Globales"},{"location":"es/investigations/","text":"Investigaciones de Educaci\u00f3n Formal Needs Translation","title":"Investigaciones de Educaci\u00f3n Formal"},{"location":"es/investigations/#investigaciones-de-educacion-formal","text":"Needs Translation","title":"Investigaciones de Educaci\u00f3n Formal"},{"location":"es/project-dependencies/","text":"Dependencias del Proyecto Needs Translation","title":"Dependencias del Proyecto"},{"location":"es/project-dependencies/#dependencias-del-proyecto","text":"Needs Translation","title":"Dependencias del Proyecto"},{"location":"es/skyviewer/","text":"Skyviewer Needs Translation","title":"Skyviewer"},{"location":"es/skyviewer/#skyviewer","text":"Needs Translation","title":"Skyviewer"},{"location":"es/stack/","text":"Apilar Needs Translation","title":"Apilar"},{"location":"es/stack/#apilar","text":"Needs Translation","title":"Apilar"},{"location":"es/useful-apps/","text":"Aplicaciones \u00datiles Needs Translation","title":"Aplicaciones \u00datiles"},{"location":"es/useful-apps/#aplicaciones-utiles","text":"Needs Translation","title":"Aplicaciones \u00datiles"}]}